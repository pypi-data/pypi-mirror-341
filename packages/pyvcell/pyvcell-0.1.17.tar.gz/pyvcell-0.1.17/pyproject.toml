[tool.poetry]
name = "pyvcell"
version = "0.1.17"
description = "This is the python wrapper for vcell modeling and simulation"
authors = ["Jim Schaff <schaff@uchc.edu>"]
repository = "https://github.com/virtualcell/pyvcell"
documentation = "https://virtualcell.github.io/pyvcell/"
readme = "README.md"
packages = [
    {include = "pyvcell"},
]

[tool.poetry.dependencies]
python = ">=3.11,<4.0"
numexpr = "^2.10.0"
zarr = "^2.17.2"
h5py = "^3.11.0"
numpy = ">=1.26.4,<3.0"
orjson = "^3.10.3"
vtk = "^9.3.1"
pyvcell-fvsolver = "^0.1.1"
typer = ">=0.12.3,<1.0.0"
pydantic = "^2.10.5"
requests-oauth2client = "^1.6.0"
overrides = "^7.7.0"
typing-extensions = "^4.12.2"
urllib3 = "^2.3.0"
requests = "^2.32.3"
python-dateutil = "^2.8.2"
python-libsbml = "^5.20.4"
matplotlib = "^3.10.0"
lxml = "^5.3.1"
imageio = "^2.37.0"
tensorstore = "^0.1.72"
libvcell = "^0.0.13"
trame = "^3.8.1"
trame-vtk = "^2.8.15"
trame-vuetify = "^2.8.1"
pyvista = "^0.44.2"
trame-server = "^3.4.0"
sympy = "^1.13.1"
antimony = "^2.15.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
deptry = "^0.16.2"
mypy = "^1.5.1"
pre-commit = "^3.8.0"
tox = "^4.11.1"
types-requests = "^2.32.0.20241016"
notebook = "^7.3.2"
lxml-stubs = "^0.5.1"
trame-jupyter-extension = "^2.1.4"
ipywidgets = "^8.1.5"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.50"
mkdocstrings = {extras = ["python"], version = "^0.27.0"}
griffe = "^1.5.5"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
files = ["pyvcell", "tests", "examples"]
exclude = ["stubs.*"]
strict = true

[[tool.mypy.overrides]]
module = [ "pyvcell._internal.api.*" ]
disable_error_code = ["import-not-found", "import-untyped", "no-untyped-def", "no-untyped-call", "attr-defined",
    "type-arg", "union-attr", "no-any-return", "return"]

[[tool.mypy.overrides]]
module = "zarr"
ignore_missing_imports = true
disable_error_code = [
    "import-not-found", "import-untyped", "no-untyped-def",
    "no-untyped-call", "attr-defined", "type-arg", "union-attr",
    "no-any-return", "return"
]

[[tool.mypy.overrides]]
module = "trame.*"
ignore_missing_imports = true
disable_error_code = [
    "import-untyped"
]

[[tool.mypy.overrides]]
module = "trame_server.*"
ignore_missing_imports = true
disable_error_code = [
    "import-untyped"
]

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true
lint.select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
lint.ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # avoid specifiying long messages outside the exception class
    "TRY003",
    # avoid functions which are too complex
    "C901",
    # avoid uses of Uses of `tarfile.extractall()
    "S202",
    #  B008 Do not perform function call `typer.Argument` in argument defaults
    "B008",
    # Using `lxml` to parse untrusted data is known to be vulnerable to XML attacks
    "S320",
]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["pyvcell"]


[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
"stubs/libsbml/__init__.pyi" = ["ALL"]
