"""
VCell API

VCell API

The version of the OpenAPI document: 1.0.1
Contact: vcell_support@uchc.com
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing_extensions import Self

from pyvcell._internal.api.vcell_client.models.key_value import KeyValue
from pyvcell._internal.api.vcell_client.models.user import User


class VCSimulationIdentifier(BaseModel):
    """
    VCSimulationIdentifier
    """

    simulation_key: Optional[KeyValue] = Field(default=None, alias="simulationKey")
    owner: Optional[User] = None
    i_d: Optional[StrictStr] = Field(default=None, alias="iD")
    __properties: ClassVar[List[str]] = ["simulationKey", "owner", "iD"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VCSimulationIdentifier from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of simulation_key
        if self.simulation_key:
            _dict["simulationKey"] = self.simulation_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner:
            _dict["owner"] = self.owner.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VCSimulationIdentifier from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        # raise errors for additional fields in the input
        for _key in obj.keys():
            if _key not in cls.__properties:
                raise ValueError(
                    "Error due to additional fields (not defined in VCSimulationIdentifier) in the input: " + _key
                )

        _obj = cls.model_validate({
            "simulationKey": KeyValue.from_dict(obj["simulationKey"]) if obj.get("simulationKey") is not None else None,
            "owner": User.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "iD": obj.get("iD"),
        })
        return _obj
