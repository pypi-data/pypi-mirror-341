[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "pybticino"
description = "Simple API to access BTicino/Legrand Classe 100X/300X devices" # Placeholder - Update needed
dynamic = ["version"]
readme = "README.md"
authors = [{ name = "k-the-hidden-hero", email = "git@k8s.one" }] # Updated
maintainers = [{ name = "k-the-hidden-hero", email = "git@k8s.one" }] # Updated
requires-python = ">=3.11,<3.14"
dependencies = [
    "websockets>=14.0",
    "aiohttp>=3.11.16"
]
classifiers = [
    "Development Status :: 4 - Beta", # Adjusted status
    "Intended Audience :: Developers",
    "Topic :: Home Automation",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

[project.urls]
Homepage = "https://github.com/k-the-hidden-hero/pybticino" # Updated
Repository = "https://github.com/k-the-hidden-hero/pybticino.git" # Updated
Issues = "https://github.com/k-the-hidden-hero/pybticino/issues" # Updated
Changelog = "https://github.com/k-the-hidden-hero/pybticino/blob/main/CHANGELOG.md" # Updated

[tool.setuptools.packages.find]
where = ["src"]

[tool.uv]
dev-dependencies = [
    "black==24.8.0",
    "pre-commit==3.8.0",
    "ruff==0.6.4",
    "codespell==2.3.0",
    "pytest==8.3.3",
    "pytest-asyncio==0.24.0",
    "pytest-cov==5.0.0",
    "docutils==0.21.2",
    "time-machine==2.15.0",
    "mypy==1.11.2",
    "pytest-mock==3.14.0",
    # "requests-mock==1.12.1", # Likely not needed for websockets
    "websockets>=14.0", # Add websockets for testing
    "tox==4.18.1",
    "twine==5.1.1",
]

[tool.setuptools_scm]
local_scheme = "no-local-version"

[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "auto"
norecursedirs = ["examples", "docs", ".tox", "test_env"] # Aggiunto per escludere directory

[tool.mypy]
ignore_missing_imports = true

[tool.ruff]
target-version = "py311"
fix = true
line-length = 88

[tool.ruff.lint]
select = ["ALL"]

ignore = [
    "D202", # No blank lines allowed after function docstring
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D406", # Section name should end with a newline
    "D407", # Section name underlining
    "E501", # line too long
    "E731", # do not assign a lambda expression, use a def
    "N818", # Exception should be named with an Error suffix
    # False positives https://github.com/astral-sh/ruff/issues/5386
    "PLC0208", # Use a sequence type instead of a `set` when iterating over values
    "PLR0911", # Too many return statements ({returns} > {max_returns})
    "PLR0912", # Too many branches ({branches} > {max_branches})
    "PLR0913", # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915", # Too many statements ({statements} > {max_statements})
    "PLR2004", # Magic value used in comparison, consider replacing {value} with a constant variable
    "PLW2901", # Outer {outer_kind} variable {name} overwritten by inner {inner_kind} target
    "UP006",   # keep type annotation style as is
    "UP007",   # keep type annotation style as is
    # Ignored due to performance: https://github.com/charliermarsh/ruff/issues/2923
    "UP038", # Use `X | Y` in `isinstance` call instead of `(X, Y)`
    # need cleanup
    "FBT001",
    "FBT002",
    "FBT003",
    "DTZ006",
    "DTZ005",
    "PGH003",
    "ANN401",
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"pytz".msg = "use zoneinfo instead"

[tool.ruff.lint.isort]
force-sort-within-sections = true
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
# Allow for main entry & scripts to write to stdout
"src/pybticino/__main__.py" = ["T201"] # Updated path
"src/pybticino/module.py" = ["PGH003"] # Updated path - Check if still relevant
"src/pybticino/auth.py" = ["ASYNC109"] # Updated path - Check if still relevant
"docs/conf.py" = ["A001"] # Ignore builtin shadowing for 'copyright'

# Exceptions for tests
"tests/*" = [ # Keep tests ignores generic for now
    "D10",
    "S105",
    "S101",
    "ANN201",
    "ANN001",
    "N802",
    "ANN202",
    "PTH123",
    "ASYNC230",
    "PT012",
    "DTZ001",
    "ANN003",
    "ANN002",
    "A001",
    "ARG001",
    "ANN204",
]
# Specific ignores for test_basic.py
"tests/test_basic.py" = ["INP001", "PT018", "BLE001", "D401", "TRY003", "EM101"]

[tool.ruff.lint.mccabe]
max-complexity = 25
