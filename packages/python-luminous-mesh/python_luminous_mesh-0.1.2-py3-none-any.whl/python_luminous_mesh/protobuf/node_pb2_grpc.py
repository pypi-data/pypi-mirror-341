# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import node_pb2 as node__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in node_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NodeServiceStub(object):
    """Node lifecycle and authentication service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterNode = channel.unary_unary(
                '/luminousmesh.NodeService/RegisterNode',
                request_serializer=node__pb2.RegisterNodeRequest.SerializeToString,
                response_deserializer=node__pb2.RegisterNodeResponse.FromString,
                _registered_method=True)
        self.Authenticate = channel.unary_unary(
                '/luminousmesh.NodeService/Authenticate',
                request_serializer=node__pb2.AuthenticationRequest.SerializeToString,
                response_deserializer=node__pb2.AuthenticationResponse.FromString,
                _registered_method=True)
        self.StreamConnection = channel.stream_stream(
                '/luminousmesh.NodeService/StreamConnection',
                request_serializer=node__pb2.NodeStatusUpdate.SerializeToString,
                response_deserializer=node__pb2.ControlPlaneCommand.FromString,
                _registered_method=True)
        self.RotateToken = channel.unary_unary(
                '/luminousmesh.NodeService/RotateToken',
                request_serializer=node__pb2.TokenRotationRequest.SerializeToString,
                response_deserializer=node__pb2.TokenRotationResponse.FromString,
                _registered_method=True)


class NodeServiceServicer(object):
    """Node lifecycle and authentication service
    """

    def RegisterNode(self, request, context):
        """Initial registration with bootstrap token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Authenticate(self, request, context):
        """Certificate-based authentication and connection establishment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamConnection(self, request_iterator, context):
        """Bidirectional stream for node status updates and control plane commands
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RotateToken(self, request, context):
        """Token rotation for enhanced security
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterNode,
                    request_deserializer=node__pb2.RegisterNodeRequest.FromString,
                    response_serializer=node__pb2.RegisterNodeResponse.SerializeToString,
            ),
            'Authenticate': grpc.unary_unary_rpc_method_handler(
                    servicer.Authenticate,
                    request_deserializer=node__pb2.AuthenticationRequest.FromString,
                    response_serializer=node__pb2.AuthenticationResponse.SerializeToString,
            ),
            'StreamConnection': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamConnection,
                    request_deserializer=node__pb2.NodeStatusUpdate.FromString,
                    response_serializer=node__pb2.ControlPlaneCommand.SerializeToString,
            ),
            'RotateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RotateToken,
                    request_deserializer=node__pb2.TokenRotationRequest.FromString,
                    response_serializer=node__pb2.TokenRotationResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'luminousmesh.NodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('luminousmesh.NodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeService(object):
    """Node lifecycle and authentication service
    """

    @staticmethod
    def RegisterNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/luminousmesh.NodeService/RegisterNode',
            node__pb2.RegisterNodeRequest.SerializeToString,
            node__pb2.RegisterNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Authenticate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/luminousmesh.NodeService/Authenticate',
            node__pb2.AuthenticationRequest.SerializeToString,
            node__pb2.AuthenticationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamConnection(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/luminousmesh.NodeService/StreamConnection',
            node__pb2.NodeStatusUpdate.SerializeToString,
            node__pb2.ControlPlaneCommand.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RotateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/luminousmesh.NodeService/RotateToken',
            node__pb2.TokenRotationRequest.SerializeToString,
            node__pb2.TokenRotationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
