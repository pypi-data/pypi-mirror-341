# coding: utf-8

"""
    Neops Workflow Engine

    Neops workflow engine API documentation

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from neops_workflow_engine_client.models.retry_configuration import RetryConfiguration
from typing import Optional, Set
from typing_extensions import Self

class ParametrizedFunctionBlock(BaseModel):
    """
    ParametrizedFunctionBlock
    """ # noqa: E501
    id: Optional[StrictStr] = None
    name: StrictStr
    retry_config: Optional[RetryConfiguration] = Field(default=None, alias="retryConfig")
    condition: Optional[Dict[str, Any]] = None
    continue_on_error: Optional[StrictBool] = Field(default=None, alias="continueOnError")
    delay: Optional[Union[StrictFloat, StrictInt]] = None
    parameters: Dict[str, Any]
    type: StrictStr
    function_block_id: StrictStr = Field(alias="functionBlockId")
    run_on: Optional[StrictStr] = Field(default=None, alias="runOn")
    repeat_config: Optional[Dict[str, Any]] = Field(default=None, alias="repeatConfig")
    __properties: ClassVar[List[str]] = ["id", "name", "retryConfig", "condition", "continueOnError", "delay", "parameters", "type", "functionBlockId", "runOn", "repeatConfig"]

    @field_validator('run_on')
    def run_on_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['global', 'device', 'client', 'interface', 'group']):
            raise ValueError("must be one of enum values ('global', 'device', 'client', 'interface', 'group')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParametrizedFunctionBlock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of retry_config
        if self.retry_config:
            _dict['retryConfig'] = self.retry_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParametrizedFunctionBlock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "retryConfig": RetryConfiguration.from_dict(obj["retryConfig"]) if obj.get("retryConfig") is not None else None,
            "condition": obj.get("condition"),
            "continueOnError": obj.get("continueOnError"),
            "delay": obj.get("delay"),
            "parameters": obj.get("parameters"),
            "type": obj.get("type"),
            "functionBlockId": obj.get("functionBlockId"),
            "runOn": obj.get("runOn"),
            "repeatConfig": obj.get("repeatConfig")
        })
        return _obj


