name: Unit Tests

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # allow manual triggering

defaults:
  run:
    shell: bash -l {0}

jobs:
  lint:
    name: Code style
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install package
        run: |
          set -vxeuo pipefail
          python -m pip install --upgrade pip

      - name: Run ruff
        uses: davidslusser/actions_python_ruff@v1.0.2
        with:
          python_version: "3.12"

  tests:
    name: Python ${{ matrix.python-version }}
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.10" # not 3.10 which truncates to 3.1
          - "3.11"
          - "3.12"
          - "3.13"
      max-parallel: 5

    steps:
      - uses: actions/checkout@v4

      - name: Create Python ${{ matrix.python-version }} environment
        uses: mamba-org/setup-micromamba@v2
        with:
          cache-environment: true
          cache-environment-key: env-key-${{ matrix.python-version }}
          condarc: |
            channels:
              - conda-forge
              - nodefaults
            channel-priority: flexible
          environment-name: anaconda-test-env-py-${{ matrix.python-version }}
          create-args: >-
            bson
            hkl
            pyepics
            pytest
            python=${{ matrix.python-version }}
            pyyaml
            ruamel.yaml
            setuptools-scm
            tiled
            yaml

      - name: Start EPICS softIoc
        run: |
          caRepeater &
          softIoc \
            -S \
            -m "P=hklpy2:" \
            -d ./hklpy2/tests/testing.db \
            -x "hklpy2" \
            ./hklpy2/tests/st.cmd &
          sleep 15

      - name: Install source code and all requirements (includes pre-releases)
        run: |
          set -vxeuo pipefail
          pip install --pre tiled
          pip install --pre -e .[all]

      - name: Diagnostic
        run: |
          micromamba info
          micromamba list
          conda config --show-sources
          conda config --show
          micromamba env list
          printenv | sort

      - name: Check on the EPICS IOC
        run: |
          echo "info hklpy2:wavelength = $(cainfo hklpy2:wavelength)"
          echo $(caget hklpy2:BaseVersion)
          echo $(caget -t hklpy2:energy.{NAME,VAL,EGU,DESC})
          echo $(caget -t hklpy2:wavelength.{NAME,VAL,EGU,DESC})

      - name: Run tests with pytest & coverage
        shell: bash -l {0}
        run: |
          coverage run --concurrency=thread --parallel-mode -m pytest -vvv .
          coverage combine
          coverage report --precision 3 -m

      - name: Force Install coveralls by pip
        shell: bash -l {0}
        run: |
          set -vxeuo pipefail
          python -m pip install --force-reinstall coveralls

      - name: Upload to coveralls
        shell: bash -l {0}
        run: |
          set -vxeuo pipefail
          micromamba list cover
          micromamba list git
          which coveralls
          coveralls debug
          coveralls --service=github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_FLAG_NAME: ${{ matrix.test-name }}
          COVERALLS_PARALLEL: true

  coveralls:
    name: Report unit test coverage to coveralls
    needs: tests
    runs-on: ubuntu-latest
    container: python:3-slim

    steps:
      - name: Gather coverage and report to Coveralls
        run: |
          set -vxeuo pipefail
          apt-get -y update && apt-get install -y git
          which git
          python3 -m pip install \
            --no-cache-dir \
            --root-user-action ignore \
            --upgrade pip coveralls
          #
          echo "Finally!"
          # coveralls debug
          coveralls --service=github --finish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
