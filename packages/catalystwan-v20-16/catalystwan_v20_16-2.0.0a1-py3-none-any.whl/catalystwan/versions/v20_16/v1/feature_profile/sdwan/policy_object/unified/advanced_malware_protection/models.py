# Copyright 2024 Cisco Systems, Inc. and its affiliates
from dataclasses import dataclass
from dataclasses import field as _field
from typing import Any, List, Literal, Optional

GlobalOptionTypeDef = Literal["global"]

ServerDef = Literal["apjc", "eur", "nam"]

AlertDef = Literal["critical", "info", "warning"]

FileAnalysisCloudServerDef = Literal["eur", "nam"]


@dataclass
class CreateSdwanSecurityFeaturePostResponse:
    parcel_id: Optional[str] = _field(default=None, metadata={"alias": "parcelId"})


@dataclass
class OneOfMatchAllVpnOptionsDef:
    option_type: GlobalOptionTypeDef = _field(
        metadata={"alias": "optionType"}
    )  # pytype: disable=annotation-type-mismatch
    value: Any


@dataclass
class OneOfFileReputationCloudServerOptionsDef:
    option_type: GlobalOptionTypeDef = _field(
        metadata={"alias": "optionType"}
    )  # pytype: disable=annotation-type-mismatch
    value: ServerDef  # pytype: disable=annotation-type-mismatch


@dataclass
class OneOfFileReputationEstServerOptionsDef:
    option_type: GlobalOptionTypeDef = _field(
        metadata={"alias": "optionType"}
    )  # pytype: disable=annotation-type-mismatch
    value: ServerDef  # pytype: disable=annotation-type-mismatch


@dataclass
class OneOfFileReputationAlertOptionsDef:
    option_type: GlobalOptionTypeDef = _field(
        metadata={"alias": "optionType"}
    )  # pytype: disable=annotation-type-mismatch
    value: AlertDef  # pytype: disable=annotation-type-mismatch


@dataclass
class OneOfFileAnalysisEnabledOptionsDef:
    option_type: GlobalOptionTypeDef = _field(
        metadata={"alias": "optionType"}
    )  # pytype: disable=annotation-type-mismatch
    value: bool


@dataclass
class OneOfFileAnalysisCloudServerOptionsDef:
    option_type: GlobalOptionTypeDef = _field(
        metadata={"alias": "optionType"}
    )  # pytype: disable=annotation-type-mismatch
    value: FileAnalysisCloudServerDef  # pytype: disable=annotation-type-mismatch


@dataclass
class OneOfFileAnalysisFileTypesOptionsDef:
    option_type: GlobalOptionTypeDef = _field(
        metadata={"alias": "optionType"}
    )  # pytype: disable=annotation-type-mismatch
    value: List[str]


@dataclass
class OneOfFileAnalysisAlertOptionsDef:
    option_type: GlobalOptionTypeDef = _field(
        metadata={"alias": "optionType"}
    )  # pytype: disable=annotation-type-mismatch
    value: AlertDef  # pytype: disable=annotation-type-mismatch


@dataclass
class Data:
    file_analysis_enabled: OneOfFileAnalysisEnabledOptionsDef = _field(
        metadata={"alias": "fileAnalysisEnabled"}
    )
    file_reputation_alert: OneOfFileReputationAlertOptionsDef = _field(
        metadata={"alias": "fileReputationAlert"}
    )
    file_reputation_cloud_server: OneOfFileReputationCloudServerOptionsDef = _field(
        metadata={"alias": "fileReputationCloudServer"}
    )
    file_reputation_est_server: OneOfFileReputationEstServerOptionsDef = _field(
        metadata={"alias": "fileReputationEstServer"}
    )
    match_all_vpn: OneOfMatchAllVpnOptionsDef = _field(metadata={"alias": "matchAllVpn"})
    file_analysis_alert: Optional[OneOfFileAnalysisAlertOptionsDef] = _field(
        default=None, metadata={"alias": "fileAnalysisAlert"}
    )
    file_analysis_cloud_server: Optional[OneOfFileAnalysisCloudServerOptionsDef] = _field(
        default=None, metadata={"alias": "fileAnalysisCloudServer"}
    )
    file_analysis_file_types: Optional[OneOfFileAnalysisFileTypesOptionsDef] = _field(
        default=None, metadata={"alias": "fileAnalysisFileTypes"}
    )


@dataclass
class CreateSdwanSecurityFeaturePostRequest:
    """
    advanced-malware-protection profile parcel schema for POST request
    """

    data: Data
    description: str
    name: str
    metadata: Optional[Any] = _field(default=None)


@dataclass
class Payload:
    """
    advanced-malware-protection profile parcel schema for POST request
    """

    data: Data
    description: str
    name: str
    metadata: Optional[Any] = _field(default=None)


@dataclass
class GetSdwanSecurityFeatureGetResponse:
    created_by: Optional[str] = _field(default=None, metadata={"alias": "createdBy"})
    created_on: Optional[int] = _field(default=None, metadata={"alias": "createdOn"})
    last_updated_by: Optional[str] = _field(default=None, metadata={"alias": "lastUpdatedBy"})
    last_updated_on: Optional[int] = _field(default=None, metadata={"alias": "lastUpdatedOn"})
    parcel_id: Optional[str] = _field(default=None, metadata={"alias": "parcelId"})
    parcel_type: Optional[str] = _field(default=None, metadata={"alias": "parcelType"})
    # advanced-malware-protection profile parcel schema for POST request
    payload: Optional[Payload] = _field(default=None)
