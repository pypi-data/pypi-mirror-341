"""
Tests for vulnerability checking.
"""

import os
import unittest
import tempfile
from unittest.mock import patch, MagicMock

from ossv_scanner.vulnerability.nvd_client import NVDClient
from ossv_scanner.vulnerability.vulnerability import Vulnerability
from ossv_scanner.caching.cache import Cache


class TestNVDClient(unittest.TestCase):
    """Test cases for NVD client."""

    def setUp(self):
        """Set up test fixtures."""
        # Create temporary directory for cache
        self.temp_dir = tempfile.TemporaryDirectory()
        self.cache_dir = self.temp_dir.name
        
        # Create cache
        self.cache = Cache(self.cache_dir)
        
        # Create NVD client with mock API key
        self.nvd_client = NVDClient(
            api_key="test_api_key",
            cache=self.cache,
            rate_limit_sleep=0.01  # Short sleep for tests
        )
    
    def tearDown(self):
        """Tear down test fixtures."""
        # Clean up temporary directory
        self.temp_dir.cleanup()
    
    @patch("requests.get")
    def test_get_vulnerabilities(self, mock_get):
        """Test getting vulnerabilities for a package."""
        # Mock API response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "vulnerabilities": [
                {
                    "cve": {
                        "id": "CVE-2021-44228",
                        "descriptions": [
                            {
                                "lang": "en",
                                "value": "Log4j vulnerability"
                            }
                        ],
                        "metrics": {
                            "cvssMetricV31": [
                                {
                                    "cvssData": {
                                        "baseScore": 9.8,
                                        "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H"
                                    },
                                    "baseSeverity": "CRITICAL"
                                }
                            ]
                        },
                        "published": "2021-12-10T10:15:00.000",
                        "lastModified": "2021-12-20T15:30:00.000",
                        "references": [
                            {
                                "url": "https://nvd.nist.gov/vuln/detail/CVE-2021-44228"
                            }
                        ],
                        "weaknesses": [
                            {
                                "description": [
                                    {
                                        "lang": "en",
                                        "value": "CWE-20"
                                    }
                                ]
                            }
                        ],
                        "configurations": [
                            {
                                "nodes": [
                                    {
                                        "cpeMatch": [
                                            {
                                                "criteria": "cpe:2.3:a:apache:log4j:2.0:*:*:*:*:*:*:*"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                }
            ]
        }
        mock_get.return_value = mock_response
        
        # Get vulnerabilities
        vulnerabilities = self.nvd_client.get_vulnerabilities("log4j", "2.0")
        
        # Check that the vulnerabilities were retrieved correctly
        self.assertEqual(len(vulnerabilities), 1)
        self.assertEqual(vulnerabilities[0]["cve_id"], "CVE-2021-44228")
        self.assertEqual(vulnerabilities[0]["severity"], "CRITICAL")
        self.assertEqual(vulnerabilities[0]["cvss_score"], 9.8)
    
    def test_vulnerability_class(self):
        """Test the Vulnerability class."""
        # Create a vulnerability
        vuln = Vulnerability(
            cve_id="CVE-2021-44228",
            description="Log4j vulnerability",
            cvss_score=9.8,
            cvss_vector="CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
            severity="CRITICAL",
            published_date="2021-12-10T10:15:00.000",
            last_modified_date="2021-12-20T15:30:00.000",
            references=["https://nvd.nist.gov/vuln/detail/CVE-2021-44228"],
            cwe_ids=["CWE-20"],
        )
        
        # Check vulnerability properties
        self.assertEqual(vuln.cve_id, "CVE-2021-44228")
        self.assertEqual(vuln.severity, "CRITICAL")
        self.assertEqual(vuln.cvss_score, 9.8)
        
        # Test to_dict method
        vuln_dict = vuln.to_dict()
        self.assertEqual(vuln_dict["cve_id"], "CVE-2021-44228")
        self.assertEqual(vuln_dict["severity"], "CRITICAL")
        
        # Test from_dict method
        vuln2 = Vulnerability.from_dict(vuln_dict)
        self.assertEqual(vuln2.cve_id, vuln.cve_id)
        self.assertEqual(vuln2.severity, vuln.severity)


if __name__ == "__main__":
    unittest.main()
