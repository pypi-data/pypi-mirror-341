"""
Vulnerability class for representing a security vulnerability.
"""

from typing import Dict, Any, Optional, List
from datetime import datetime


class Vulnerability:
    """Class representing a security vulnerability."""

    def __init__(
        self,
        cve_id: str,
        description: str,
        cvss_score: Optional[float] = None,
        cvss_vector: Optional[str] = None,
        severity: Optional[str] = None,
        published_date: Optional[str] = None,
        last_modified_date: Optional[str] = None,
        references: Optional[List[str]] = None,
        cwe_ids: Optional[List[str]] = None,
        affected_versions: Optional[List[str]] = None,
        fixed_version: Optional[str] = None,
    ):
        """
        Initialize a Vulnerability.

        Args:
            cve_id: CVE identifier (e.g., CVE-2021-44228).
            description: Description of the vulnerability.
            cvss_score: CVSS score (0.0-10.0).
            cvss_vector: CVSS vector string.
            severity: Severity rating (e.g., CRITICAL, HIGH, MEDIUM, LOW).
            published_date: Date when the vulnerability was published.
            last_modified_date: Date when the vulnerability was last modified.
            references: List of reference URLs.
            cwe_ids: List of CWE identifiers.
            affected_versions: List of affected versions.
            fixed_version: Version where the vulnerability is fixed.
        """
        self.cve_id = cve_id
        self.description = description
        self.cvss_score = cvss_score
        self.cvss_vector = cvss_vector
        self.severity = severity or self._calculate_severity(cvss_score)
        self.published_date = published_date
        self.last_modified_date = last_modified_date
        self.references = references or []
        self.cwe_ids = cwe_ids or []
        self.affected_versions = affected_versions or []
        self.fixed_version = fixed_version
    
    def _calculate_severity(self, cvss_score: Optional[float]) -> str:
        """
        Calculate severity based on CVSS score.

        Args:
            cvss_score: CVSS score.

        Returns:
            Severity string.
        """
        if cvss_score is None:
            return "UNKNOWN"
        
        if cvss_score >= 9.0:
            return "CRITICAL"
        elif cvss_score >= 7.0:
            return "HIGH"
        elif cvss_score >= 4.0:
            return "MEDIUM"
        elif cvss_score >= 0.1:
            return "LOW"
        else:
            return "NONE"
    
    def to_dict(self) -> Dict[str, Any]:
        """
        Convert the vulnerability to a dictionary.

        Returns:
            Dictionary representation of the vulnerability.
        """
        return {
            "cve_id": self.cve_id,
            "description": self.description,
            "cvss_score": self.cvss_score,
            "cvss_vector": self.cvss_vector,
            "severity": self.severity,
            "published_date": self.published_date,
            "last_modified_date": self.last_modified_date,
            "references": self.references,
            "cwe_ids": self.cwe_ids,
            "affected_versions": self.affected_versions,
            "fixed_version": self.fixed_version,
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Vulnerability":
        """
        Create a Vulnerability from a dictionary.

        Args:
            data: Dictionary containing vulnerability data.

        Returns:
            A new Vulnerability instance.
        """
        return cls(
            cve_id=data["cve_id"],
            description=data["description"],
            cvss_score=data.get("cvss_score"),
            cvss_vector=data.get("cvss_vector"),
            severity=data.get("severity"),
            published_date=data.get("published_date"),
            last_modified_date=data.get("last_modified_date"),
            references=data.get("references"),
            cwe_ids=data.get("cwe_ids"),
            affected_versions=data.get("affected_versions"),
            fixed_version=data.get("fixed_version"),
        )
    
    @classmethod
    def from_nvd(cls, nvd_data: Dict[str, Any]) -> "Vulnerability":
        """
        Create a Vulnerability from NVD API data.

        Args:
            nvd_data: NVD API response data for a vulnerability.

        Returns:
            A new Vulnerability instance.
        """
        cve_id = nvd_data.get("id", "")
        
        # Extract description
        description = ""
        if "descriptions" in nvd_data:
            for desc in nvd_data["descriptions"]:
                if desc.get("lang") == "en":
                    description = desc.get("value", "")
                    break
        
        # Extract CVSS data
        cvss_score = None
        cvss_vector = None
        severity = None
        
        metrics = nvd_data.get("metrics", {})
        
        # Try CVSS 3.1 first, then 3.0, then 2.0
        for cvss_version in ["cvssMetricV31", "cvssMetricV30", "cvssMetricV2"]:
            if cvss_version in metrics:
                cvss_data = metrics[cvss_version][0]
                cvss_score = cvss_data.get("cvssData", {}).get("baseScore")
                cvss_vector = cvss_data.get("cvssData", {}).get("vectorString")
                severity = cvss_data.get("baseSeverity")
                break
        
        # Extract dates
        published_date = nvd_data.get("published")
        last_modified_date = nvd_data.get("lastModified")
        
        # Extract references
        references = []
        if "references" in nvd_data:
            references = [ref.get("url") for ref in nvd_data["references"] if "url" in ref]
        
        # Extract CWEs
        cwe_ids = []
        if "weaknesses" in nvd_data:
            for weakness in nvd_data["weaknesses"]:
                for description in weakness.get("description", []):
                    if description.get("value", "").startswith("CWE-"):
                        cwe_ids.append(description.get("value"))
        
        # Create the vulnerability
        return cls(
            cve_id=cve_id,
            description=description,
            cvss_score=cvss_score,
            cvss_vector=cvss_vector,
            severity=severity,
            published_date=published_date,
            last_modified_date=last_modified_date,
            references=references,
            cwe_ids=cwe_ids
        )
    
    def __str__(self) -> str:
        """
        Get string representation of the vulnerability.

        Returns:
            String representation.
        """
        return f"{self.cve_id} ({self.severity}): {self.description[:100]}..."
