"""Tests for project storage operations."""

import pytest
from pm.models import Project
from pm.storage import init_db
from pm.storage.project import create_project, get_project, get_project_by_slug, list_projects, delete_project, ProjectNotEmptyError
# Need to create tasks for deletion test
from pm.storage.task import create_task
# Need to create notes for deletion test
from pm.storage.note import create_note
from pm.models import Task, Note  # Need models for task/note creation
import uuid  # For generating IDs


@pytest.fixture
def db_connection(tmp_path):
    """Fixture providing a clean database connection for each test."""
    db_path = tmp_path / "test.db"
    conn = init_db(str(db_path))  # Ensure db_path is string
    yield conn
    conn.close()


def test_project_creation_storage(db_connection):
    """Test creating and retrieving a project via storage functions."""
    # Note: Slug is now optional in model, generated by create_project
    project_data = Project(
        id="test-project-storage",
        name="Test Project Storage",
        description="A test project via storage"
    )
    created_project = create_project(db_connection, project_data)
    assert created_project.id == "test-project-storage"
    assert created_project.name == "Test Project Storage"
    assert created_project.slug == "test-project-storage"  # Verify generated slug

    retrieved_project = get_project(db_connection, "test-project-storage")
    assert retrieved_project.id == "test-project-storage"
    assert retrieved_project.name == "Test Project Storage"
    assert retrieved_project.status.value == "ACTIVE"  # Check default status
    assert retrieved_project.slug == "test-project-storage"  # Verify slug on retrieval


def test_project_slug_storage(db_connection):
    """Test project slug generation, uniqueness, and retrieval via storage."""
    # Create first project
    proj1_data = Project(id="proj-1", name="Slug Test Project")
    proj1 = create_project(db_connection, proj1_data)
    expected_slug1 = "slug-test-project"
    assert proj1.slug == expected_slug1

    # Retrieve by ID and check slug
    retrieved1_by_id = get_project(db_connection, "proj-1")
    assert retrieved1_by_id.slug == expected_slug1

    # Retrieve by slug
    retrieved1_by_slug = get_project_by_slug(db_connection, expected_slug1)
    assert retrieved1_by_slug.id == "proj-1"
    assert retrieved1_by_slug.slug == expected_slug1

    # Create second project with the same name (collision)
    proj2_data = Project(id="proj-2", name="Slug Test Project")
    proj2 = create_project(db_connection, proj2_data)
    expected_slug2 = "slug-test-project-1"  # Expect collision handling
    assert proj2.slug == expected_slug2

    # Retrieve second project by slug
    retrieved2_by_slug = get_project_by_slug(db_connection, expected_slug2)
    assert retrieved2_by_slug.id == "proj-2"
    assert retrieved2_by_slug.slug == expected_slug2

    # Test listing includes slugs
    projects = list_projects(db_connection)
    project_map = {p.id: p for p in projects}
    assert project_map["proj-1"].slug == expected_slug1
    assert project_map["proj-2"].slug == expected_slug2

    # Test retrieval by non-existent slug
    assert get_project_by_slug(db_connection, "non-existent-slug") is None


def test_project_deletion_cascades(db_connection):
    """Test that deleting a project with force=True deletes associated tasks and notes."""
    # 1. Create Project
    project_id = str(uuid.uuid4())
    project_data = Project(id=project_id, name="Project To Delete")
    create_project(db_connection, project_data)

    # 2. Create Task
    task_id = str(uuid.uuid4())
    task_data = Task(id=task_id, project_id=project_id, name="Task To Delete")
    create_task(db_connection, task_data)

    # 3. Create Project Note
    note_id = str(uuid.uuid4())
    note_data = Note(id=note_id, entity_type='project',
                     entity_id=project_id, content="Project note")
    create_note(db_connection, note_data)

    # Verify initial state
    assert get_project(db_connection, project_id) is not None
    assert db_connection.execute(
        "SELECT COUNT(*) FROM tasks WHERE project_id = ?", (project_id,)).fetchone()[0] == 1
    assert db_connection.execute(
        "SELECT COUNT(*) FROM notes WHERE entity_type = 'project' AND entity_id = ?", (project_id,)).fetchone()[0] == 1

    # 4. Delete Project with force=True
    deleted = delete_project(db_connection, project_id, force=True)
    assert deleted is True

    # 5. Verify deletion
    assert get_project(db_connection, project_id) is None
    # Check tasks table directly
    assert db_connection.execute(
        "SELECT COUNT(*) FROM tasks WHERE project_id = ?", (project_id,)).fetchone()[0] == 0
    # Check notes table directly
    assert db_connection.execute(
        "SELECT COUNT(*) FROM notes WHERE entity_type = 'project' AND entity_id = ?", (project_id,)).fetchone()[0] == 0


def test_project_deletion_without_force_fails_if_not_empty(db_connection):
    """Test that deleting a project without force fails if it has tasks."""
    # 1. Create Project
    project_id = str(uuid.uuid4())
    project_data = Project(id=project_id, name="Project With Task")
    create_project(db_connection, project_data)

    # 2. Create Task
    task_id = str(uuid.uuid4())
    task_data = Task(id=task_id, project_id=project_id,
                     name="Task Blocking Deletion")
    create_task(db_connection, task_data)

    # 3. Attempt delete without force
    with pytest.raises(ProjectNotEmptyError):
        delete_project(db_connection, project_id, force=False)

    # 4. Verify project still exists
    assert get_project(db_connection, project_id) is not None


def test_project_deletion_without_force_succeeds_if_empty(db_connection):
    """Test that deleting an empty project without force succeeds."""
    # 1. Create Project
    project_id = str(uuid.uuid4())
    project_data = Project(id=project_id, name="Empty Project")
    create_project(db_connection, project_data)

    # 2. Attempt delete without force
    deleted = delete_project(db_connection, project_id, force=False)
    assert deleted is True

    # 3. Verify project is deleted
    assert get_project(db_connection, project_id) is None


def test_list_projects_includes_note_count(db_connection):
    """Test that list_projects correctly includes the note_count."""
    # 1. Create project 1 (no notes)
    proj1_id = str(uuid.uuid4())
    proj1_data = Project(id=proj1_id, name="Project With No Notes")
    create_project(db_connection, proj1_data)

    # 2. Create project 2 (with one note)
    proj2_id = str(uuid.uuid4())
    proj2_data = Project(id=proj2_id, name="Project With One Note")
    create_project(db_connection, proj2_data)
    note_data = Note(id=str(uuid.uuid4()), entity_type='project',
                     entity_id=proj2_id, content="A note for project 2")
    create_note(db_connection, note_data)

    # 3. List projects
    projects = list_projects(db_connection)

    # 4. Verify note counts
    project_map = {p.id: p for p in projects}
    assert proj1_id in project_map
    assert project_map[proj1_id].note_count == 0, f"Expected 0 notes for {proj1_id}, got {project_map[proj1_id].note_count}"

    assert proj2_id in project_map
    assert project_map[proj2_id].note_count == 1, f"Expected 1 note for {proj2_id}, got {project_map[proj2_id].note_count}"
