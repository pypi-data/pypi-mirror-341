"use strict";(self.webpackChunkpyquibbler_labextension=self.webpackChunkpyquibbler_labextension||[]).push([[667],{667:(e,o,t)=>{t.r(o),t.d(o,{default:()=>p});var n=t(824),a=t(215),r=t.n(a),s=t(760),i=t.n(s);const l=e=>{r().fire({icon:"error",title:"Oops...",text:e})},c=e=>{const o=e.shell.widgets("main");let t=o.next();for(;t;){if(t.sessionContext&&"notebook"===t.sessionContext.type&&t.isVisible)return t;t=o.next()}return null};var u=t(684),d=t(422);class b{constructor(e,o){this.label=e,this.callback=o,this.button=new d.ToolbarButton}createNew(e){const o=new d.ToolbarButton({label:this.label,onClick:this.callback});return e.toolbar.insertItem(10,this.label,o),o.enabled=!1,this.button=o,o}}var g=t(231);let h=!0;const m=()=>h,p={id:"quibbler:plugin",autoStart:!0,requires:[n.INotebookTracker,u.IDocumentManager],activate:(e,o,t)=>{console.log("Starting quibbler plugin...");const{commands:n}=e,a=new Map,s=new b("Undo",(()=>v("undo",{}))),u=new b("Redo",(()=>v("redo",{})));e.docRegistry.addWidgetExtension("Notebook",u),e.docRegistry.addWidgetExtension("Notebook",s);const d=(e,o)=>{var n;e.content.model.metadata.set("quibs_archive",o),null===(n=t.contextForWidget(e))||void 0===n||n.save()},p=e=>{var o,t;const n=null===(o=e.sessionContext.session)||void 0===o?void 0:o.kernel;if(Window.pyquibblerKernel=null===(t=e.sessionContext.session)||void 0===t?void 0:t.kernel,null==n)throw new Error("No kernel exists for panel");return a.has(n.id)||a.set(n.id,((e,o,t,n,a)=>{let s=null,l=null;o.statusChanged.connect(((e,o)=>{"terminating"!==o&&"restarting"!==o&&"autorestarting"!==o||c().request("cleanup",{})}));const c=()=>{if(null==l)throw new Error("Jupyter is not connected with pyquibbler.  Run `initialize_quibbler(jupyterlab_extension=True)` to connect.");return l},u=()=>{if(null===s)throw new Error("No comm available yet!");l=(e=>{const o=new Map,t=new Map,n=e=>{o.delete(e),t.delete(e)};return{request:(n,a)=>{console.log("Sending action",n);const r=(0,g.v4)();return new Promise(((s,i)=>{o.set(r,s),t.set(r,i);const l=o.size>1?100:0;setTimeout((()=>{try{e.send({action:n,parameters:a,requestId:r})}catch(e){throw console.log("Failed with error",e),new Error(`Cannot send ${n} - is pyquibbler running? (You need to run \`initialize_quibbler\`)`)}}),l)}))},handleSuccessResponse:(e,t)=>{console.log("Resolving",e,o),o.has(e)&&o.get(e)(t),n(e)},handleErrorResponse:(e,a)=>{o.has(e)&&t.get(e)(a),n(e)},cancelPendingRequests:()=>{o.clear(),t.clear()}}})(s),s.onMsg=o=>{const s=o.content.data;console.log("Received message",s);const l=s.type,u=s.data;switch(l){case"dialog":d=u,r().fire(d);break;case"requestDialog":(async(e,o,t,n)=>{let a="";Object.keys(t).forEach((e=>{a+=e+": "+t[e]+"\n"}));const{value:s}=await r().fire({title:e,input:"text",inputLabel:`${o}\n${a}`,inputValue:t,showCancelButton:!1,icon:"warning",inputPlaceholder:"Choose a number (e.g. 1) from the options",allowOutsideClick:!1,inputValidator:e=>{if(!(e in t))return"You must choose from the given options"}});await i().post(`http://localhost:${n}/answer`,{option:s})})(u.title,u.message,u.options,u.port);break;case"quibsArchiveUpdate":a(e,u);break;case"setUndoRedoButtons":t.button.enabled="True"==u.undoEnabled,n.button.enabled="True"==u.redoEnabled;break;case"getShouldSaveLoadWithinNotebook":c().request("setShouldSaveLoadWithinNotebook",{should_save_load_within_notebook:m()});break;case"response":c().handleSuccessResponse(s.requestId,u);break;case"error":c().handleErrorResponse(s.requestId,u)}var d;return new Promise((e=>e()))}};return(async()=>{const e=(await o.requestCommInfo({target_name:"pyquibbler"})).content.comms,t=Object.keys(e).find((o=>"pyquibbler"===e[o].target_name));console.log("Registering comm target for pyquibbler"),o.registerCommTarget("pyquibbler",(e=>{s=e,console.log("Callback: registering comm"),u()})),t&&(console.log("Found existing comm id, recreating and reregistering"),s=o.createComm("pyquibbler",t),u())})(),{runAction:(e,o)=>c().request(e,o)}})(e,n,s,u,d)),a.get(n.id)},v=async(o,t,n)=>{let a;console.log("Running",o),n=!1!==n;try{a=p(c(e))}catch(e){if(n)return void l(e);throw e}try{await a.runAction(o,t)}catch(e){if(n)return void l(e);throw e}};[{command:"save",label:"Save Quibs",action:"save"},{command:"load",label:"Load Quibs",action:"load"}].map((({command:o,action:a,label:r})=>{n.addCommand(`quibbler:${o}`,{label:r,execute:o=>{var n;const r=c(e);null!=r?null===(n=t.contextForWidget(r))||void 0===n||n.save().then((()=>{v(a,{})})):l("There is no open notebook!")}})})),n.addCommand("quibbler:save-in-notebook",{label:"Save/Load inside Notebook",execute:e=>{var o;o=!m(),h=o;for(let e of a.values())e.runAction("setShouldSaveLoadWithinNotebook",{should_save_load_within_notebook:m()})},isToggled:()=>m()}),n.addCommand("quibbler:clear-data",{label:"Clear Quib Data in Notebook",execute:o=>{var n;const a=c(e);null!=a?(d(a,null),null===(n=t.contextForWidget(a))||void 0===n||n.save().then((()=>{v("clearData",{},!1).catch((e=>{console.log(`Not sending clear data to server, because of error ${e}`)}))}))):l("There is no open notebook!")}}),o.widgetAdded.connect(((e,o)=>{o.sessionContext.ready.then((()=>{console.log("Session context ready- preparing session..."),p(o)})),o.sessionContext.sessionChanged.connect(((e,o)=>{e.kernelChanged.connect(((e,o)=>{null===o.newValue&&a.delete(o.oldValue.id)}))}))}))}}}}]);