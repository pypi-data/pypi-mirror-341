import enum
from _typeshed import Incomplete

__all__ = ['n_asythread_status', 'n_asyncThreadPool']

class n_asythread_status(enum.Enum):
    unstart: int
    running: int
    finish: int

class n_asyerror(Exception): ...

class n_asyncThreadPool:
    max_workers: Incomplete
    def __init__(self, max_workers: int = None, group: int = 0, time_interval: float = 0.0) -> None: ...
    def setGroupExecInterval(self, group: int, time_interval: float): ...
    @property
    def getStatus(self) -> n_asythread_status: ...
    def put(self, func, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_val: BaseException | None, exc_tb: types.TracebackType | None): ...
    def start(self) -> list: ...
    def get_results(self): ...
    @classmethod
    def single_submit(cls, func, *args, **kwargs) -> any: ...
    def clear(self) -> None: ...
    def map(self, func, *args) -> list: ...
