import pandas as pd
import pandera as pa
from pandera.typing import DataFrame

from electricore.core.p√©rim√®tre.mod√®les import HistoriqueP√©rim√®tre, SituationP√©rim√®tre, ModificationContractuelleImpactante
from electricore.core.relev√©s.mod√®les import Relev√©Index

@pa.check_types
def extraire_situation(date: pd.Timestamp, historique: DataFrame[HistoriqueP√©rim√®tre]) -> DataFrame[SituationP√©rim√®tre]:
    """
    Extrait la situation du p√©rim√®tre √† une date donn√©e.
    
    Args:
        date (pd.Timestamp): La date de r√©f√©rence.
        historique (pd.DataFrame): L'historique des √©v√©nements contractuels.

    Returns:
        pd.DataFrame: Une vue du p√©rim√®tre √† `date`, conforme √† `SituationP√©rim√®tre`.
    """
    return (
        historique[historique["Date_Evenement"] <= date]
        .sort_values(by="Date_Evenement", ascending=False)
        .drop_duplicates(subset=["Ref_Situation_Contractuelle"], keep="first")
    )
@pa.check_types
def extraire_historique_√†_date(
    historique: DataFrame[HistoriqueP√©rim√®tre],
    fin: pd.Timestamp
) -> DataFrame[HistoriqueP√©rim√®tre]:
    """
    Extrait uniquement les variations (changements contractuels) qui ont eu lieu dans une p√©riode donn√©e.

    Args:
        deb (pd.Timestamp): D√©but de la p√©riode.
        fin (pd.Timestamp): Fin de la p√©riode.
        historique (pd.DataFrame): Historique des √©v√©nements contractuels.

    Returns:
        pd.DataFrame: Un sous-ensemble de l'historique contenant uniquement les variations dans la p√©riode.
    """
    return historique[
        (historique["Date_Evenement"] <= fin)
    ].sort_values(by="Date_Evenement", ascending=True)  # Trie par ordre chronologique

@pa.check_types
def extraire_p√©riode(
    deb: pd.Timestamp, fin: pd.Timestamp, 
    historique: DataFrame[HistoriqueP√©rim√®tre]
) -> DataFrame[HistoriqueP√©rim√®tre]:
    """
    Extrait uniquement les variations (changements contractuels) qui ont eu lieu dans une p√©riode donn√©e.

    Args:
        deb (pd.Timestamp): D√©but de la p√©riode.
        fin (pd.Timestamp): Fin de la p√©riode.
        historique (pd.DataFrame): Historique des √©v√©nements contractuels.

    Returns:
        pd.DataFrame: Un sous-ensemble de l'historique contenant uniquement les variations dans la p√©riode.
    """
    return historique[
        (historique["Date_Evenement"] >= deb) & (historique["Date_Evenement"] <= fin)
    ].sort_values(by="Date_Evenement", ascending=True)  # Trie par ordre chronologique

@pa.check_types
def extraite_relev√©s_entr√©es(
    historique: DataFrame[HistoriqueP√©rim√®tre]
) -> DataFrame[Relev√©Index]:
        _√©v√©nements = ['MES', 'PMES', 'CFNE']
        _colonnes_meta_releve = ['Ref_Situation_Contractuelle', 'pdl', 'Unit√©', 'Pr√©cision', 'Source']
        _colonnes_relev√© = ['Id_Calendrier_Distributeur', 'Date_Releve', 'Nature_Index', 'HP', 'HC', 'HCH', 'HPH', 'HPB', 'HCB', 'BASE']
        _colonnes_relev√©_apr√®s = ['Apr√®s_'+c for c in _colonnes_relev√©]
        return Relev√©Index.validate(
            historique[historique['Evenement_Declencheur'].isin(_√©v√©nements)][_colonnes_meta_releve + _colonnes_relev√©_apr√®s]
            .rename(columns={k: v for k,v in zip(_colonnes_relev√©_apr√®s, _colonnes_relev√©)})
            .dropna(subset=['Date_Releve'])
            )

@pa.check_types
def extraite_relev√©s_sorties(
    historique: DataFrame[HistoriqueP√©rim√®tre]
) -> DataFrame[Relev√©Index]:
        _√©v√©nements = ['RES', 'CFNS']
        _colonnes_meta_releve = ['Ref_Situation_Contractuelle', 'pdl', 'Unit√©', 'Pr√©cision', 'Source']
        _colonnes_relev√© = ['Id_Calendrier_Distributeur', 'Date_Releve', 'Nature_Index', 'HP', 'HC', 'HCH', 'HPH', 'HPB', 'HCB', 'BASE']
        _colonnes_relev√©_avant = ['Avant_'+c for c in _colonnes_relev√©]
        return Relev√©Index.validate(
            historique[historique['Evenement_Declencheur'].isin(_√©v√©nements)][_colonnes_meta_releve + _colonnes_relev√©_avant]
            .rename(columns={k: v for k,v in zip(_colonnes_relev√©_avant, _colonnes_relev√©)})
            .dropna(subset=['Date_Releve'])
            )

@pa.check_types
def extraire_modifications_impactantes(
    deb: pd.Timestamp,
    historique: DataFrame[HistoriqueP√©rim√®tre]
) -> DataFrame[ModificationContractuelleImpactante]:
    """
    D√©tecte les MCT dans une p√©riode donn√©e et renvoie les variations de Puissance_Souscrite
    et Formule_Tarifaire_Acheminement avant et apr√®s chaque MCT.

    Args:
        deb (pd.Timestamp): D√©but de la p√©riode.
        historique (pd.DataFrame): Historique des √©v√©nements contractuels.

    Returns:
        DataFrame[ModificationContractuelleImpactante]: DataFrame contenant les MCT avec les valeurs avant/apr√®s.
    """

    # üîç D√©caler les valeurs pour obtenir les donn√©es "avant" AVANT de filtrer
    historique = historique.sort_values(by=["Ref_Situation_Contractuelle", "Date_Evenement"])
    historique["Avant_Puissance_Souscrite"] = historique.groupby("Ref_Situation_Contractuelle")["Puissance_Souscrite"].shift(1)
    historique["Avant_Formule_Tarifaire_Acheminement"] = historique.groupby("Ref_Situation_Contractuelle")["Formule_Tarifaire_Acheminement"].shift(1)


    # üìå Filtrer uniquement les MCT dans la p√©riode donn√©e
    impacts = (
          historique[
            (historique["Date_Evenement"] >= deb) &
            (historique["Evenement_Declencheur"] == "MCT")]
          .copy()
          .rename(columns={'Puissance_Souscrite': 'Apr√®s_Puissance_Souscrite', 'Formule_Tarifaire_Acheminement':'Apr√®s_Formule_Tarifaire_Acheminement'})
          .drop(columns=['Segment_Clientele', 'Num_Depannage', 'Categorie', 'Etat_Contractuel', 'Type_Compteur', 'Date_Derniere_Modification_FTA', 'Type_Evenement', 'Ref_Demandeur', 'Id_Affaire'])
    )
    
    # TODO: Prendre en compte plus de cas
    impacts['Impacte_energies'] = (
        impacts["Avant_Id_Calendrier_Distributeur"].notna() & 
        impacts["Apr√®s_Id_Calendrier_Distributeur"].notna() & 
        (impacts["Avant_Id_Calendrier_Distributeur"] != impacts["Apr√®s_Id_Calendrier_Distributeur"])
    )

    # ‚ûï Ajout de la colonne de lisibilit√© du changement
    def generer_resum√©(row):
        modifications = []
        if row["Avant_Puissance_Souscrite"] != row["Apr√®s_Puissance_Souscrite"]:
            modifications.append(f"P: {row['Avant_Puissance_Souscrite']} ‚Üí {row['Apr√®s_Puissance_Souscrite']}")
        if row["Avant_Formule_Tarifaire_Acheminement"] != row["Apr√®s_Formule_Tarifaire_Acheminement"]:
            modifications.append(f"FTA: {row['Avant_Formule_Tarifaire_Acheminement']} ‚Üí {row['Apr√®s_Formule_Tarifaire_Acheminement']}")
        return ", ".join(modifications) if modifications else "Aucun changement"
    
    impacts["R√©sum√©_Modification"] = impacts.apply(generer_resum√©, axis=1)

    ordre_colonnes = ModificationContractuelleImpactante.to_schema().columns.keys()
    impacts = impacts[ordre_colonnes]
    
    return impacts