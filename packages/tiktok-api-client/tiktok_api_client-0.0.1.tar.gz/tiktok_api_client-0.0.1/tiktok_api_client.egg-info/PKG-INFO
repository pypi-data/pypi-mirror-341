Metadata-Version: 2.2
Name: tiktok_api_client
Version: 0.0.1
Summary: A Python project for TikTok content publishing
Home-page: https://github.com/mymi14s/tiktok_api_client
Author: Emmanuel Anthony
Author-email: Emmanuel Anthony <mymi14s@hotmail.com>
License: MIT
Project-URL: Homepage, https://github.com/mymi14s/tiktok_api_client
Keywords: tiktok,api,video
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Provides-Extra: dev
Requires-Dist: black; extra == "dev"
Requires-Dist: bumpver; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: pip-tools; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# TikTok Open API Client

[![License](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Python Version](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)

This Python library provides a convenient way to interact with the TikTok Open API for authorization and publishing video and photo content. It handles the OAuth 2.0 authorization flow with PKCE, and offers methods for posting videos (from file or URL) and photos.

## Table of Contents

* [Features](#features)
* [Installation](#installation)
* [Getting Started](#getting-started)
    * [Basic Usage](#basic-usage)
    * [Posting a Video from a URL](#posting-a-video-from-a-url)
    * [Posting a Photo](#posting-a-photo)
* [Class Overview](#class-overview)
    * [`TikTok(client_key, client_secret, redirect_uri, state="", scopes=None)`](#tiktokclient_key-client_secret-redirect_uri-state-scopesnone)
    * [Methods](#methods)
* [Available Scopes](#available-scopes)
* [Error Handling](#error-handling)
* [Contributing](#contributing)
* [License](#license)

## Features

* **OAuth 2.0 Authorization:** Implements the PKCE (Proof Key for Code Exchange) flow for secure authentication.
* **Token Management:** Handles exchanging authorization codes for access tokens, refreshing access tokens, and revoking access tokens.
* **Video Posting:** Supports uploading video files in chunks and posting videos from a URL.
* **Photo Posting:** Enables creating and publishing photo posts with various options.
* **Creator Information:** Allows fetching information about the authenticated TikTok creator.
* **Upload Status:** Provides a way to check the status of video uploads.
* **Error Handling:** Includes custom exceptions for timeout and HTTP errors.
* **Configurable Scopes:** Allows specifying the required TikTok API scopes.

## Installation

You can install the library using pip:

```bash
pip install tiktok-api-client
```


## Getting Started

To use this library, you'll need to obtain the following credentials from your TikTok developer portal:

- **Client Key**
- **Client Secret**
- **Redirect URI** (This URI must be registered in your TikTok developer portal)

## Basic Usage

Here's a basic example of how to initialize the TikTok client and get the authorization URL:

```python
from tiktok-api-client import TikTok

CLIENT_KEY = "YOUR_CLIENT_KEY"
CLIENT_SECRET = "YOUR_CLIENT_SECRET"
REDIRECT_URI = "YOUR_REDIRECT_URI"
STATE = "your_optional_state" # this could be a dict or string that can be used to track the authentication in your REDIRECT endpoint

tiktok_client = TikTok(client_key=CLIENT_KEY, client_secret=CLIENT_SECRET, redirect_uri=REDIRECT_URI, state=STATE, scopes = [])

authorization_url = tiktok_client.get_authorization_url()
print(f"Authorize URL: {authorization_url}")
```

After the user authorizes your application and is redirected back to your `REDIRECT_URI` with an authorization code, you can exchange it for an access token:

```python


authorization_code = "THE_CODE_FROM_THE_REDIRECT_URL"

try:
    token_data = tiktok_client.exchange_code_for_token(code=authorization_code)
    print("Access Token:", token_data.get("access_token"))
    print("Refresh Token:", token_data.get("refresh_token"))
except Exception as e:
    print(f"Error exchanging code for token: {e}")
```

## Posting a Video from a URL

```python
access_token = "YOUR_ACCESS_TOKEN"  # Obtained from the authorization flow

payload = {
    "source_info": {
        "source": "PULL_FROM_URL",
        "video_url": "YOUR_VIDEO_URL"
    },
    "post_info": {
        "title": "My Awesome Video",
        "privacy_level": "PUBLIC",
        # Optional parameters
        # "disable_duet": False,
        # "disable_comment": False,
        # "disable_stitch": False,
        # "video_cover_timestamp_ms": 1000
    }
}

try:
    response = tiktok_client.post_video_url(payload)
    print("Video Post Response:", response)
except Exception as e:
    print(f"Error posting video: {e}")
```

## Posting a Photo

```python
access_token = "YOUR_ACCESS_TOKEN"

try:
    response = tiktok_client.create_photo(
        post_mode="DIRECT_POST",
        title="My Photo Post",
        privacy_level="PUBLIC",
        photo_images=["URL_TO_IMAGE_1", "URL_TO_IMAGE_2"],
        photo_cover_index=1,
        description="Check out my photos!",
        disable_comment=False,
        auto_add_music=False,
        access_token=access_token
    )
    print("Photo Post Response:", response)
except Exception as e:
    print(f"Error creating photo post: {e}")
```

## Class Overview

### `TikTok(client_key, client_secret, redirect_uri, state="", scopes=None)`

Initializes the TikTok API client.

- `client_key (str)`: Your TikTok application's client key.
- `client_secret (str)`: Your TikTok application's client secret.
- `redirect_uri (str)`: The redirect URI registered in your TikTok developer portal.
- `state (str, optional)`: Optional state parameter to prevent CSRF. Defaults to "".
- `scopes (list, optional)`: List of TikTok API scopes to request. Defaults to module-level SCOPES.

### Methods

- `get_authorization_url() -> str`
- `exchange_code_for_token(code: str, timeout: int = 10) -> dict`
- `refresh_access_token(refresh_token: str = None) -> dict`
- `revoke_access_token(access_token: str = None) -> dict`
- `get_creator_info(access_token: str = None) -> dict`
- `post_video_file(payload: dict) -> dict`
- `post_video_url(payload: dict) -> dict`
- `upload_video_file(payload: dict) -> dict`
- `create_photo(...) -> dict`
- `check_upload_status(...) -> dict`

## Available Scopes

```python
SCOPES = [
    "user.info.basic",
    "video.list",
    "video.upload",
    "video.publish",
    "user.info.profile",
    "user.info.stats",
]
```

Pass a subset of these scopes to the `scopes` parameter when initializing the client.

## Error Handling

This library includes basic error handling. Expect the following:

- `TimeoutError` for request timeouts
- `Exception` for OAuth errors
- `HTTPError` (from utils.py) for HTTP issues

Always wrap operations in `try...except` blocks for reliability.

## Contributing

We welcome contributions! Please:

1. Fork the repository.
2. Create a new branch.
3. Commit your changes.
4. Push to your fork.
5. Submit a pull request.

Ensure you follow coding style and include tests.

## License

MIT License. See `LICENSE` file for details.
