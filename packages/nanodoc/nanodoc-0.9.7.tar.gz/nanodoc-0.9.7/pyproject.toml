[project]
name = "nanodoc"
version = "0.9.7"
description = "A minimalist document bundler designed for stitching hints, reminders and short docs."
authors = [{ name = "Arthur Debert", email = "arthur@debert.xyz" }]
readme = "README.txt"
requires-python = ">=3.9"
license = { file = "LICENSE" }
keywords = ["documentation", "bundler", "minimalist", "text", "prompts"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Topic :: Documentation",
  "Topic :: Text Processing :: Markup",
]

# Dependencies
dependencies = [
  "rich>=13.9.4,<14.0.0",
  "click>=8.1.7,<9.0.0",
  "pyyaml>=6.0.0,<7.0.0",
]

[project.optional-dependencies]
dev = [
  "pre-commit>=4.1.0,<5.0.0",
  "black>=25.1.0,<26.0.0",
  "pytest-cov>=4.1.0,<5.0.0",
  "ruff>=0.3.2,<0.4.0",
  "pytest>=8.3.5,<9.0.0",
  "twine>=6.1.0,<7.0.0",
  "jinja2>=3.1.6,<4.0.0",
]

[project.scripts]
nanodoc = "nanodoc.cli:main"
pmrun = "nanodoc.cli:main"

[project.urls]
Homepage = "https://github.com/arthur-debert/nanodoc/"
Repository = "https://github.com/arthur-debert/nanodoc/"
"Bug Tracker" = "https://github.com/arthur-debert/nanodoc/issues"

[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
packages = [{ include = "nanodoc", from = "src" }]
include = ["bin/**/*", "README.txt", "LICENSE"]
exclude = [
  "docs/**/*",
  "samples/**/*",
  "tests/**/*",
  "tmp/**/*",
  "notes/**/*",
  "drafts/**/*",
  ".vscode/**/*",
  ".VSCodeCounter/**/*",
  ".coverage",
  ".coverage.*",
  "**/*.pyc",
  "**/__pycache__/**",
  "**/*.log",
]

[tool.poetry.group.dev.dependencies]
xenon = "^0.9.3"

[tool.pytest.ini_options]
pythonpath = ["src"]

[tool.black]
line-length = 88
target-version = ["py39"]
include = '\.pyi?$'
exclude = '/(\.git|\.hg|\.mypy_cache|\.tox|\.venv|_build|buck-out|build|dist)/'

[tool.ruff]
line-length = 88
target-version = "py39"
exclude = [
  ".git",
  ".hg",
  ".mypy_cache",
  ".tox",
  ".venv",
  "_build",
  "buck-out",
  "build",
  "dist",
  "__pycache__",
]

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "F",   # pyflakes
  "I",   # isort
  "UP",  # pyupgrade
  "N",   # pep8-naming
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "SIM", # flake8-simplify
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["nanodoc"]
