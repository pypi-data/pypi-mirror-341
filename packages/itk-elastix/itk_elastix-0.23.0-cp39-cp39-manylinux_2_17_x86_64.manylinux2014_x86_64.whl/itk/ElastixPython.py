# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ElastixPython
else:
    import _ElastixPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



swig = {}
import itk.ITKPyBasePython
import itk.ITKSmoothingPython
import itk.ITKRegistrationCommonPython
import itk.ITKMeshPython
import itk.ITKImageSourcesPython
import itk.ITKImageGridPython
import itk.ITKIOMetaPython
import itk.ITKIOMeshBasePython
import itk.ITKIOImageBasePython
import itk.ITKCommonPython
from itk.itkTransformixFilterPython import *
from itk.itkElastixRegistrationMethodPython import *
from itk.elxParameterObjectPython import *
import numpy as np
import itk
import os

def transformix_deformation_field(*args, **kwargs):
    transformix_object = itk.TransformixFilter.New(*args, **kwargs)
    transformix_object.SetComputeDeformationField(True)
    transformix_object.UpdateLargestPossibleRegion()
    return transformix_object.GetOutputDeformationField()

# Satify itk package lazy loading
def transformix_deformation_field_init_docstring():
    pass

def transformix_jacobian(*args, **kwargs):
    transformix_object = itk.TransformixFilter.New(*args, **kwargs)
    transformix_object.SetComputeSpatialJacobian(True)
    transformix_object.SetComputeDeterminantOfSpatialJacobian(True)
    transformix_object.UpdateLargestPossibleRegion()
    output_dir = kwargs.get('output_directory', None)
    if output_dir:
        det_spatial_jacobian = itk.imread(output_dir +'spatialJacobian.nii', itk.F)
        full_spatial_jacobian = itk.imread(output_dir +'fullSpatialJacobian.nii', itk.F)
    else:
        det_spatial_jacobian = itk.imread('spatialJacobian.nii', itk.F)
        full_spatial_jacobian = itk.imread('fullSpatialJacobian.nii', itk.F)
        os.remove('spatialJacobian.nii')
        os.remove('fullSpatialJacobian.nii')

    return (full_spatial_jacobian,det_spatial_jacobian)

# Satify itk package lazy loading
def transformix_jacobian_init_docstring():
    pass

def transformix_pointset(*args, **kwargs):
    reduce_output = kwargs.get('reduce_output', False)
    if reduce_output:
        kwargs.pop('reduce_output')
    transformix_object = itk.TransformixFilter.New(*args, **kwargs)
    transformix_object.UpdateLargestPossibleRegion()
    output_dir = kwargs.get('output_directory', None)
    if output_dir:
        if output_dir[-1] != '/':
            output_dir += '/'
        moving_point_set = np.loadtxt(output_dir+'outputpoints.txt', dtype='str')
        if reduce_output:
            moving_point_set = moving_point_set[:,30:33].astype('float64')
    else:
        moving_point_set = np.loadtxt('outputpoints.txt', dtype='str')
        if reduce_output:
            moving_point_set = moving_point_set[:,30:33].astype('float64')
        os.remove('outputpoints.txt')
    return moving_point_set

# Satify itk package lazy loading
def transformix_pointset_init_docstring():
    pass





