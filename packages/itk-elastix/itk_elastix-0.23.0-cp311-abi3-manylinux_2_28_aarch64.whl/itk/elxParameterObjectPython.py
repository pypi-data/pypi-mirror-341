# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _ElastixPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _elxParameterObjectPython
else:
    import _elxParameterObjectPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
class mapstringvectorstring(collections.abc.MutableMapping if _swig_python_version_info >= (3, 3) else collections.MutableMapping):
    r"""Proxy of C++ std::map< std::string,std::vector< std::string > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _elxParameterObjectPython.mapstringvectorstring_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _elxParameterObjectPython.mapstringvectorstring___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _elxParameterObjectPython.mapstringvectorstring___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::map< std::string,std::vector< std::string > >::size_type"""
        return _elxParameterObjectPython.mapstringvectorstring___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""
        __getitem__(self, key) -> vectorstring

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring___getitem__(self, key)

    def __delitem__(self, key):
        r"""
        __delitem__(self, key)

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring___delitem__(self, key)

    def has_key(self, key):
        r"""
        has_key(self, key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring_has_key(self, key)

    def keys(self):
        r"""keys(self) -> PyObject *"""
        return _elxParameterObjectPython.mapstringvectorstring_keys(self)

    def values(self):
        r"""values(self) -> PyObject *"""
        return _elxParameterObjectPython.mapstringvectorstring_values(self)

    def items(self):
        r"""items(self) -> PyObject *"""
        return _elxParameterObjectPython.mapstringvectorstring_items(self)

    def __contains__(self, key):
        r"""
        __contains__(self, key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(self) -> SwigPyIterator"""
        return _elxParameterObjectPython.mapstringvectorstring_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(self) -> SwigPyIterator"""
        return _elxParameterObjectPython.mapstringvectorstring_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, key)

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &

        __setitem__(self, key, x)

        Parameters
        ----------
        key: std::map< std::string,std::vector< std::string > >::key_type const &
        x: std::map< std::string,std::vector< std::string > >::mapped_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring___setitem__(self, *args)

    def asdict(self):
        r"""asdict(self) -> PyObject *"""
        return _elxParameterObjectPython.mapstringvectorstring_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(self, other) -> mapstringvectorstring

        Parameters
        ----------
        other: std::less< std::string > const &

        __init__(self) -> mapstringvectorstring
        __init__(self, other) -> mapstringvectorstring

        Parameters
        ----------
        other: std::map< std::string,std::vector< std::string,std::allocator< std::string > > > const &

        """
        _elxParameterObjectPython.mapstringvectorstring_swiginit(self, _elxParameterObjectPython.new_mapstringvectorstring(*args))

    def empty(self):
        r"""empty(self) -> bool"""
        return _elxParameterObjectPython.mapstringvectorstring_empty(self)

    def size(self):
        r"""size(self) -> std::map< std::string,std::vector< std::string > >::size_type"""
        return _elxParameterObjectPython.mapstringvectorstring_size(self)

    def swap(self, v):
        r"""
        swap(self, v)

        Parameters
        ----------
        v: std::map< std::string,std::vector< std::string,std::allocator< std::string > > > &

        """
        return _elxParameterObjectPython.mapstringvectorstring_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_begin(self)

    def end(self):
        r"""end(self) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::map< std::string,std::vector< std::string > >::reverse_iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::map< std::string,std::vector< std::string > >::reverse_iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _elxParameterObjectPython.mapstringvectorstring_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::map< std::string,std::vector< std::string > >::allocator_type"""
        return _elxParameterObjectPython.mapstringvectorstring_get_allocator(self)

    def count(self, x):
        r"""
        count(self, x) -> std::map< std::string,std::vector< std::string > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring_count(self, x)

    def erase(self, *args):
        r"""
        erase(self, x) -> std::map< std::string,std::vector< std::string > >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        erase(self, position)

        Parameters
        ----------
        position: std::map< std::string,std::vector< std::string > >::iterator

        erase(self, first, last)

        Parameters
        ----------
        first: std::map< std::string,std::vector< std::string > >::iterator
        last: std::map< std::string,std::vector< std::string > >::iterator

        """
        return _elxParameterObjectPython.mapstringvectorstring_erase(self, *args)

    def find(self, x):
        r"""
        find(self, x) -> std::map< std::string,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring_find(self, x)

    def lower_bound(self, x):
        r"""
        lower_bound(self, x) -> std::map< std::string,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring_lower_bound(self, x)

    def upper_bound(self, x):
        r"""
        upper_bound(self, x) -> std::map< std::string,std::vector< std::string > >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::vector< std::string > >::key_type const &

        """
        return _elxParameterObjectPython.mapstringvectorstring_upper_bound(self, x)
    __swig_destroy__ = _elxParameterObjectPython.delete_mapstringvectorstring

# Register mapstringvectorstring in _elxParameterObjectPython:
_elxParameterObjectPython.mapstringvectorstring_swigregister(mapstringvectorstring)

def elastixParameterObject_New():
    return elastixParameterObject.New()

class elastixParameterObject(itk.ITKCommonBasePython.itkDataObject):
    r"""Proxy of C++ elastixParameterObject class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> elastixParameterObject_Pointer"""
        return _elxParameterObjectPython.elastixParameterObject___New_orig__()

    def Clone(self):
        r"""Clone(self) -> elastixParameterObject_Pointer"""
        return _elxParameterObjectPython.elastixParameterObject_Clone(self)

    def SetParameterMap(self, *args):
        r"""
        SetParameterMap(self, parameterMap)

        Parameters
        ----------
        parameterMap: std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > const &

        SetParameterMap(self, index, parameterMap)

        Parameters
        ----------
        index: unsigned int const
        parameterMap: std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > const &

        SetParameterMap(self, parameterMaps)

        Parameters
        ----------
        parameterMaps: std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const &

        """
        return _elxParameterObjectPython.elastixParameterObject_SetParameterMap(self, *args)

    def SetParameterMaps(self, parameterMaps):
        r"""
        SetParameterMaps(self, parameterMaps)

        Parameters
        ----------
        parameterMaps: std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const &

        """
        return _elxParameterObjectPython.elastixParameterObject_SetParameterMaps(self, parameterMaps)

    def AddParameterMap(self, parameterMap):
        r"""
        AddParameterMap(self, parameterMap)

        Parameters
        ----------
        parameterMap: std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > const &

        """
        return _elxParameterObjectPython.elastixParameterObject_AddParameterMap(self, parameterMap)

    def GetParameterMap(self, *args):
        r"""
        GetParameterMap(self, index) -> mapstringvectorstring

        Parameters
        ----------
        index: unsigned int const

        GetParameterMap(self) -> std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const &
        """
        return _elxParameterObjectPython.elastixParameterObject_GetParameterMap(self, *args)

    def GetParameterMaps(self):
        r"""GetParameterMaps(self) -> std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const &"""
        return _elxParameterObjectPython.elastixParameterObject_GetParameterMaps(self)

    def GetNumberOfParameterMaps(self):
        r"""GetNumberOfParameterMaps(self) -> unsigned int"""
        return _elxParameterObjectPython.elastixParameterObject_GetNumberOfParameterMaps(self)

    def SetParameter(self, *args):
        r"""
        SetParameter(self, index, key, value)

        Parameters
        ----------
        index: unsigned int const
        key: std::string const &
        value: std::string const &

        SetParameter(self, index, key, value)

        Parameters
        ----------
        index: unsigned int const
        key: std::string const &
        value: std::vector< std::string,std::allocator< std::string > > const &

        SetParameter(self, key, value)

        Parameters
        ----------
        key: std::string const &
        value: std::string const &

        SetParameter(self, key, value)

        Parameters
        ----------
        key: std::string const &
        value: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _elxParameterObjectPython.elastixParameterObject_SetParameter(self, *args)

    def GetParameter(self, index, key):
        r"""
        GetParameter(self, index, key) -> vectorstring

        Parameters
        ----------
        index: unsigned int const
        key: std::string const &

        """
        return _elxParameterObjectPython.elastixParameterObject_GetParameter(self, index, key)

    def RemoveParameter(self, *args):
        r"""
        RemoveParameter(self, index, key)

        Parameters
        ----------
        index: unsigned int const
        key: std::string const &

        RemoveParameter(self, key)

        Parameters
        ----------
        key: std::string const &

        """
        return _elxParameterObjectPython.elastixParameterObject_RemoveParameter(self, *args)

    def ReadParameterFile(self, *args):
        r"""
        ReadParameterFile(self, parameterFileName)

        Parameters
        ----------
        parameterFileName: std::string const &

        ReadParameterFile(self, parameterFileNameVector)

        Parameters
        ----------
        parameterFileNameVector: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _elxParameterObjectPython.elastixParameterObject_ReadParameterFile(self, *args)

    def ReadParameterFiles(self, parameterFileNameVector):
        r"""
        ReadParameterFiles(self, parameterFileNameVector)

        Parameters
        ----------
        parameterFileNameVector: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _elxParameterObjectPython.elastixParameterObject_ReadParameterFiles(self, parameterFileNameVector)

    def AddParameterFile(self, parameterFileName):
        r"""
        AddParameterFile(self, parameterFileName)

        Parameters
        ----------
        parameterFileName: std::string const &

        """
        return _elxParameterObjectPython.elastixParameterObject_AddParameterFile(self, parameterFileName)

    @staticmethod
    def WriteParameterFile(*args):
        r"""
        WriteParameterFile()
        WriteParameterFile(parameterMap, parameterFileName)

        Parameters
        ----------
        parameterMap: std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > const &
        parameterFileName: std::string const &

        WriteParameterFile(parameterFileName)

        Parameters
        ----------
        parameterFileName: std::string const &

        WriteParameterFile(parameterFileNameVector)

        Parameters
        ----------
        parameterFileNameVector: std::vector< std::string,std::allocator< std::string > > const &

        WriteParameterFile(parameterMapVector, parameterFileNameVector)

        Parameters
        ----------
        parameterMapVector: std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const &
        parameterFileNameVector: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _elxParameterObjectPython.elastixParameterObject_WriteParameterFile(*args)

    @staticmethod
    def WriteParameterFiles(*args):
        r"""
        WriteParameterFiles()
        WriteParameterFiles(parameterFileNameVector)

        Parameters
        ----------
        parameterFileNameVector: std::vector< std::string,std::allocator< std::string > > const &

        WriteParameterFiles(parameterMapVector, parameterFileNameVector)

        Parameters
        ----------
        parameterMapVector: std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const &
        parameterFileNameVector: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _elxParameterObjectPython.elastixParameterObject_WriteParameterFiles(*args)

    @staticmethod
    def GetDefaultParameterMap(transformName, numberOfResolutions=4, finalGridSpacingInPhysicalUnits=10.):
        r"""
        GetDefaultParameterMap(transformName, numberOfResolutions=4, finalGridSpacingInPhysicalUnits=10.) -> mapstringvectorstring

        Parameters
        ----------
        transformName: std::string const &
        numberOfResolutions: unsigned int const
        finalGridSpacingInPhysicalUnits: double const

        """
        return _elxParameterObjectPython.elastixParameterObject_GetDefaultParameterMap(transformName, numberOfResolutions, finalGridSpacingInPhysicalUnits)

    def __init__(self):
        r"""__init__(self) -> elastixParameterObject"""
        _elxParameterObjectPython.elastixParameterObject_swiginit(self, _elxParameterObjectPython.new_elastixParameterObject())
    __swig_destroy__ = _elxParameterObjectPython.delete_elastixParameterObject

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> elastixParameterObject

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _elxParameterObjectPython.elastixParameterObject_cast(obj)

    def New(*args, **kargs):
        """New() -> elastixParameterObject

        Create a new object of the class elastixParameterObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          elastixParameterObject.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = elastixParameterObject.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = elastixParameterObject.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register elastixParameterObject in _elxParameterObjectPython:
_elxParameterObjectPython.elastixParameterObject_swigregister(elastixParameterObject)

