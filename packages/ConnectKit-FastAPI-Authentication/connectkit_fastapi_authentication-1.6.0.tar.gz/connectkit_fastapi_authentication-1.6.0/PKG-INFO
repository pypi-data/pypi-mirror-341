Metadata-Version: 2.1
Name: ConnectKit-FastAPI-Authentication
Version: 1.6.0
Summary: User JWT Authentication for FastAPI services
Keywords: connectkit,authentication,jwt,cookie,otp,totp,fastapi
Author-Email: RealMetamorph <andr.timchuk@yandex.ru>
License: The MIT License (MIT)
         Copyright © 2024 MTUCI Open Source
         
         Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
         
         The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
         
         THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Classifier: Development Status :: 5 - Production/Stable
Classifier: Programming Language :: Python :: 3
Classifier: Intended Audience :: Developers
Classifier: Framework :: FastAPI
Classifier: License :: OSI Approved :: MIT License
Project-URL: Homepage, https://github.com/mtuciru/ConnectKit-FastAPI-Authentication/blob/1.6.0/README.md
Project-URL: Repository, https://github.com/mtuciru/ConnectKit-FastAPI-Authentication.git
Requires-Python: >=3.9
Requires-Dist: pydantic>=2.5.3
Requires-Dist: pydantic-settings>=2.1.0
Requires-Dist: fastapi>=0.110.0
Requires-Dist: PyJWT>=2.8.0
Requires-Dist: argon2-cffi>=23.1.0
Requires-Dist: pyotp>=2.9.0
Requires-Dist: ConnectKit-Database[asyncpg]>=1.3.2
Requires-Dist: ietfparse>=1.9.0
Description-Content-Type: text/markdown

# ConnectKit FastAPI Authentication [*en*|[ru](https://github.com/mtuciru/ConnectKit-FastAPI-Authentication/blob/1.6.0/README_RU.md)]

___

ConnectKit FastAPI Authentication adds accounts, user sessions, and
a user authentication mechanism using JWT for FastAPI applications.

Logging in via oauth2 or OpenID connect is not supported at the moment.

## Installation

___

```shell
pip install ConnectKit-FastAPI-Authentication
```

## Usage

___

Configuration parameters are loaded from environment variables, and can be redefined later.

    SECURE_SECRET=str                 # Key for signing JWT
    SECURE_ACCESS_EXPIRE=5            # Access token validity period in minutes
    SECURE_REFRESH_EXPIRE=24          # Refresh token validity time in hours for a short session
    SECURE_REFRESH_LONG_EXPIRE=720    # Refresh token validity time in hours for a long session
    SECURE_PATH=/api                  # Prefix of the path to which the cookie with the token will be bound
    SECURE_COOKIE_NAME=access         # The name of the cookie in which the token will be
    SECURE_ONLY=True                  # Instructing the browser to accept the token only if https
    SECURE_BLOCK_TRIES=5              # Number of attempts to enter the wrong password before the account is blocked
    SECURE_OTP_ENABLED=True           # Use 2FA via one-time passwords
    SECURE_OTP_BLOCK_TRIES=3          # Number of attempts to transfer OTP before logout
    SECURE_OTP_ISSUER=Localhost inc.  # The OTP ISSUER transmitted to user when 2FA is enabled
    SECURE_STRICT_VERIFICATION=True   # Strict verification for re-entering the password

To redefine:

```python
from authentication.settings import settings

settings.SECURE_COOKIE_NAME = "new_name"
```

[To set up a database connection](https://github.com/mtuciru/ConnectKit-Database/blob/master/README.md).

To enable authorization endpoints:

```python
from fastapi import FastAPI
from authentication import router as auth_router

app = FastAPI()
app.include_router(auth_router, prefix="/api/auth")

```

To get the current account or session:

```python
from fastapi import APIRouter, Depends
from authentication import get_account, get_session
from authentication.models import Account, AccountSession
from authentication.errors import auth_errors, with_errors

router = APIRouter()


@router.get("/test", responses=with_errors(*auth_errors))
async def test(account: Account = Depends(get_account)):
    print(account)


@router.get("/test2", responses=with_errors(*auth_errors))
async def test2(account_session: AccountSession = Depends(get_session)):
    print(account_session)

```

The `get_session` function checks for the presence of a session and the passage of 2FA.

The `get_account` function checks the same as `get_session`, as well as the account activation status.

If the login is not completed or outdated, HttpException will be raised from the list of `auth_errors` exceptions.

To implement the registration form, manually add users and administrative work:

```python
from authentication import (NewAccount, login_rules, password_rules,
                            login_type, password_type,
                            create_new_account, delete_account,
                            block_account, unblock_account, get_block_status,
                            get_status_otp, disable_otp)
from pydantic import BaseModel, EmailStr

# Creating a new user

try:
    new_acc = NewAccount(
        login="root",  # The user's unique login is set by the login_rules rule
        password="password",  # The user's password is set by the password_rules rule
        properties={  # User properties required in a specific task, Dict[str, Any]
            "name": "name"
        },
        active=True  # Is the account activated, False by default
    )
    account = await create_new_account(new_acc)
except ValueError as e:
    # The user already exists, or there is a validation error in the New Account
    pass


# Example of a registration scheme

class UserRegistration(BaseModel):
    login: login_type
    nickname: str
    email: EmailStr
    password: password_type


# Deleting an account
await delete_account(account)

# Getting the blocking status (bool, Optional[str])
block, reason = await get_block_status(account)

# Getting 2FA status
otp_enabled = await get_status_otp(account)

# Account blocking (a blocked account cannot log in)
await block_account(account, "reason")

# Unblocking account
await unblock_account(account)

# Forced disable of 2FA
await disable_otp(account)


```

Authentication diagram:

![Authentication diagram](https://raw.githubusercontent.com/mtuciru/ConnectKit-FastAPI-Authentication/refs/tags/1.6.0/login.jpg)

Token update diagram:

![Token update diagram](https://raw.githubusercontent.com/mtuciru/ConnectKit-FastAPI-Authentication/refs/tags/1.6.0/refresh.jpg)

## License

___

ConnectKit FastAPIAuthentication is [MIT License](./LICENSE).