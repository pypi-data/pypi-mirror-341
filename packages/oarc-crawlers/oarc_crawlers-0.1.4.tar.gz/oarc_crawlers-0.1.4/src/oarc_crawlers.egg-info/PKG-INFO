Metadata-Version: 2.4
Name: oarc-crawlers
Version: 0.1.4
Summary: OARC's dynamic webcrawler module collection
Author: OARC Team
License:                                  Apache License
                                   Version 2.0, January 2004
                                http://www.apache.org/licenses/
        
           TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
        
           1. Definitions.
        
              "License" shall mean the terms and conditions for use, reproduction,
              and distribution as defined by Sections 1 through 9 of this document.
        
              "Licensor" shall mean the copyright owner or entity authorized by
              the copyright owner that is granting the License.
        
              "Legal Entity" shall mean the union of the acting entity and all
              other entities that control, are controlled by, or are under common
              control with that entity. For the purposes of this definition,
              "control" means (i) the power, direct or indirect, to cause the
              direction or management of such entity, whether by contract or
              otherwise, or (ii) ownership of fifty percent (50%) or more of the
              outstanding shares, or (iii) beneficial ownership of such entity.
        
              "You" (or "Your") shall mean an individual or Legal Entity
              exercising permissions granted by this License.
        
              "Source" form shall mean the preferred form for making modifications,
              including but not limited to software source code, documentation
              source, and configuration files.
        
              "Object" form shall mean any form resulting from mechanical
              transformation or translation of a Source form, including but
              not limited to compiled object code, generated documentation,
              and conversions to other media types.
        
              "Work" shall mean the work of authorship, whether in Source or
              Object form, made available under the License, as indicated by a
              copyright notice that is included in or attached to the work
              (an example is provided in the Appendix below).
        
              "Derivative Works" shall mean any work, whether in Source or Object
              form, that is based on (or derived from) the Work and for which the
              editorial revisions, annotations, elaborations, or other modifications
              represent, as a whole, an original work of authorship. For the purposes
              of this License, Derivative Works shall not include works that remain
              separable from, or merely link (or bind by name) to the interfaces of,
              the Work and Derivative Works thereof.
        
              "Contribution" shall mean any work of authorship, including
              the original version of the Work and any modifications or additions
              to that Work or Derivative Works thereof, that is intentionally
              submitted to Licensor for inclusion in the Work by the copyright owner
              or by an individual or Legal Entity authorized to submit on behalf of
              the copyright owner. For the purposes of this definition, "submitted"
              means any form of electronic, verbal, or written communication sent
              to the Licensor or its representatives, including but not limited to
              communication on electronic mailing lists, source code control systems,
              and issue tracking systems that are managed by, or on behalf of, the
              Licensor for the purpose of discussing and improving the Work, but
              excluding communication that is conspicuously marked or otherwise
              designated in writing by the copyright owner as "Not a Contribution."
        
              "Contributor" shall mean Licensor and any individual or Legal Entity
              on behalf of whom a Contribution has been received by Licensor and
              subsequently incorporated within the Work.
        
           2. Grant of Copyright License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              copyright license to reproduce, prepare Derivative Works of,
              publicly display, publicly perform, sublicense, and distribute the
              Work and such Derivative Works in Source or Object form.
        
           3. Grant of Patent License. Subject to the terms and conditions of
              this License, each Contributor hereby grants to You a perpetual,
              worldwide, non-exclusive, no-charge, royalty-free, irrevocable
              (except as stated in this section) patent license to make, have made,
              use, offer to sell, sell, import, and otherwise transfer the Work,
              where such license applies only to those patent claims licensable
              by such Contributor that are necessarily infringed by their
              Contribution(s) alone or by combination of their Contribution(s)
              with the Work to which such Contribution(s) was submitted. If You
              institute patent litigation against any entity (including a
              cross-claim or counterclaim in a lawsuit) alleging that the Work
              or a Contribution incorporated within the Work constitutes direct
              or contributory patent infringement, then any patent licenses
              granted to You under this License for that Work shall terminate
              as of the date such litigation is filed.
        
           4. Redistribution. You may reproduce and distribute copies of the
              Work or Derivative Works thereof in any medium, with or without
              modifications, and in Source or Object form, provided that You
              meet the following conditions:
        
              (a) You must give any other recipients of the Work or
                  Derivative Works a copy of this License; and
        
              (b) You must cause any modified files to carry prominent notices
                  stating that You changed the files; and
        
              (c) You must retain, in the Source form of any Derivative Works
                  that You distribute, all copyright, patent, trademark, and
                  attribution notices from the Source form of the Work,
                  excluding those notices that do not pertain to any part of
                  the Derivative Works; and
        
              (d) If the Work includes a "NOTICE" text file as part of its
                  distribution, then any Derivative Works that You distribute must
                  include a readable copy of the attribution notices contained
                  within such NOTICE file, excluding those notices that do not
                  pertain to any part of the Derivative Works, in at least one
                  of the following places: within a NOTICE text file distributed
                  as part of the Derivative Works; within the Source form or
                  documentation, if provided along with the Derivative Works; or,
                  within a display generated by the Derivative Works, if and
                  wherever such third-party notices normally appear. The contents
                  of the NOTICE file are for informational purposes only and
                  do not modify the License. You may add Your own attribution
                  notices within Derivative Works that You distribute, alongside
                  or as an addendum to the NOTICE text from the Work, provided
                  that such additional attribution notices cannot be construed
                  as modifying the License.
        
              You may add Your own copyright statement to Your modifications and
              may provide additional or different license terms and conditions
              for use, reproduction, or distribution of Your modifications, or
              for any such Derivative Works as a whole, provided Your use,
              reproduction, and distribution of the Work otherwise complies with
              the conditions stated in this License.
        
           5. Submission of Contributions. Unless You explicitly state otherwise,
              any Contribution intentionally submitted for inclusion in the Work
              by You to the Licensor shall be under the terms and conditions of
              this License, without any additional terms or conditions.
              Notwithstanding the above, nothing herein shall supersede or modify
              the terms of any separate license agreement you may have executed
              with Licensor regarding such Contributions.
        
           6. Trademarks. This License does not grant permission to use the trade
              names, trademarks, service marks, or product names of the Licensor,
              except as required for reasonable and customary use in describing the
              origin of the Work and reproducing the content of the NOTICE file.
        
           7. Disclaimer of Warranty. Unless required by applicable law or
              agreed to in writing, Licensor provides the Work (and each
              Contributor provides its Contributions) on an "AS IS" BASIS,
              WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
              implied, including, without limitation, any warranties or conditions
              of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
              PARTICULAR PURPOSE. You are solely responsible for determining the
              appropriateness of using or redistributing the Work and assume any
              risks associated with Your exercise of permissions under this License.
        
           8. Limitation of Liability. In no event and under no legal theory,
              whether in tort (including negligence), contract, or otherwise,
              unless required by applicable law (such as deliberate and grossly
              negligent acts) or agreed to in writing, shall any Contributor be
              liable to You for damages, including any direct, indirect, special,
              incidental, or consequential damages of any character arising as a
              result of this License or out of the use or inability to use the
              Work (including but not limited to damages for loss of goodwill,
              work stoppage, computer failure or malfunction, or any and all
              other commercial damages or losses), even if such Contributor
              has been advised of the possibility of such damages.
        
           9. Accepting Warranty or Additional Liability. While redistributing
              the Work or Derivative Works thereof, You may choose to offer,
              and charge a fee for, acceptance of support, warranty, indemnity,
              or other liability obligations and/or rights consistent with this
              License. However, in accepting such obligations, You may act only
              on Your own behalf and on Your sole responsibility, not on behalf
              of any other Contributor, and only if You agree to indemnify,
              defend, and hold each Contributor harmless for any liability
              incurred by, or claims asserted against, such Contributor by reason
              of your accepting any such warranty or additional liability.
        
           END OF TERMS AND CONDITIONS
        
Project-URL: Homepage, https://github.com/oarc/oarc-crawlers
Project-URL: Bug Tracker, https://github.com/oarc/oarc-crawlers/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohttp>=3.11.16
Requires-Dist: beautifulsoup4>=4.13.3
Requires-Dist: GitPython>=3.1.44
Requires-Dist: moviepy>=2.1.2
Requires-Dist: mypy>=1.3.0
Requires-Dist: pandas>=2.2.3
Requires-Dist: pyarrow>=19.0.1
Requires-Dist: pytube>=15.0.0
Requires-Dist: pytchat>=0.5.0
Requires-Dist: types-beautifulsoup4>=4.9.0
Requires-Dist: fastmcp>=0.2.0
Requires-Dist: websockets>=12.0
Requires-Dist: build>=1.2.2.post1
Requires-Dist: twine>=5.0.0
Provides-Extra: dev
Requires-Dist: pytest>=8.3.5; extra == "dev"
Requires-Dist: pytest-asyncio>=0.26.0; extra == "dev"
Requires-Dist: black>=25.1.0; extra == "dev"
Requires-Dist: isort>=6.0.1; extra == "dev"
Requires-Dist: ruff>=0.0.240; extra == "dev"
Requires-Dist: build>=1.2.2.post1; extra == "dev"
Requires-Dist: pyinstaller>=6.0.0; extra == "dev"
Dynamic: license-file

# ⛏️ OARC-Crawlers ⛏️

OARC's dynamic webcrawler module collection. This package provides various web crawlers and data extractors for different sources, all with integrated Parquet storage capabilities for efficient data persistence and retrieval:

- YouTube videos and metadata
- GitHub repositories
- DuckDuckGo search results
- Web pages via BeautifulSoup
- ArXiv papers and research
- Parquet-based data storage system

## Features

- **YouTube Downloader**: Download videos, playlists, and extract captions
- **GitHub Crawler**: Clone repositories and extract code for analysis
- **DuckDuckGo Searcher**: Search for text, images, and news
- **Web Crawler**: Extract content from websites using BeautifulSoup
- **ArXiv Fetcher**: Download academic papers and their LaTeX source
- **Parquet Storage**: Utility for saving and loading data in Parquet format

## Installation

```bash
# Install with UV (recommended)
pip install uv

# create a new project dir or go to your existing project
cd your_custom_project

# create venv
uv venv --python 3.11

#install oarc-crawlers with pip
uv pip install oarc-crawlers

# or you may install oarc-crawlers with the following commands for the development package.

# For development installation:
git clone https://github.com/oarc/oarc-crawlers

# Open cloned repo
cd oarc-crawlers

# create uv venv
uv venv --python 3.11

# activate
.venv\Scripts\activate

# setup developer environment
uv pip install -e .[dev]
```

## Package Structure

```Bash
oarc-crawlers/
├── .github/                     # GitHub workflows and config
├── docs/                        # Core documentation
├── examples/                    # Example usage scripts
├── src/
│   └── oarc_crawlers/           # Source code to package
│   │   └── cli/                 # CLI tools directory
│   └── tests/                   # Unit tests
└── README.md                    # Project overview
└── LICENSE                      # Apache 2.0
```

## CLI Usage

The package provides a unified command-line interface:

```bash
# Environment and package management
oarc-crawlers setup          # Setup development environment
oarc-crawlers build         # Build the package
oarc-crawlers publish       # Publish to PyPI
oarc-crawlers publish --test # Publish to TestPyPI

# YouTube operations
oarc-crawlers youtube download --url "https://youtube.com/watch?v=..."
oarc-crawlers youtube playlist --url "https://youtube.com/playlist?list=..."
oarc-crawlers youtube captions --url "https://youtube.com/watch?v=..."
oarc-crawlers youtube search --query "machine learning"

# GitHub operations
oarc-crawlers github clone --url "https://github.com/user/repo"
oarc-crawlers github analyze --url "https://github.com/user/repo"
oarc-crawlers github search --query "python crawler"

# ArXiv operations
oarc-crawlers arxiv download --id "2103.00020"
oarc-crawlers arxiv search --query "quantum computing"
oarc-crawlers arxiv latex --id "2103.00020"

# Web crawling (BeautifulSoup)
oarc-crawlers bs crawl --url "https://example.com"
oarc-crawlers bs docs --url "https://docs.python.org"
oarc-crawlers bs pypi --package "requests"

# DuckDuckGo search
oarc-crawlers ddg text --query "python programming" --max-results 5
oarc-crawlers ddg images --query "cute cats" --max-results 10
oarc-crawlers ddg news --query "technology" --max-results 3
```

Each command has additional options that can be viewed using the --help flag:

```bash
oarc-crawlers --help
oarc-crawlers youtube --help
oarc-crawlers github --help
oarc-crawlers arxiv --help
oarc-crawlers bs --help
oarc-crawlers ddg --help
```

## Running Tests

```bash
# Using pytest (recommended)
python -m pytest

# Using unittest
python -m unittest discover src/oarc_crawlers/tests
```

## Running Tests

To run all tests:

```bash
python src/oarc_crawlers/tests/run_tests.py
```

Or to run a specific test:

```bash
python -m unittest oarc_crawlers.tests.test_parquet_storage
```

## POSSIBLE ISSUE: Python venv Issue
Make sure to clean your python uv venv, as well as your base python environment.

Your environment should be clean and should be similar to the following example:

```bash
# try pip list
pip list

# Heres an example
PS M:\oarc_repos_git\oarc-crawlers> pip list
Package       Version Editable project location
------------- ------- -------------------------------
oarc-crawlers 0.1.2   M:\oarc_repos_git\oarc-crawlers
pip           25.0.1
setuptools    78.1.0
wheel         0.45.1
PS M:\oarc_repos_git\oarc-crawlers> pip install uv
Looking in indexes: https://pypi.org/simple, https://pypi.ngc.nvidia.com
Collecting uv
  Downloading uv-0.6.14-py3-none-win_amd64.whl.metadata (11 kB)
Downloading uv-0.6.14-py3-none-win_amd64.whl (17.6 MB)
   ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 17.6/17.6 MB 52.9 MB/s eta 0:00:00
Installing collected packages: uv
Successfully installed uv-0.6.14
PS M:\oarc_repos_git\oarc-crawlers>

# Clear the virtual environment and the base environment

# Make sure to do:
conda deactivate

# Then if you made a venv with "uv venv --python 3.11" you can deactivate it now:

# Now deactivate
.venv\Scripts\deactivate

PS M:\oarc_repos_git\oarc-crawlers> .venv\Scripts\activate
(oarc-crawlers) PS M:\oarc_repos_git\oarc-crawlers> .venv\Scripts\deactivate

# If you cannot deactivate with the deactivate command try killing the terminal, also make sure you are careful when working with multiple uv virtual environments at the same time, they get confused.

# Clear the uv venv made with "uv venv --python 3.11"

# activate
.venv\Scripts\activate

# Run pip list

(oarc-crawlers) PS M:\oarc_repos_git\oarc-crawlers> pip list      
Package       Version Editable project location
------------- ------- -------------------------------
oarc-crawlers 0.1.2   M:\oarc_repos_git\oarc-crawlers # WE WANT TO REMOVE THIS
pip           25.0.1
setuptools    78.1.0
uv            0.6.14
wheel         0.45.1
(oarc-crawlers) PS M:\oarc_repos_git\oarc-crawlers> pip uninstall oarc-crawlers

# Now we remove the old oarc crawlers
pip uninstall oarc-crawlers

# or to clean the entire venv use

pip freeze | Select-String -Pattern "^(?!pip)" | ForEach-Object { pip uninstall -y $_.ToString().Trim() }

# Now run pip list again

(oarc-crawlers) PS M:\oarc_repos_git\oarc-crawlers> pip list
Package    Version
---------- -------
pip        25.0.1
setuptools 78.1.0
wheel      0.45.1
(oarc-crawlers) PS M:\oarc_repos_git\oarc-crawlers> 

# install uv
pip install uv

# now continue with either

uv pip install oarc-crawlers

# or

# activate uv venv
.venv\Scripts\activate

# install developer package
uv pip install -e .[dev]

# Continue with your specific usage after cleaning your uv environment :)
# hope this helps!

## Usage Examples

See the `examples/` directory for full examples for each module.

### Parquet Storage

The ParquetStorage class provides a unified interface for saving and loading data in the Parquet format across all crawler modules. It serves as the foundation for data persistence throughout the system.

### Basic Usage

```python
from oarc_crawlers import ParquetStorage
import pandas as pd

# Example 1: Save dictionary data to parquet
data = {
    'name': 'Example Dataset',
    'timestamp': '2025-04-11T14:30:00Z',
    'values': [1, 2, 3, 4, 5],
    'metadata': {'source': 'manual entry', 'version': '1.0'}
}
ParquetStorage.save_to_parquet(data, './data/example.parquet')

# Example 2: Save DataFrame to parquet
df = pd.DataFrame({
    'id': range(1, 6),
    'name': ['Alice', 'Bob', 'Charlie', 'Dave', 'Eve'],
    'score': [95, 87, 91, 76, 88]
})
ParquetStorage.save_to_parquet(df, './data/dataframe_example.parquet')

# Example 3: Load data from parquet
loaded_df = ParquetStorage.load_from_parquet('./data/dataframe_example.parquet')
print(loaded_df.head())

# Example 4: Append data to existing parquet file
new_data = {
    'id': 6,
    'name': 'Frank',
    'score': 92
}
ParquetStorage.append_to_parquet(new_data, './data/dataframe_example.parquet')

# Example 5: Working with multiple records
records = [
    {'date': '2025-04-01', 'value': 10.5},
    {'date': '2025-04-02', 'value': 11.2},
    {'date': '2025-04-03', 'value': 9.8}
]
ParquetStorage.save_to_parquet(records, './data/time_series.parquet')
```

### Implementation Details

ParquetStorage handles different data types automatically:
- Single dictionaries are converted to single-row DataFrames
- Lists of dictionaries are converted to multi-row DataFrames
- Pandas DataFrames are stored directly
- All data is converted to Apache Arrow Tables before saving

### Error Handling

The class provides robust error handling for common issues:
```python
# Safe loading with error handling
try:
    data = ParquetStorage.load_from_parquet('./path/that/might/not/exist.parquet')
    if data is None:
        print("File not found or error loading data")
    else:
        print(f"Successfully loaded {len(data)} rows")
except Exception as e:
    print(f"Error: {e}")
```

### Directory Structure

Each crawler module creates its own directory structure for storing Parquet files:
```
./data/
  ├── youtube_data/
  │   ├── videos/
  │   ├── metadata/
  │   ├── captions/
  │   └── searches/
  ├── github_repos/
  ├── searches/         # DuckDuckGo searches
  ├── crawls/           # BeautifulSoup web crawls
  ├── papers/           # ArXiv papers
  └── sources/          # ArXiv LaTeX sources
```

### YouTube Downloader

```python
from oarc_crawlers import YouTubeDownloader

async def download_example():
    downloader = YouTubeDownloader(data_dir="./data")
    # Download a video
    result = await downloader.download_video("https://www.youtube.com/watch?v=dQw4w9WgXcQ")
    print(f"Video downloaded to {result['file_path']}")
    
    # Extract captions
    captions = await downloader.extract_captions("https://www.youtube.com/watch?v=dQw4w9WgXcQ")
    print(f"Found captions in languages: {list(captions['captions'].keys())}")
```

### GitHub Crawler

```python
from oarc_crawlers import GitHubCrawler

async def github_example():
    crawler = GitHubCrawler(data_dir="./data")
    
    # Get repository summary
    repo_url = "https://github.com/username/repository"
    summary = await crawler.get_repo_summary(repo_url)
    print(summary)
    
    # Find similar code
    code_snippet = "def calculate_mean(values):\n    return sum(values) / len(values)"
    matches = await crawler.find_similar_code(repo_url, code_snippet)
    print(matches)
```

### DuckDuckGo Searcher

```python
from oarc_crawlers import DuckDuckGoSearcher

async def search_example():
    searcher = DuckDuckGoSearcher(data_dir="./data")
    
    # Text search
    text_results = await searcher.text_search("quantum computing", max_results=5)
    print(text_results)
    
    # News search
    news_results = await searcher.news_search("artificial intelligence", max_results=3)
    print(news_results)
```

### BeautifulSoup Web Crawler

```python
from oarc_crawlers import BSWebCrawler

async def web_example():
    crawler = BSWebCrawler(data_dir="./data")
    
    # Crawl documentation site
    docs = await crawler.crawl_documentation_site("https://docs.python.org/3/library/asyncio.html")
    print(docs)
```

### ArXiv Fetcher

```python
from oarc_crawlers import ArxivFetcher

async def arxiv_example():
    fetcher = ArxivFetcher(data_dir="./data")
    
    # Get paper info
    paper_id = "2103.00020"
    paper_info = await fetcher.fetch_paper_info(paper_id)
    print(f"Title: {paper_info['title']}")
    print(f"Authors: {', '.join(paper_info['authors'])}")
    
    # Get paper with LaTeX source
    full_paper = await fetcher.fetch_paper_with_latex(paper_id)
    print(f"LaTeX content length: {len(full_paper['latex_content'])}")
```

## Advanced Examples: Working with Stored Data

The ParquetStorage class serves as the foundation for all data persistence across the different crawler modules. Here are examples of how to work with the data stored by the different crawlers:

```python
import pandas as pd
import os
from datetime import datetime
from oarc_crawlers import ParquetStorage

# Access and analyze data from multiple crawlers
async def data_analysis_example():
    # Load YouTube search results
    yt_search_path = "./data/youtube_data/searches/machine_learning_1712345678.parquet"
    yt_data = ParquetStorage.load_from_parquet(yt_search_path)
    
    # Load GitHub repository data
    repo_path = "./data/github_repos/username_repository.parquet"
    repo_data = ParquetStorage.load_from_parquet(repo_path)
    
    # Load ArXiv papers
    papers_path = "./data/papers/all_papers.parquet"
    papers_df = ParquetStorage.load_from_parquet(papers_path)
    
    # Example: Find all ArXiv papers about machine learning
    ml_papers = papers_df[papers_df['abstract'].str.contains('machine learning', case=False)]
    print(f"Found {len(ml_papers)} papers about machine learning")
    
    # Example: Export combined data to CSV
    ml_papers.to_csv('./data/analysis/ml_papers.csv', index=False)
    
    # Example: Find Python files in GitHub repository
    if repo_data is not None:
        python_files = repo_data[repo_data['language'] == 'Python']
        print(f"Found {len(python_files)} Python files in repository")
        
        # Find files with specific content
        auth_files = repo_data[repo_data['content'].str.contains('authenticate', case=False)]
        print(f"Found {len(auth_files)} files related to authentication")
    
    # Example: Analyze YouTube search results
    if isinstance(yt_data, pd.DataFrame) and 'results' in yt_data.columns:
        # Extract video data if it's stored as a list in a column
        videos = []
        for _, row in yt_data.iterrows():
            if isinstance(row['results'], list):
                videos.extend(row['results'])
        
        # Convert to DataFrame for analysis
        videos_df = pd.DataFrame(videos)
        print(f"Analyzing {len(videos_df)} YouTube videos")
        
        # Find most viewed videos
        if 'views' in videos_df.columns:
            top_videos = videos_df.sort_values('views', ascending=False).head(5)
            for _, video in top_videos.iterrows():
                print(f"Title: {video['title']}, Views: {video['views']}")
```

# Working with DuckDuckGo search results

```python
from oarc_crawlers import ParquetStorage

def analyze_search_results():
    search_dir = "./data/searches"
    results = []
    
    # Collect all search results
    for file in os.listdir(search_dir):
        if file.endswith('.parquet'):
            file_path = os.path.join(search_dir, file)
            data = ParquetStorage.load_from_parquet(file_path)
            if data is not None:
                results.append({
                    'filename': file,
                    'query': data.iloc[0]['query'] if 'query' in data.columns else 'Unknown',
                    'timestamp': data.iloc[0]['timestamp'] if 'timestamp' in data.columns else None,
                    'result_count': len(data)
                })
    
    # Convert to DataFrame
    results_df = pd.DataFrame(results)
    print(f"Found {len(results_df)} search result files")
    
    # Find most recent searches
    if 'timestamp' in results_df.columns:
        results_df['timestamp'] = pd.to_datetime(results_df['timestamp'])
        recent_searches = results_df.sort_values('timestamp', ascending=False).head(5)
        for _, search in recent_searches.iterrows():
            print(f"Query: {search['query']}, Time: {search['timestamp']}")

# Working with web crawl data
def analyze_web_crawls():
    crawls_dir = "./data/crawls"
    
    if not os.path.exists(crawls_dir):
        print(f"Directory {crawls_dir} does not exist")
        return
        
    # List all crawl files
    crawl_files = [f for f in os.listdir(crawls_dir) if f.endswith('.parquet')]
    print(f"Found {len(crawl_files)} crawl files")
    
    # Process each file
    for file in crawl_files:
        file_path = os.path.join(crawls_dir, file)
        data = ParquetStorage.load_from_parquet(file_path)
        
        if data is not None:
            # For documentation crawls
            if 'doc_' in file and 'title' in data.columns:
                print(f"Documentation: {data.iloc[0]['title']}")
                
                # Extract code snippets if available
                if 'code_snippets' in data.columns:
                    snippets = data.iloc[0]['code_snippets']
                    if isinstance(snippets, list):
                        print(f"  Found {len(snippets)} code snippets")
            
            # For regular web crawls
            elif 'url' in data.columns:
                print(f"Web crawl: {data.iloc[0]['url']}")
```

## Running Examples

To run the examples:

```bash
# Run specific module example
python examples/run_example.py youtube
python examples/run_example.py github
python examples/run_example.py ddg
python examples/run_example.py bs
python examples/run_example.py arxiv
python examples/run_example.py parquet

# Run the combined example
python examples/run_example.py combined

# Run all examples
python examples/run_example.py all
```

## Running Tests

To run all tests:

```bash
python src/oarc_crawlers/tests/run_tests.py
```

Or to run a specific test:

```bash
python -m unittest oarc_crawlers.tests.test_parquet_storage
```

## MCP API Usage

OARC-Crawlers provides a Model Context Protocol (MCP) API that allows you to use the crawlers directly with AI assistants like Claude. The MCP API exposes all crawler functionalities through a unified interface.

### Installation and Setup

```python
from oarc_crawlers import OARCCrawlersMCP

# Initialize the MCP wrapper
mcp = OARCCrawlersMCP(data_dir="./data")

# Install for Claude Desktop
mcp.install(name="OARC-Crawlers")

# Or run the MCP server directly
mcp.run()
```

### Available Tools

The MCP API provides the following tools:

#### YouTube Tools
- `download_youtube_video(url: str, format: str = "mp4", resolution: str = "highest")` - Download a YouTube video
- `download_youtube_playlist(playlist_url: str, max_videos: int = 10)` - Download videos from a playlist
- `extract_youtube_captions(url: str, languages: List[str] = ["en"])` - Extract video captions

#### GitHub Tools
- `clone_github_repo(repo_url: str)` - Clone and analyze a repository
- `analyze_github_repo(repo_url: str)` - Get repository summary
- `find_similar_code(repo_url: str, code_snippet: str)` - Find similar code in a repository

#### DuckDuckGo Tools
- `ddg_text_search(query: str, max_results: int = 5)` - Perform text search
- `ddg_image_search(query: str, max_results: int = 10)` - Perform image search
- `ddg_news_search(query: str, max_results: int = 20)` - Perform news search

#### Web Crawling Tools
- `crawl_webpage(url: str)` - Extract content from a webpage
- `crawl_documentation(url: str)` - Extract content from documentation sites

#### ArXiv Tools
- `fetch_arxiv_paper(arxiv_id: str)` - Fetch paper information
- `download_arxiv_source(arxiv_id: str)` - Download LaTeX source files

### Using with Claude

Once installed, you can use OARC-Crawlers with Claude like this:

```
Human: Please download and analyze this YouTube video: https://youtube.com/...
```

## License

This project is licensed under the Apache License 2.0 - see the LICENSE file for details.
