# Generated by Django 4.2.10 on 2024-07-01 13:44
# Updated for more custom logic

from django.db import migrations, models


def forwards__unique_extra_mark_documentation(apps, schema_editor):
    NewPersonalNote = apps.get_model("alsijil", "NewPersonalNote")  # noqa
    db_alias = schema_editor.connection.alias

    duplicates = (NewPersonalNote.objects.using(db_alias)
                  .values("documentation", "extra_mark", "person")
                  .annotate(count=models.Count("id"))
                  .filter(count__gt=1, extra_mark__isnull=False))

    # Iterate over duplicates and delete the extra instances
    for duplicate in duplicates:
        pks = (NewPersonalNote
               .objects
               .using(db_alias)
               .filter(person=duplicate["person"], documentation=duplicate["documentation"], extra_mark=duplicate["extra_mark"])
               .values_list("pk", flat=True)
               )[1:]
        NewPersonalNote.objects.using(db_alias).filter(pk__in=pks).delete()


def reverse__unique_extra_mark_documentation(apps, schema_editor):
    # Nothing to do, we cannot bring back the deleted objects, but they were duplicate data, so they are not needed anyway.
    pass


class Migration(migrations.Migration):
    dependencies = [
        ('alsijil', '0022_documentation_participation_touched_at'),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name='newpersonalnote',
            name='unique_absence_per_documentation',
        ),
        migrations.AddField(
            model_name='participationstatus',
            name='tardiness',
            field=models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Tardiness'),
        ),
        migrations.AlterField(
            model_name='newpersonalnote',
            name='note',
            field=models.TextField(blank=True, default='', verbose_name='Note'),
        ),
        migrations.AddConstraint(
            model_name='newpersonalnote',
            constraint=models.CheckConstraint(
                check=models.Q(models.Q(('note', ''), _negated=True), ('extra_mark__isnull', False), _connector='OR'),
                name='either_note_or_extra_mark_per_note'),
        ),
        migrations.RunPython(forwards__unique_extra_mark_documentation, reverse__unique_extra_mark_documentation),
        migrations.AddConstraint(
            model_name='newpersonalnote',
            constraint=models.UniqueConstraint(
                condition=models.Q(('extra_mark', None), _negated=True),
                fields=('person', 'documentation', 'extra_mark'),
                name='unique_person_documentation_extra_mark',
                violation_error_message='A person got assigned the same extra mark multiple times per documentation.'),
        ),
    ]
