Metadata-Version: 2.4
Name: mcp-telegram
Version: 0.1.11
Summary: MCP Server for Telegram
Project-URL: Repository, https://github.com/dryeab/mcp-telegram
Project-URL: Issues, https://github.com/dryeab/mcp-telegram/issues
Author: Yeabsira Driba
Maintainer-email: Yeabsira Driba <dryeab@gmail.com>
License: MIT
License-File: LICENSE
Keywords: automation,git,llm,mcp,telegram
Requires-Python: >=3.10
Requires-Dist: cryptg>=0.5.0.post0
Requires-Dist: mcp[cli]>=1.6.0
Requires-Dist: pydantic-settings>=2.8.1
Requires-Dist: pydantic>=2.11.1
Requires-Dist: rich>=14.0.0
Requires-Dist: telethon>=1.39.0
Requires-Dist: typer>=0.15.2
Requires-Dist: xdg-base-dirs>=6.0.2
Description-Content-Type: text/markdown

<div align="center">
  <img src="logo.png" alt="MCP Telegram Logo" width="150"/>
  <h2 style="margin-top: 0">Enable LLMs to control your Telegram</h2>
</div>

[![GitHub stars](https://img.shields.io/github/stars/dryeab/mcp-telegram?style=social)](https://github.com/dryeab/mcp-telegram/stargazers) [![PyPI version](https://badge.fury.io/py/mcp-telegram.svg)](https://badge.fury.io/py/mcp-telegram) [![Twitter Follow](https://img.shields.io/twitter/follow/dryeab?style=social)](https://twitter.com/dryeab)

**Connect Large Language Models to Telegram via the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction).**

Built with [Telethon](https://github.com/LonamiWebs/Telethon), this server allows AI agents to interact with Telegram, enabling features like sending/editing/deleting messages, searching chats, managing drafts, downloading media, and more using the [MTProto](https://core.telegram.org/mtproto).

## üöÄ Getting Started

### Prerequisites

- Python 3.10 or higher
- [`uv`](https://github.com/astral-sh/uv) Install via the [official uv guide](https://github.com/astral-sh/uv#installation).

### Installation

Install the `mcp-telegram` CLI tool:

```bash
uv tool install mcp-telegram
```

## ‚öôÔ∏è Usage

> [!IMPORTANT]
> Please ensure you have read and understood Telegram's [ToS](https://telegram.org/tos) before using this tool. Misuse of this tool may result in account restrictions.

The `mcp-telegram` command-line tool is your entry point.

```bash
mcp-telegram --help # See all commands
```

### Login

First, authenticate with your Telegram account:

```bash
mcp-telegram login
```

This interactive command will prompt you for:

- **API ID & API Hash:** Obtain these from [my.telegram.org/apps](https://my.telegram.org/apps).
- **Phone Number:** Your Telegram-registered phone number (international format, e.g., `+1234567890`).
- **Verification Code:** Sent to your Telegram account upon first login.
- **2FA Password:** If you have Two-Factor Authentication enabled.

Your credentials are securely stored in the session file for future use.

> [!WARNING]
> Keep your API credentials private and never share them publicly

> [!NOTE]
> Use `mcp-telegram logout` to logout from current session or `mcp-telegram clear-session` to remove all stored session data.

### Connect to the MCP server

To use MCP Telegram with MCP clients like Claude Desktop or Cursor, you'll need to configure the MCP server. The configuration process varies by client and operating system.

For detailed setup instructions, please refer to:

- [Claude Desktop MCP Setup Guide](https://modelcontextprotocol.io/quickstart/user)
- [Cursor MCP Documentation](https://docs.cursor.com/context/model-context-protocol)

The configuration file should contain:

```json
{
  "mcpServers": {
    "mcp-telegram": {
      "command": "mcp-telegram" /* Use full path if client can't find the command (e.g. "/usr/local/bin/mcp-telegram"). See IMPORTANT section below for full path instructions. */,
      "args": ["start"],
      "env": {
        "API_ID": "<your_api_id>",
        "API_HASH": "<your_api_hash>"
      }
    }
  }
}
```

> [!Note]
> Configuration paths vary by OS and client. For example:
>
> - macOS: `~/Library/Application Support/Claude/` or `~/.cursor/`
> - Windows: `%APPDATA%\Claude\` or `%APPDATA%\Cursor\`

> [!IMPORTANT]
> If your client cannot execute `mcp-telegram` despite it being accessible in the terminal, try using the full path to the executable. You can find this by running `which mcp-telegram` (macOS/Linux) or `where mcp-telegram` (Windows) in your terminal. Replace the `command` value in the configuration with the full path.

After saving the configuration file, restart your application.

## üß∞ Available Tools

Here's a comprehensive list of tools you can use to interact with Telegram through MCP:

### üì® Messaging Tools

| Tool             | Description                                                   |
| ---------------- | ------------------------------------------------------------- |
| `send_message`   | ‚úâÔ∏è Send text messages or files to any user, group, or channel |
| `edit_message`   | ‚úèÔ∏è Modify content of previously sent messages                 |
| `delete_message` | üóëÔ∏è Remove one or multiple messages                            |
| `get_messages`   | üìú Retrieve message history with advanced filtering options   |

### üîç Search & Navigation

| Tool                | Description                                             |
| ------------------- | ------------------------------------------------------- |
| `search_dialogs`    | üîé Find users, groups, and channels by name or username |
| `message_from_link` | üîó Access specific messages using Telegram links        |

### üìù Draft Management

| Tool        | Description                                |
| ----------- | ------------------------------------------ |
| `get_draft` | üìã View current message draft for any chat |
| `set_draft` | ‚úçÔ∏è Create or clear message drafts          |

### üìÇ Media Handling

| Tool             | Description                                             |
| ---------------- | ------------------------------------------------------- |
| `media_download` | üì∏ Download photos, videos, and documents from messages |

> [!Note]
> For detailed parameter information and example use cases, run `mcp-telegram tools` in your terminal.

## üõ†Ô∏è Troubleshooting

### Database Locked Errors

Running multiple `mcp-telegram` instances using the _same session file_ can cause `database is locked` errors due to Telethon's SQLite session storage. Ensure only one instance uses a session file at a time.

<details>
<summary>Force-Stopping Existing Processes</summary>

If you need to stop potentially stuck processes:

- **macOS / Linux:** `pkill -f "mcp-telegram"`
- **Windows:** `taskkill /F /IM mcp-telegram.exe /T` (Check Task Manager for the exact process name)

</details>

## ü§ù Contributing

We welcome contributions! If you'd like to help improve MCP Telegram, please feel free to submit issues, feature requests, or pull requests. Your feedback and contributions help make this project better for everyone.

## üìù License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

<div align="center">
  <p>Made with ‚ù§Ô∏è by <a href="https://x.com/dryeab">Yeabsira Driba</a></p>
</div>
