name: Build and Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ['3.8', '3.9', '3.10', '3.11', '3.12']
        include:
          # Add specific configurations for macOS
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin
            python: '3.10'  # Only build ARM for one Python version to save time

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0  # Fetch all history for proper versioning

      # Set up git config for private dependencies
      - name: Set up git for private dependencies
        run: |
          git config --global url."https://github.com/".insteadOf "git://github.com/"
        shell: bash

      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin pytest polars pyarrow
        shell: bash

      # Cache dependencies to speed up builds
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      # Build wheels - platform specific commands
      - name: Build wheels - Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          maturin build --release --strip --compatibility manylinux2014 --out dist
        shell: bash

      - name: Build wheels - macOS (Intel)
        if: matrix.os == 'macos-latest' && matrix.target == 'x86_64-apple-darwin'
        run: |
          maturin build --release --strip --target x86_64-apple-darwin --out dist
        shell: bash

      - name: Build wheels - macOS (ARM)
        if: matrix.os == 'macos-latest' && matrix.target == 'aarch64-apple-darwin'
        run: |
          rustup target add aarch64-apple-darwin
          maturin build --release --strip --target aarch64-apple-darwin --out dist
        shell: bash

      - name: Build wheels - Windows
        if: matrix.os == 'windows-latest'
        run: |
          maturin build --release --strip --out dist
        shell: bash

      # Upload wheels as artifacts
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python }}${{ matrix.target && format('-{0}', matrix.target) || '' }}
          path: dist/*.whl

  # Job to publish to PyPI when a tag is pushed
  publish:
    name: Publish to PyPI
    needs: [build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          path: dist
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R dist/
        shell: bash

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true