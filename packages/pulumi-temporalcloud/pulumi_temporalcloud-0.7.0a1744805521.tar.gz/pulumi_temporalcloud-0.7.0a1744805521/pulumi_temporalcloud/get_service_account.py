# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetServiceAccountResult',
    'AwaitableGetServiceAccountResult',
    'get_service_account',
    'get_service_account_output',
]

@pulumi.output_type
class GetServiceAccountResult:
    """
    A collection of values returned by getServiceAccount.
    """
    def __init__(__self__, account_access=None, created_at=None, description=None, id=None, name=None, namespace_accesses=None, state=None, updated_at=None):
        if account_access and not isinstance(account_access, str):
            raise TypeError("Expected argument 'account_access' to be a str")
        pulumi.set(__self__, "account_access", account_access)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if namespace_accesses and not isinstance(namespace_accesses, list):
            raise TypeError("Expected argument 'namespace_accesses' to be a list")
        pulumi.set(__self__, "namespace_accesses", namespace_accesses)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if updated_at and not isinstance(updated_at, str):
            raise TypeError("Expected argument 'updated_at' to be a str")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="accountAccess")
    def account_access(self) -> builtins.str:
        """
        The role on the account. Must be one of admin, developer, or read (case-insensitive).
        """
        return pulumi.get(self, "account_access")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> builtins.str:
        """
        The creation time of the Service Account.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> builtins.str:
        """
        The description of the Service Account.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> builtins.str:
        """
        The unique identifier of the Service Account.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> builtins.str:
        """
        The name associated with the service account.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="namespaceAccesses")
    def namespace_accesses(self) -> Sequence['outputs.GetServiceAccountNamespaceAccessResult']:
        """
        The set of namespace permissions for this service account, including each namespace and its role.
        """
        return pulumi.get(self, "namespace_accesses")

    @property
    @pulumi.getter
    def state(self) -> builtins.str:
        """
        The current state of the Service Account.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> builtins.str:
        """
        The last update time of the Service Account.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetServiceAccountResult(GetServiceAccountResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetServiceAccountResult(
            account_access=self.account_access,
            created_at=self.created_at,
            description=self.description,
            id=self.id,
            name=self.name,
            namespace_accesses=self.namespace_accesses,
            state=self.state,
            updated_at=self.updated_at)


def get_service_account(id: Optional[builtins.str] = None,
                        namespace_accesses: Optional[Sequence[Union['GetServiceAccountNamespaceAccessArgs', 'GetServiceAccountNamespaceAccessArgsDict']]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetServiceAccountResult:
    """
    Fetches details about a Service Account.


    :param builtins.str id: The unique identifier of the Service Account.
    :param Sequence[Union['GetServiceAccountNamespaceAccessArgs', 'GetServiceAccountNamespaceAccessArgsDict']] namespace_accesses: The set of namespace permissions for this service account, including each namespace and its role.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['namespaceAccesses'] = namespace_accesses
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('temporalcloud:index/getServiceAccount:getServiceAccount', __args__, opts=opts, typ=GetServiceAccountResult).value

    return AwaitableGetServiceAccountResult(
        account_access=pulumi.get(__ret__, 'account_access'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        namespace_accesses=pulumi.get(__ret__, 'namespace_accesses'),
        state=pulumi.get(__ret__, 'state'),
        updated_at=pulumi.get(__ret__, 'updated_at'))
def get_service_account_output(id: Optional[pulumi.Input[builtins.str]] = None,
                               namespace_accesses: Optional[pulumi.Input[Optional[Sequence[Union['GetServiceAccountNamespaceAccessArgs', 'GetServiceAccountNamespaceAccessArgsDict']]]]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetServiceAccountResult]:
    """
    Fetches details about a Service Account.


    :param builtins.str id: The unique identifier of the Service Account.
    :param Sequence[Union['GetServiceAccountNamespaceAccessArgs', 'GetServiceAccountNamespaceAccessArgsDict']] namespace_accesses: The set of namespace permissions for this service account, including each namespace and its role.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['namespaceAccesses'] = namespace_accesses
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('temporalcloud:index/getServiceAccount:getServiceAccount', __args__, opts=opts, typ=GetServiceAccountResult)
    return __ret__.apply(lambda __response__: GetServiceAccountResult(
        account_access=pulumi.get(__response__, 'account_access'),
        created_at=pulumi.get(__response__, 'created_at'),
        description=pulumi.get(__response__, 'description'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        namespace_accesses=pulumi.get(__response__, 'namespace_accesses'),
        state=pulumi.get(__response__, 'state'),
        updated_at=pulumi.get(__response__, 'updated_at')))
