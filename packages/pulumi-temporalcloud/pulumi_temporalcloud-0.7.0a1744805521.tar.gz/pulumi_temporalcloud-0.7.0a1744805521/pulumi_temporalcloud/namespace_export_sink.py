# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NamespaceExportSinkArgs', 'NamespaceExportSink']

@pulumi.input_type
class NamespaceExportSinkArgs:
    def __init__(__self__, *,
                 namespace: pulumi.Input[builtins.str],
                 sink_name: pulumi.Input[builtins.str],
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 gcs: Optional[pulumi.Input['NamespaceExportSinkGcsArgs']] = None,
                 s3: Optional[pulumi.Input['NamespaceExportSinkS3Args']] = None,
                 timeouts: Optional[pulumi.Input['NamespaceExportSinkTimeoutsArgs']] = None):
        """
        The set of arguments for constructing a NamespaceExportSink resource.
        :param pulumi.Input[builtins.str] namespace: The namespace under which the sink is configured. It's needed to be in the format of \\n\\n.\\n\\n
        :param pulumi.Input[builtins.str] sink_name: The unique name of the export sink, it can't be changed once set.
        :param pulumi.Input[builtins.bool] enabled: A flag indicating whether the export sink is enabled or not.
        :param pulumi.Input['NamespaceExportSinkGcsArgs'] gcs: The GCS configuration details when destination_type is GCS.
        :param pulumi.Input['NamespaceExportSinkS3Args'] s3: The S3 configuration details when destination_type is S3.
        """
        pulumi.set(__self__, "namespace", namespace)
        pulumi.set(__self__, "sink_name", sink_name)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if gcs is not None:
            pulumi.set(__self__, "gcs", gcs)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Input[builtins.str]:
        """
        The namespace under which the sink is configured. It's needed to be in the format of \\n\\n.\\n\\n
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="sinkName")
    def sink_name(self) -> pulumi.Input[builtins.str]:
        """
        The unique name of the export sink, it can't be changed once set.
        """
        return pulumi.get(self, "sink_name")

    @sink_name.setter
    def sink_name(self, value: pulumi.Input[builtins.str]):
        pulumi.set(self, "sink_name", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A flag indicating whether the export sink is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def gcs(self) -> Optional[pulumi.Input['NamespaceExportSinkGcsArgs']]:
        """
        The GCS configuration details when destination_type is GCS.
        """
        return pulumi.get(self, "gcs")

    @gcs.setter
    def gcs(self, value: Optional[pulumi.Input['NamespaceExportSinkGcsArgs']]):
        pulumi.set(self, "gcs", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['NamespaceExportSinkS3Args']]:
        """
        The S3 configuration details when destination_type is S3.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['NamespaceExportSinkS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NamespaceExportSinkTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NamespaceExportSinkTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


@pulumi.input_type
class _NamespaceExportSinkState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 gcs: Optional[pulumi.Input['NamespaceExportSinkGcsArgs']] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 s3: Optional[pulumi.Input['NamespaceExportSinkS3Args']] = None,
                 sink_name: Optional[pulumi.Input[builtins.str]] = None,
                 timeouts: Optional[pulumi.Input['NamespaceExportSinkTimeoutsArgs']] = None):
        """
        Input properties used for looking up and filtering NamespaceExportSink resources.
        :param pulumi.Input[builtins.bool] enabled: A flag indicating whether the export sink is enabled or not.
        :param pulumi.Input['NamespaceExportSinkGcsArgs'] gcs: The GCS configuration details when destination_type is GCS.
        :param pulumi.Input[builtins.str] namespace: The namespace under which the sink is configured. It's needed to be in the format of \\n\\n.\\n\\n
        :param pulumi.Input['NamespaceExportSinkS3Args'] s3: The S3 configuration details when destination_type is S3.
        :param pulumi.Input[builtins.str] sink_name: The unique name of the export sink, it can't be changed once set.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if gcs is not None:
            pulumi.set(__self__, "gcs", gcs)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)
        if sink_name is not None:
            pulumi.set(__self__, "sink_name", sink_name)
        if timeouts is not None:
            pulumi.set(__self__, "timeouts", timeouts)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[builtins.bool]]:
        """
        A flag indicating whether the export sink is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[builtins.bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def gcs(self) -> Optional[pulumi.Input['NamespaceExportSinkGcsArgs']]:
        """
        The GCS configuration details when destination_type is GCS.
        """
        return pulumi.get(self, "gcs")

    @gcs.setter
    def gcs(self, value: Optional[pulumi.Input['NamespaceExportSinkGcsArgs']]):
        pulumi.set(self, "gcs", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The namespace under which the sink is configured. It's needed to be in the format of \\n\\n.\\n\\n
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input['NamespaceExportSinkS3Args']]:
        """
        The S3 configuration details when destination_type is S3.
        """
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input['NamespaceExportSinkS3Args']]):
        pulumi.set(self, "s3", value)

    @property
    @pulumi.getter(name="sinkName")
    def sink_name(self) -> Optional[pulumi.Input[builtins.str]]:
        """
        The unique name of the export sink, it can't be changed once set.
        """
        return pulumi.get(self, "sink_name")

    @sink_name.setter
    def sink_name(self, value: Optional[pulumi.Input[builtins.str]]):
        pulumi.set(self, "sink_name", value)

    @property
    @pulumi.getter
    def timeouts(self) -> Optional[pulumi.Input['NamespaceExportSinkTimeoutsArgs']]:
        return pulumi.get(self, "timeouts")

    @timeouts.setter
    def timeouts(self, value: Optional[pulumi.Input['NamespaceExportSinkTimeoutsArgs']]):
        pulumi.set(self, "timeouts", value)


class NamespaceExportSink(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 gcs: Optional[pulumi.Input[Union['NamespaceExportSinkGcsArgs', 'NamespaceExportSinkGcsArgsDict']]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 s3: Optional[pulumi.Input[Union['NamespaceExportSinkS3Args', 'NamespaceExportSinkS3ArgsDict']]] = None,
                 sink_name: Optional[pulumi.Input[builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['NamespaceExportSinkTimeoutsArgs', 'NamespaceExportSinkTimeoutsArgsDict']]] = None,
                 __props__=None):
        """
        Provisions a namespace export sink.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enabled: A flag indicating whether the export sink is enabled or not.
        :param pulumi.Input[Union['NamespaceExportSinkGcsArgs', 'NamespaceExportSinkGcsArgsDict']] gcs: The GCS configuration details when destination_type is GCS.
        :param pulumi.Input[builtins.str] namespace: The namespace under which the sink is configured. It's needed to be in the format of \\n\\n.\\n\\n
        :param pulumi.Input[Union['NamespaceExportSinkS3Args', 'NamespaceExportSinkS3ArgsDict']] s3: The S3 configuration details when destination_type is S3.
        :param pulumi.Input[builtins.str] sink_name: The unique name of the export sink, it can't be changed once set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NamespaceExportSinkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Provisions a namespace export sink.

        :param str resource_name: The name of the resource.
        :param NamespaceExportSinkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NamespaceExportSinkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[builtins.bool]] = None,
                 gcs: Optional[pulumi.Input[Union['NamespaceExportSinkGcsArgs', 'NamespaceExportSinkGcsArgsDict']]] = None,
                 namespace: Optional[pulumi.Input[builtins.str]] = None,
                 s3: Optional[pulumi.Input[Union['NamespaceExportSinkS3Args', 'NamespaceExportSinkS3ArgsDict']]] = None,
                 sink_name: Optional[pulumi.Input[builtins.str]] = None,
                 timeouts: Optional[pulumi.Input[Union['NamespaceExportSinkTimeoutsArgs', 'NamespaceExportSinkTimeoutsArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NamespaceExportSinkArgs.__new__(NamespaceExportSinkArgs)

            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["gcs"] = gcs
            if namespace is None and not opts.urn:
                raise TypeError("Missing required property 'namespace'")
            __props__.__dict__["namespace"] = namespace
            __props__.__dict__["s3"] = s3
            if sink_name is None and not opts.urn:
                raise TypeError("Missing required property 'sink_name'")
            __props__.__dict__["sink_name"] = sink_name
            __props__.__dict__["timeouts"] = timeouts
        super(NamespaceExportSink, __self__).__init__(
            'temporalcloud:index/namespaceExportSink:NamespaceExportSink',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[builtins.bool]] = None,
            gcs: Optional[pulumi.Input[Union['NamespaceExportSinkGcsArgs', 'NamespaceExportSinkGcsArgsDict']]] = None,
            namespace: Optional[pulumi.Input[builtins.str]] = None,
            s3: Optional[pulumi.Input[Union['NamespaceExportSinkS3Args', 'NamespaceExportSinkS3ArgsDict']]] = None,
            sink_name: Optional[pulumi.Input[builtins.str]] = None,
            timeouts: Optional[pulumi.Input[Union['NamespaceExportSinkTimeoutsArgs', 'NamespaceExportSinkTimeoutsArgsDict']]] = None) -> 'NamespaceExportSink':
        """
        Get an existing NamespaceExportSink resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[builtins.bool] enabled: A flag indicating whether the export sink is enabled or not.
        :param pulumi.Input[Union['NamespaceExportSinkGcsArgs', 'NamespaceExportSinkGcsArgsDict']] gcs: The GCS configuration details when destination_type is GCS.
        :param pulumi.Input[builtins.str] namespace: The namespace under which the sink is configured. It's needed to be in the format of \\n\\n.\\n\\n
        :param pulumi.Input[Union['NamespaceExportSinkS3Args', 'NamespaceExportSinkS3ArgsDict']] s3: The S3 configuration details when destination_type is S3.
        :param pulumi.Input[builtins.str] sink_name: The unique name of the export sink, it can't be changed once set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NamespaceExportSinkState.__new__(_NamespaceExportSinkState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["gcs"] = gcs
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["s3"] = s3
        __props__.__dict__["sink_name"] = sink_name
        __props__.__dict__["timeouts"] = timeouts
        return NamespaceExportSink(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[builtins.bool]:
        """
        A flag indicating whether the export sink is enabled or not.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def gcs(self) -> pulumi.Output[Optional['outputs.NamespaceExportSinkGcs']]:
        """
        The GCS configuration details when destination_type is GCS.
        """
        return pulumi.get(self, "gcs")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[builtins.str]:
        """
        The namespace under which the sink is configured. It's needed to be in the format of \\n\\n.\\n\\n
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Output[Optional['outputs.NamespaceExportSinkS3']]:
        """
        The S3 configuration details when destination_type is S3.
        """
        return pulumi.get(self, "s3")

    @property
    @pulumi.getter(name="sinkName")
    def sink_name(self) -> pulumi.Output[builtins.str]:
        """
        The unique name of the export sink, it can't be changed once set.
        """
        return pulumi.get(self, "sink_name")

    @property
    @pulumi.getter
    def timeouts(self) -> pulumi.Output[Optional['outputs.NamespaceExportSinkTimeouts']]:
        return pulumi.get(self, "timeouts")

