Metadata-Version: 2.3
Name: hgraph
Version: 0.4.36
Summary:  A functional reactive platform used to process time-series streams. Provides support for backtest (simulation) and realtime time-series processing. Using a forward propagation graph with a microtask scheduler for the runtime engine. 
License: MIT
Keywords: reactive,graph,fpg,forward propogating graph,time series,functional reactive programming,frp,functional,time-series
Author: Howard Henson
Author-email: howard@henson.me.uk
Requires-Python: >=3.11
Classifier: Development Status :: 3 - Alpha
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Programming Language :: Python :: Implementation :: CPython
Provides-Extra: notebook
Provides-Extra: web
Requires-Dist: duckdb
Requires-Dist: frozendict (>=2.3.10)
Requires-Dist: matplotlib ; extra == "notebook"
Requires-Dist: multimethod
Requires-Dist: numpy (>=1.23)
Requires-Dist: ordered-set (>=4.1.0)
Requires-Dist: pandas ; extra == "web"
Requires-Dist: perspective-python (<4.0.0) ; extra == "web"
Requires-Dist: polars (>=1.0)
Requires-Dist: psutil
Requires-Dist: pyarrow (>=16.1.0)
Requires-Dist: pycurl ; extra == "web"
Requires-Dist: requests ; extra == "web"
Requires-Dist: sortedcontainers (>=2.4.0)
Requires-Dist: sqlalchemy
Requires-Dist: tornado ; extra == "web"
Requires-Dist: typing-extensions
Project-URL: Changelog, https://github.com/hhenson/hgraph/blob/main/CHANGELOG.md
Project-URL: Documentation, https://github.com/hhenson/hgraph/blob/main/docs/index.md
Project-URL: Homepage, https://github.com/hhenson/hgraph
Project-URL: Issues, https://github.com/hhenson/hgraph/blob/main/ISSUES.md
Project-URL: Repository, https://github.com/hhenson/hgraph.git
Description-Content-Type: text/markdown

# hgraph
A functional reactive programming engine with a Python front-end.

This provides a DSL and runtime to support the computation of results over time, featuring
a graph based directed acyclic dependency graph and the concept of time-series properties.
The language is function-based, and promotes composition to extend behaviour.

Here is a simple example:

```python
from hgraph import graph, run_graph, const
from hgraph.nodes import debug_print

@graph
def main():
    a = const(1)
    c = a + 2
    debug_print("a + 2", c)

run_graph(main)
```
Results in:
```
[1970-01-01 00:00:00.000385][1970-01-01 00:00:00.000001] a + 2: 3
```

See [this](https://hgraph.readthedocs.io/en/latest/) for more information.

## Development

The project is currently configured to make use of [Poetry](https://python-poetry.org) for dependency management. 
Take a look at the website to see how best to install the tool.

Here are some useful commands:

First, this will cause the virtual environment to be installed in the same folder as the project (in .venv folder)

```bash
poetry config virtualenvs.in-project true
```

Use this command to set the version of Python to make use of if you want a specific version of Python.

```bash
poetry env use 3.11
```

Then use the following command to install the project and its dependencies. Note that the ``--with docs`` installs
the dependencies to build the documentation set which is not required otherwise, also the ``--all-extras`` is only
required for the adaptors.

```bash
poetry install --with docs --all-extras
```

If you did not use the first command, you can find the location of the installation using:

```bash
poetry env info
```

PyCharm can make use of poetry to ``setup`` the project.

### Run Tests

```bash
# No Coverage
poetry run pytest
```

```bash
# Generate Coverage Report
poetry run pytest --cov=your_package_name --cov-report=xml
```

