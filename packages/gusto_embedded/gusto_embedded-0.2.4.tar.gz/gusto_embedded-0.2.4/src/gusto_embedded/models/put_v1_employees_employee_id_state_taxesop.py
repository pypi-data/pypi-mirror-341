"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .versionheader import VersionHeader
from gusto_embedded.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from gusto_embedded.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    RequestMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import Any, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


PutV1EmployeesEmployeeIDStateTaxesValueTypedDict = TypeAliasType(
    "PutV1EmployeesEmployeeIDStateTaxesValueTypedDict", Union[str, float, bool]
)


PutV1EmployeesEmployeeIDStateTaxesValue = TypeAliasType(
    "PutV1EmployeesEmployeeIDStateTaxesValue", Union[str, float, bool]
)


class AnswersTypedDict(TypedDict):
    value: Nullable[PutV1EmployeesEmployeeIDStateTaxesValueTypedDict]
    valid_from: str
    valid_up_to: NotRequired[Nullable[Any]]


class Answers(BaseModel):
    value: Nullable[PutV1EmployeesEmployeeIDStateTaxesValue]

    valid_from: str

    valid_up_to: OptionalNullable[Any] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["valid_up_to"]
        nullable_fields = ["value", "valid_up_to"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class QuestionsTypedDict(TypedDict):
    key: str
    answers: NotRequired[List[AnswersTypedDict]]


class Questions(BaseModel):
    key: str

    answers: Optional[List[Answers]] = None


class StatesTypedDict(TypedDict):
    state: str
    questions: NotRequired[List[QuestionsTypedDict]]


class States(BaseModel):
    state: str

    questions: Optional[List[Questions]] = None


class PutV1EmployeesEmployeeIDStateTaxesRequestBodyTypedDict(TypedDict):
    states: List[StatesTypedDict]


class PutV1EmployeesEmployeeIDStateTaxesRequestBody(BaseModel):
    states: List[States]


class PutV1EmployeesEmployeeIDStateTaxesRequestTypedDict(TypedDict):
    employee_uuid: str
    r"""The UUID of the employee"""
    request_body: PutV1EmployeesEmployeeIDStateTaxesRequestBodyTypedDict
    x_gusto_api_version: NotRequired[VersionHeader]
    r"""Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used."""


class PutV1EmployeesEmployeeIDStateTaxesRequest(BaseModel):
    employee_uuid: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The UUID of the employee"""

    request_body: Annotated[
        PutV1EmployeesEmployeeIDStateTaxesRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    x_gusto_api_version: Annotated[
        Optional[VersionHeader],
        pydantic.Field(alias="X-Gusto-API-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = VersionHeader.TWO_THOUSAND_AND_TWENTY_FOUR_MINUS_04_MINUS_01
    r"""Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used."""
