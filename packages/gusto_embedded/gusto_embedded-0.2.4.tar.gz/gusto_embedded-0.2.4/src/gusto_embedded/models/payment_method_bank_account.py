"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gusto_embedded.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class PaymentMethodBankAccountTypedDict(TypedDict):
    r"""Representation of a bank account item"""

    uuid: str
    r"""The bank account ID"""
    name: NotRequired[str]
    r"""The bank account name"""
    hidden_account_number: NotRequired[str]
    r"""Masked bank account number"""
    priority: NotRequired[int]
    r"""The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential."""
    split_amount: NotRequired[Nullable[int]]
    r"""The cents amount allocated for each payment split"""


class PaymentMethodBankAccount(BaseModel):
    r"""Representation of a bank account item"""

    uuid: str
    r"""The bank account ID"""

    name: Optional[str] = None
    r"""The bank account name"""

    hidden_account_number: Optional[str] = None
    r"""Masked bank account number"""

    priority: Optional[int] = None
    r"""The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential."""

    split_amount: OptionalNullable[int] = UNSET
    r"""The cents amount allocated for each payment split"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name", "hidden_account_number", "priority", "split_amount"]
        nullable_fields = ["split_amount"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
