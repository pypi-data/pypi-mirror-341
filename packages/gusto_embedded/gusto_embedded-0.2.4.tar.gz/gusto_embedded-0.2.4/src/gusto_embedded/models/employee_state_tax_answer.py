"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gusto_embedded.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, Optional, Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


ValueTypedDict = TypeAliasType("ValueTypedDict", Union[str, float, bool])
r"""The answer to the corresponding question - this may be a string, number, boolean, or null."""


Value = TypeAliasType("Value", Union[str, float, bool])
r"""The answer to the corresponding question - this may be a string, number, boolean, or null."""


class EmployeeStateTaxAnswerTypedDict(TypedDict):
    value: NotRequired[Nullable[ValueTypedDict]]
    r"""The answer to the corresponding question - this may be a string, number, boolean, or null."""
    valid_from: NotRequired[str]
    r"""The effective date of the answer - currently always “2010-01-01”."""
    valid_up_to: NotRequired[Nullable[Any]]
    r"""The effective end date of the answer - currently always null."""


class EmployeeStateTaxAnswer(BaseModel):
    value: OptionalNullable[Value] = UNSET
    r"""The answer to the corresponding question - this may be a string, number, boolean, or null."""

    valid_from: Optional[str] = None
    r"""The effective date of the answer - currently always “2010-01-01”."""

    valid_up_to: OptionalNullable[Any] = UNSET
    r"""The effective end date of the answer - currently always null."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["value", "valid_from", "valid_up_to"]
        nullable_fields = ["value", "valid_up_to"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
