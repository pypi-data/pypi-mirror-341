"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gusto_embedded.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class PossibleLiabilitiesTypedDict(TypedDict):
    liability_amount: NotRequired[str]
    r"""Liability amount."""
    payroll_check_date: NotRequired[Nullable[str]]
    r"""The external payroll check date."""
    external_payroll_uuid: NotRequired[Nullable[str]]
    r"""The UUID of the external payroll."""


class PossibleLiabilities(BaseModel):
    liability_amount: Optional[str] = None
    r"""Liability amount."""

    payroll_check_date: OptionalNullable[str] = UNSET
    r"""The external payroll check date."""

    external_payroll_uuid: OptionalNullable[str] = UNSET
    r"""The UUID of the external payroll."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "liability_amount",
            "payroll_check_date",
            "external_payroll_uuid",
        ]
        nullable_fields = ["payroll_check_date", "external_payroll_uuid"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class TaxLiabilitiesSelectionsTypedDict(TypedDict):
    r"""Example response"""

    tax_id: NotRequired[int]
    r"""The ID of the tax."""
    tax_name: NotRequired[str]
    r"""The name of the tax."""
    last_unpaid_external_payroll_uuid: NotRequired[Nullable[str]]
    r"""The UUID of last unpaid external payroll."""
    possible_liabilities: NotRequired[List[PossibleLiabilitiesTypedDict]]
    r"""Possible tax liabilities selections."""


class TaxLiabilitiesSelections(BaseModel):
    r"""Example response"""

    tax_id: Optional[int] = None
    r"""The ID of the tax."""

    tax_name: Optional[str] = None
    r"""The name of the tax."""

    last_unpaid_external_payroll_uuid: OptionalNullable[str] = UNSET
    r"""The UUID of last unpaid external payroll."""

    possible_liabilities: Optional[List[PossibleLiabilities]] = None
    r"""Possible tax liabilities selections."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "tax_id",
            "tax_name",
            "last_unpaid_external_payroll_uuid",
            "possible_liabilities",
        ]
        nullable_fields = ["last_unpaid_external_payroll_uuid"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
