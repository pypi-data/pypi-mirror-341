"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .tax_requirement import TaxRequirement, TaxRequirementTypedDict
from gusto_embedded.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class TaxRequirementSetTypedDict(TypedDict):
    state: NotRequired[str]
    r"""One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)"""
    key: NotRequired[str]
    r"""An identifier for a set of requirements. A list of requirement sets can contain multiple sets with the same `key` and different `effective_from` values."""
    label: NotRequired[str]
    r"""Customer facing label for the requirement set, e.g. \"Registrations\" """
    effective_from: NotRequired[Nullable[str]]
    r"""An ISO 8601 formatted date representing the date values became effective. Some requirement sets are effective dated, while others are not. Multiple requirement sets for the same state/key can/will exist with unique effective dates. If a requirement set is has an `effective_from` value, all requirement sets with the same key will also have an `effective_from` value."""
    requirements: NotRequired[List[TaxRequirementTypedDict]]


class TaxRequirementSet(BaseModel):
    state: Optional[str] = None
    r"""One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)"""

    key: Optional[str] = None
    r"""An identifier for a set of requirements. A list of requirement sets can contain multiple sets with the same `key` and different `effective_from` values."""

    label: Optional[str] = None
    r"""Customer facing label for the requirement set, e.g. \"Registrations\" """

    effective_from: OptionalNullable[str] = UNSET
    r"""An ISO 8601 formatted date representing the date values became effective. Some requirement sets are effective dated, while others are not. Multiple requirement sets for the same state/key can/will exist with unique effective dates. If a requirement set is has an `effective_from` value, all requirement sets with the same key will also have an `effective_from` value."""

    requirements: Optional[List[TaxRequirement]] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["state", "key", "label", "effective_from", "requirements"]
        nullable_fields = ["effective_from"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
