"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from gusto_embedded.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class PayScheduleAssignmentBodyType(str, Enum):
    r"""The pay schedule assignment type."""

    SINGLE = "single"
    HOURLY_SALARIED = "hourly_salaried"
    BY_EMPLOYEE = "by_employee"
    BY_DEPARTMENT = "by_department"


class EmployeesModelTypedDict(TypedDict):
    employee_uuid: NotRequired[str]
    r"""Employee UUID"""
    pay_schedule_uuid: NotRequired[str]
    r"""Pay schedule UUID"""


class EmployeesModel(BaseModel):
    employee_uuid: Optional[str] = None
    r"""Employee UUID"""

    pay_schedule_uuid: Optional[str] = None
    r"""Pay schedule UUID"""


class DepartmentsModelTypedDict(TypedDict):
    department_uuid: NotRequired[str]
    r"""Department UUID"""
    pay_schedule_uuid: NotRequired[str]
    r"""Pay schedule UUID"""


class DepartmentsModel(BaseModel):
    department_uuid: Optional[str] = None
    r"""Department UUID"""

    pay_schedule_uuid: Optional[str] = None
    r"""Pay schedule UUID"""


class PayScheduleAssignmentBodyTypedDict(TypedDict):
    type: Nullable[PayScheduleAssignmentBodyType]
    r"""The pay schedule assignment type."""
    hourly_pay_schedule_uuid: NotRequired[str]
    r"""Pay schedule for hourly employees."""
    salaried_pay_schedule_uuid: NotRequired[str]
    r"""Pay schedule for salaried employees."""
    default_pay_schedule_uuid: NotRequired[str]
    r"""Default pay schedule for employees."""
    partial_assignment: NotRequired[bool]
    r"""Indicates whether the request provides pay schedule assignments for a partial list of employees or departments of the company. By default, this is set to false."""
    employees: NotRequired[List[EmployeesModelTypedDict]]
    r"""List of employees and their pay schedules."""
    departments: NotRequired[List[DepartmentsModelTypedDict]]
    r"""List of departments and their pay schedules."""


class PayScheduleAssignmentBody(BaseModel):
    type: Nullable[PayScheduleAssignmentBodyType]
    r"""The pay schedule assignment type."""

    hourly_pay_schedule_uuid: Optional[str] = None
    r"""Pay schedule for hourly employees."""

    salaried_pay_schedule_uuid: Optional[str] = None
    r"""Pay schedule for salaried employees."""

    default_pay_schedule_uuid: Optional[str] = None
    r"""Default pay schedule for employees."""

    partial_assignment: Optional[bool] = None
    r"""Indicates whether the request provides pay schedule assignments for a partial list of employees or departments of the company. By default, this is set to false."""

    employees: Optional[List[EmployeesModel]] = None
    r"""List of employees and their pay schedules."""

    departments: Optional[List[DepartmentsModel]] = None
    r"""List of departments and their pay schedules."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "hourly_pay_schedule_uuid",
            "salaried_pay_schedule_uuid",
            "default_pay_schedule_uuid",
            "partial_assignment",
            "employees",
            "departments",
        ]
        nullable_fields = ["type"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
