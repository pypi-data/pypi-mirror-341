"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .custom_field_type import CustomFieldType
from gusto_embedded.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class EmployeeCustomFieldTypedDict(TypedDict):
    r"""A custom field of an employee"""

    id: str
    company_custom_field_id: str
    r"""This is the id of the response object from when you get the company custom fields"""
    name: str
    type: CustomFieldType
    r"""Input type for the custom field."""
    value: str
    description: NotRequired[str]
    selection_options: NotRequired[Nullable[List[str]]]
    r"""An array of options for fields of type radio. Otherwise, null."""


class EmployeeCustomField(BaseModel):
    r"""A custom field of an employee"""

    id: str

    company_custom_field_id: str
    r"""This is the id of the response object from when you get the company custom fields"""

    name: str

    type: CustomFieldType
    r"""Input type for the custom field."""

    value: str

    description: Optional[str] = None

    selection_options: OptionalNullable[List[str]] = UNSET
    r"""An array of options for fields of type radio. Otherwise, null."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["description", "selection_options"]
        nullable_fields = ["selection_options"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
