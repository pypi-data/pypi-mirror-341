"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .versionheader import VersionHeader
from gusto_embedded.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from gusto_embedded.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    RequestMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PutV1CompaniesCompanyUUIDTaxRequirementsStateRequirementsTypedDict(TypedDict):
    key: NotRequired[str]
    r"""An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set."""
    value: NotRequired[Nullable[str]]


class PutV1CompaniesCompanyUUIDTaxRequirementsStateRequirements(BaseModel):
    key: Optional[str] = None
    r"""An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set."""

    value: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["key", "value"]
        nullable_fields = ["value"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class RequirementSetsTypedDict(TypedDict):
    key: NotRequired[str]
    r"""An identifier for a set of requirements. A list of requirement sets can contain multiple sets with the same `key` and different `effective_from` values."""
    effective_from: NotRequired[Nullable[str]]
    r"""An ISO 8601 formatted date representing the date values became effective. Some requirement sets are effective dated, while others are not. Multiple requirement sets for the same state/key can/will exist with unique effective dates. If a requirement set is has an `effective_from` value, all requirement sets with the same key will also have an `effective_from` value."""
    state: NotRequired[str]
    r"""One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)"""
    requirements: NotRequired[
        List[PutV1CompaniesCompanyUUIDTaxRequirementsStateRequirementsTypedDict]
    ]


class RequirementSets(BaseModel):
    key: Optional[str] = None
    r"""An identifier for a set of requirements. A list of requirement sets can contain multiple sets with the same `key` and different `effective_from` values."""

    effective_from: OptionalNullable[str] = UNSET
    r"""An ISO 8601 formatted date representing the date values became effective. Some requirement sets are effective dated, while others are not. Multiple requirement sets for the same state/key can/will exist with unique effective dates. If a requirement set is has an `effective_from` value, all requirement sets with the same key will also have an `effective_from` value."""

    state: Optional[str] = None
    r"""One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)"""

    requirements: Optional[
        List[PutV1CompaniesCompanyUUIDTaxRequirementsStateRequirements]
    ] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["key", "effective_from", "state", "requirements"]
        nullable_fields = ["effective_from"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PutV1CompaniesCompanyUUIDTaxRequirementsStateRequestBodyTypedDict(TypedDict):
    requirement_sets: NotRequired[List[RequirementSetsTypedDict]]


class PutV1CompaniesCompanyUUIDTaxRequirementsStateRequestBody(BaseModel):
    requirement_sets: Optional[List[RequirementSets]] = None


class PutV1CompaniesCompanyUUIDTaxRequirementsStateRequestTypedDict(TypedDict):
    company_uuid: str
    r"""The UUID of the company"""
    state: str
    r"""2-letter US state abbreviation"""
    request_body: PutV1CompaniesCompanyUUIDTaxRequirementsStateRequestBodyTypedDict
    x_gusto_api_version: NotRequired[VersionHeader]
    r"""Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used."""


class PutV1CompaniesCompanyUUIDTaxRequirementsStateRequest(BaseModel):
    company_uuid: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The UUID of the company"""

    state: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""2-letter US state abbreviation"""

    request_body: Annotated[
        PutV1CompaniesCompanyUUIDTaxRequirementsStateRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    x_gusto_api_version: Annotated[
        Optional[VersionHeader],
        pydantic.Field(alias="X-Gusto-API-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = VersionHeader.TWO_THOUSAND_AND_TWENTY_FOUR_MINUS_04_MINUS_01
    r"""Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used."""
