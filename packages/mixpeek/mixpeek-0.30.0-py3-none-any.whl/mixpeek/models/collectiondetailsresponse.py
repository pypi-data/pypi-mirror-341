"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from mixpeek.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class CollectionDetailsResponseMetadataTypedDict(TypedDict):
    pass


class CollectionDetailsResponseMetadata(BaseModel):
    pass


class CollectionDetailsResponseTypedDict(TypedDict):
    collection_id: str
    collection_name: str
    count: NotRequired[Nullable[int]]
    last_updated: NotRequired[Nullable[datetime]]
    preview_url: NotRequired[Nullable[str]]
    metadata: NotRequired[Nullable[CollectionDetailsResponseMetadataTypedDict]]
    unique_hashes: NotRequired[Nullable[int]]


class CollectionDetailsResponse(BaseModel):
    collection_id: str

    collection_name: str

    count: OptionalNullable[int] = UNSET

    last_updated: OptionalNullable[datetime] = UNSET

    preview_url: OptionalNullable[str] = UNSET

    metadata: OptionalNullable[CollectionDetailsResponseMetadata] = UNSET

    unique_hashes: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "count",
            "last_updated",
            "preview_url",
            "metadata",
            "unique_hashes",
        ]
        nullable_fields = [
            "count",
            "last_updated",
            "preview_url",
            "metadata",
            "unique_hashes",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
