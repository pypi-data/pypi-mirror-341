# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ambient_backend_api_client.models.service import Service

class TestService(unittest.TestCase):
    """Service unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Service:
        """Test Service
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Service`
        """
        model = Service()
        if include_optional:
            return Service(
                id = 56,
                name = '',
                resource_type = 'cluster',
                description = '',
                org_id = 56,
                user_id = 56,
                desired_state = 'created',
                requested_service_spec = ambient_backend_api_client.models.requested_service_spec.RequestedServiceSpec(
                    id = 56, 
                    service_id = 56, 
                    image = '', 
                    tags = [
                        ''
                        ], 
                    ports = [
                        ''
                        ], 
                    replicas = 56, 
                    labels = [
                        ''
                        ], 
                    env_vars = [
                        ''
                        ], 
                    hostname = '', 
                    mounts = [
                        ''
                        ], 
                    networks = [
                        ''
                        ], )
            )
        else:
            return Service(
                name = '',
                requested_service_spec = ambient_backend_api_client.models.requested_service_spec.RequestedServiceSpec(
                    id = 56, 
                    service_id = 56, 
                    image = '', 
                    tags = [
                        ''
                        ], 
                    ports = [
                        ''
                        ], 
                    replicas = 56, 
                    labels = [
                        ''
                        ], 
                    env_vars = [
                        ''
                        ], 
                    hostname = '', 
                    mounts = [
                        ''
                        ], 
                    networks = [
                        ''
                        ], ),
        )
        """

    def testService(self):
        """Test Service"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
