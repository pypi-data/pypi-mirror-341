# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ambient_backend_api_client.models.notification_list import NotificationList

class TestNotificationList(unittest.TestCase):
    """NotificationList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NotificationList:
        """Test NotificationList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NotificationList`
        """
        model = NotificationList()
        if include_optional:
            return NotificationList(
                count = 56,
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                results = [
                    ambient_backend_api_client.models.notification.Notification(
                        id = 56, 
                        name = '', 
                        resource_type = null, 
                        description = '', 
                        org_id = 56, 
                        user_id = 56, 
                        message = '', 
                        severity = 'info', 
                        target_resource_id = '', 
                        target_resource_type = 'cluster', 
                        timestamp = 56, 
                        read = True, )
                    ]
            )
        else:
            return NotificationList(
                count = 56,
                results = [
                    ambient_backend_api_client.models.notification.Notification(
                        id = 56, 
                        name = '', 
                        resource_type = null, 
                        description = '', 
                        org_id = 56, 
                        user_id = 56, 
                        message = '', 
                        severity = 'info', 
                        target_resource_id = '', 
                        target_resource_type = 'cluster', 
                        timestamp = 56, 
                        read = True, )
                    ],
        )
        """

    def testNotificationList(self):
        """Test NotificationList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
