# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ambient_backend_api_client.models.command_create import CommandCreate

class TestCommandCreate(unittest.TestCase):
    """CommandCreate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CommandCreate:
        """Test CommandCreate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CommandCreate`
        """
        model = CommandCreate()
        if include_optional:
            return CommandCreate(
                command_list = [
                    ''
                    ],
                command_str = '',
                timeout = 56,
                store_output = True,
                workdir = '',
                os_user = '',
                env_vars = {
                    'key' : ''
                    },
                shell = True,
                node_options = ambient_backend_api_client.models.node_select_options.NodeSelectOptions(
                    node_ids = [
                        56
                        ], 
                    node_names = [
                        ''
                        ], 
                    tags = [
                        ''
                        ], ),
                cluster_options = ambient_backend_api_client.models.cluster_select_options.ClusterSelectOptions(
                    cluster_ids = [
                        56
                        ], 
                    cluster_names = [
                        ''
                        ], 
                    tags = [
                        ''
                        ], 
                    run_type = null, ),
                command = None
            )
        else:
            return CommandCreate(
                command = None,
        )
        """

    def testCommandCreate(self):
        """Test CommandCreate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
