# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ambient_backend_api_client.models.post_registries_creds_trigger_response import PostRegistriesCredsTriggerResponse

class TestPostRegistriesCredsTriggerResponse(unittest.TestCase):
    """PostRegistriesCredsTriggerResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PostRegistriesCredsTriggerResponse:
        """Test PostRegistriesCredsTriggerResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PostRegistriesCredsTriggerResponse`
        """
        model = PostRegistriesCredsTriggerResponse()
        if include_optional:
            return PostRegistriesCredsTriggerResponse(
                request_id = 56,
                requested_ts = '2025-04-17T03:38:54.771014',
                location_root = 'http://localhost:8001/requests/',
                refresh_interval = 56,
                location = '',
                creds = ambient_backend_api_client.models.container_registry_auth.ContainerRegistryAuth(
                    username = '', 
                    password = '', 
                    id = 56, 
                    registry_id = 56, ),
                request = ambient_backend_api_client.models.request.Request(
                    id = 56, 
                    name = '', 
                    resource_type = null, 
                    description = '', 
                    org_id = 56, 
                    user_id = 56, 
                    status = null, 
                    error = '', 
                    requested_ts = '', 
                    started_ts = '', 
                    failed_ts = '', 
                    completed_ts = '', 
                    notes = [
                        ''
                        ], 
                    data = null, 
                    registry_id = 56, ),
                event = ambient_backend_api_client.models.event.Event(
                    root = '', 
                    event_label = 'TEST_LABEL', 
                    event_type = 'notification', 
                    resource_type = 'cluster', 
                    resource_id = 56, 
                    action = 'create', 
                    timestamp = 1.337, 
                    event_data = ambient_backend_api_client.models.event_data.Event Data(), 
                    request_id = 56, )
            )
        else:
            return PostRegistriesCredsTriggerResponse(
                request_id = 56,
                creds = ambient_backend_api_client.models.container_registry_auth.ContainerRegistryAuth(
                    username = '', 
                    password = '', 
                    id = 56, 
                    registry_id = 56, ),
                request = ambient_backend_api_client.models.request.Request(
                    id = 56, 
                    name = '', 
                    resource_type = null, 
                    description = '', 
                    org_id = 56, 
                    user_id = 56, 
                    status = null, 
                    error = '', 
                    requested_ts = '', 
                    started_ts = '', 
                    failed_ts = '', 
                    completed_ts = '', 
                    notes = [
                        ''
                        ], 
                    data = null, 
                    registry_id = 56, ),
                event = ambient_backend_api_client.models.event.Event(
                    root = '', 
                    event_label = 'TEST_LABEL', 
                    event_type = 'notification', 
                    resource_type = 'cluster', 
                    resource_id = 56, 
                    action = 'create', 
                    timestamp = 1.337, 
                    event_data = ambient_backend_api_client.models.event_data.Event Data(), 
                    request_id = 56, ),
        )
        """

    def testPostRegistriesCredsTriggerResponse(self):
        """Test PostRegistriesCredsTriggerResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
