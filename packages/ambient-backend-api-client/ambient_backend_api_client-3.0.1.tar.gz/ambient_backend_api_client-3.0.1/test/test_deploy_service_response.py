# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ambient_backend_api_client.models.deploy_service_response import DeployServiceResponse

class TestDeployServiceResponse(unittest.TestCase):
    """DeployServiceResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DeployServiceResponse:
        """Test DeployServiceResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DeployServiceResponse`
        """
        model = DeployServiceResponse()
        if include_optional:
            return DeployServiceResponse(
                request_id = 56,
                requested_ts = '2025-04-17T03:38:54.771014',
                location_root = 'http://localhost:8001/requests/',
                refresh_interval = 56,
                location = '',
                service = ambient_backend_api_client.models.service.Service(
                    id = 56, 
                    name = '', 
                    resource_type = null, 
                    description = '', 
                    org_id = 56, 
                    user_id = 56, 
                    desired_state = null, 
                    requested_service_spec = ambient_backend_api_client.models.requested_service_spec.RequestedServiceSpec(
                        id = 56, 
                        service_id = 56, 
                        image = '', 
                        tags = [
                            ''
                            ], 
                        ports = [
                            ''
                            ], 
                        replicas = 56, 
                        labels = [
                            ''
                            ], 
                        env_vars = [
                            ''
                            ], 
                        hostname = '', 
                        mounts = [
                            ''
                            ], 
                        networks = [
                            ''
                            ], ), ),
                request = ambient_backend_api_client.models.request.Request(
                    id = 56, 
                    name = '', 
                    resource_type = null, 
                    description = '', 
                    org_id = 56, 
                    user_id = 56, 
                    status = null, 
                    error = '', 
                    requested_ts = '', 
                    started_ts = '', 
                    failed_ts = '', 
                    completed_ts = '', 
                    notes = [
                        ''
                        ], 
                    data = null, 
                    registry_id = 56, )
            )
        else:
            return DeployServiceResponse(
                request_id = 56,
                service = ambient_backend_api_client.models.service.Service(
                    id = 56, 
                    name = '', 
                    resource_type = null, 
                    description = '', 
                    org_id = 56, 
                    user_id = 56, 
                    desired_state = null, 
                    requested_service_spec = ambient_backend_api_client.models.requested_service_spec.RequestedServiceSpec(
                        id = 56, 
                        service_id = 56, 
                        image = '', 
                        tags = [
                            ''
                            ], 
                        ports = [
                            ''
                            ], 
                        replicas = 56, 
                        labels = [
                            ''
                            ], 
                        env_vars = [
                            ''
                            ], 
                        hostname = '', 
                        mounts = [
                            ''
                            ], 
                        networks = [
                            ''
                            ], ), ),
                request = ambient_backend_api_client.models.request.Request(
                    id = 56, 
                    name = '', 
                    resource_type = null, 
                    description = '', 
                    org_id = 56, 
                    user_id = 56, 
                    status = null, 
                    error = '', 
                    requested_ts = '', 
                    started_ts = '', 
                    failed_ts = '', 
                    completed_ts = '', 
                    notes = [
                        ''
                        ], 
                    data = null, 
                    registry_id = 56, ),
        )
        """

    def testDeployServiceResponse(self):
        """Test DeployServiceResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
