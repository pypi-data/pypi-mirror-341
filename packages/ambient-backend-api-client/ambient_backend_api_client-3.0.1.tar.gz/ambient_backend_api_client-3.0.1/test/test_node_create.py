# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ambient_backend_api_client.models.node_create import NodeCreate

class TestNodeCreate(unittest.TestCase):
    """NodeCreate unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NodeCreate:
        """Test NodeCreate
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NodeCreate`
        """
        model = NodeCreate()
        if include_optional:
            return NodeCreate(
                id = 56,
                name = '',
                resource_type = 'cluster',
                description = '',
                org_id = 56,
                user_id = 56,
                role = 'manager',
                live = True,
                architecture = 'arm64',
                interfaces = [
                    ambient_backend_api_client.models.network_interface.NetworkInterface(
                        type = 'ethernet', 
                        name = '', 
                        id = 56, 
                        ipv4_address = '', 
                        ipv6_address = '', 
                        mac_address = '', 
                        netmask = '', 
                        gateway = '', 
                        broadcast = '', )
                    ],
                advertised_interface = 56,
                tags = [
                    ''
                    ],
                last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                error = '',
                certificate = '',
                status = 'pending'
            )
        else:
            return NodeCreate(
                name = '',
                role = 'manager',
                architecture = 'arm64',
        )
        """

    def testNodeCreate(self):
        """Test NodeCreate"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
