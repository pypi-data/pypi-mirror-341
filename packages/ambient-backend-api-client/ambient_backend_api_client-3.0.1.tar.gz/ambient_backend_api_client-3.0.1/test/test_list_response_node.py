# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ambient_backend_api_client.models.list_response_node import ListResponseNode

class TestListResponseNode(unittest.TestCase):
    """ListResponseNode unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ListResponseNode:
        """Test ListResponseNode
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ListResponseNode`
        """
        model = ListResponseNode()
        if include_optional:
            return ListResponseNode(
                timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                count = 56,
                results = [
                    ambient_backend_api_client.models.node.Node(
                        id = 56, 
                        name = '', 
                        resource_type = null, 
                        description = '', 
                        org_id = 56, 
                        user_id = 56, 
                        role = 'manager', 
                        live = True, 
                        architecture = null, 
                        interfaces = [
                            ambient_backend_api_client.models.network_interface.NetworkInterface(
                                type = 'ethernet', 
                                name = '', 
                                id = 56, 
                                ipv4_address = '', 
                                ipv6_address = '', 
                                mac_address = '', 
                                netmask = '', 
                                gateway = '', 
                                broadcast = '', )
                            ], 
                        advertised_interface = 56, 
                        tags = [
                            ''
                            ], 
                        last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        error = '', 
                        certificate = '', 
                        status = 'pending', 
                        cluster_id = 56, 
                        docker_swarm_info = ambient_backend_api_client.models.docker_swarm_info.DockerSwarmInfo(
                            node_id = '', 
                            node_addr = '', 
                            local_node_state = '', 
                            error = '', ), 
                        device_authorization = ambient_backend_api_client.models.device_authorization.DeviceAuthorization(
                            device_code = '', 
                            user_code = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            expires_in = 56, 
                            interval = 56, 
                            verification_uri = 'https://portal.ambientlabsdev.io/device-authorization', 
                            verification_uri_complete = '', 
                            id = 56, 
                            node_id = 56, 
                            user_id = 56, 
                            org_id = 56, ), )
                    ]
            )
        else:
            return ListResponseNode(
                results = [
                    ambient_backend_api_client.models.node.Node(
                        id = 56, 
                        name = '', 
                        resource_type = null, 
                        description = '', 
                        org_id = 56, 
                        user_id = 56, 
                        role = 'manager', 
                        live = True, 
                        architecture = null, 
                        interfaces = [
                            ambient_backend_api_client.models.network_interface.NetworkInterface(
                                type = 'ethernet', 
                                name = '', 
                                id = 56, 
                                ipv4_address = '', 
                                ipv6_address = '', 
                                mac_address = '', 
                                netmask = '', 
                                gateway = '', 
                                broadcast = '', )
                            ], 
                        advertised_interface = 56, 
                        tags = [
                            ''
                            ], 
                        last_seen = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        error = '', 
                        certificate = '', 
                        status = 'pending', 
                        cluster_id = 56, 
                        docker_swarm_info = ambient_backend_api_client.models.docker_swarm_info.DockerSwarmInfo(
                            node_id = '', 
                            node_addr = '', 
                            local_node_state = '', 
                            error = '', ), 
                        device_authorization = ambient_backend_api_client.models.device_authorization.DeviceAuthorization(
                            device_code = '', 
                            user_code = '', 
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            expires_in = 56, 
                            interval = 56, 
                            verification_uri = 'https://portal.ambientlabsdev.io/device-authorization', 
                            verification_uri_complete = '', 
                            id = 56, 
                            node_id = 56, 
                            user_id = 56, 
                            org_id = 56, ), )
                    ],
        )
        """

    def testListResponseNode(self):
        """Test ListResponseNode"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
