# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ambient_backend_api_client.models.aud import Aud
from ambient_backend_api_client.models.realm_access import RealmAccess
from typing import Optional, Set
from typing_extensions import Self

class JWTClaims(BaseModel):
    """
    JWTClaims
    """ # noqa: E501
    iss: StrictStr
    sub: StrictStr
    aud: Optional[Aud] = None
    iat: StrictInt
    exp: StrictInt
    azp: Optional[StrictStr] = None
    scope: Optional[StrictStr] = None
    permissions: Optional[List[StrictStr]] = None
    preferred_username: Optional[StrictStr] = None
    realm_access: Optional[RealmAccess] = None
    roles: Optional[List[StrictStr]] = None
    uid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["iss", "sub", "aud", "iat", "exp", "azp", "scope", "permissions", "preferred_username", "realm_access", "roles", "uid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JWTClaims from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of aud
        if self.aud:
            _dict['aud'] = self.aud.to_dict()
        # override the default output from pydantic by calling `to_dict()` of realm_access
        if self.realm_access:
            _dict['realm_access'] = self.realm_access.to_dict()
        # set to None if azp (nullable) is None
        # and model_fields_set contains the field
        if self.azp is None and "azp" in self.model_fields_set:
            _dict['azp'] = None

        # set to None if scope (nullable) is None
        # and model_fields_set contains the field
        if self.scope is None and "scope" in self.model_fields_set:
            _dict['scope'] = None

        # set to None if permissions (nullable) is None
        # and model_fields_set contains the field
        if self.permissions is None and "permissions" in self.model_fields_set:
            _dict['permissions'] = None

        # set to None if preferred_username (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_username is None and "preferred_username" in self.model_fields_set:
            _dict['preferred_username'] = None

        # set to None if realm_access (nullable) is None
        # and model_fields_set contains the field
        if self.realm_access is None and "realm_access" in self.model_fields_set:
            _dict['realm_access'] = None

        # set to None if roles (nullable) is None
        # and model_fields_set contains the field
        if self.roles is None and "roles" in self.model_fields_set:
            _dict['roles'] = None

        # set to None if uid (nullable) is None
        # and model_fields_set contains the field
        if self.uid is None and "uid" in self.model_fields_set:
            _dict['uid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JWTClaims from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "iss": obj.get("iss"),
            "sub": obj.get("sub"),
            "aud": Aud.from_dict(obj["aud"]) if obj.get("aud") is not None else None,
            "iat": obj.get("iat"),
            "exp": obj.get("exp"),
            "azp": obj.get("azp"),
            "scope": obj.get("scope"),
            "permissions": obj.get("permissions"),
            "preferred_username": obj.get("preferred_username"),
            "realm_access": RealmAccess.from_dict(obj["realm_access"]) if obj.get("realm_access") is not None else None,
            "roles": obj.get("roles"),
            "uid": obj.get("uid")
        })
        return _obj


