# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ambient_backend_api_client.models.container_registry import ContainerRegistry
from ambient_backend_api_client.models.device_authorization import DeviceAuthorization
from ambient_backend_api_client.models.docker_swarm_info import DockerSwarmInfo
from ambient_backend_api_client.models.network_interface import NetworkInterface
from ambient_backend_api_client.models.node_architecture_enum import NodeArchitectureEnum
from ambient_backend_api_client.models.node_role_enum import NodeRoleEnum
from ambient_backend_api_client.models.registry_node_association import RegistryNodeAssociation
from ambient_backend_api_client.models.resource_type_enum import ResourceTypeEnum
from ambient_backend_api_client.models.status_enum import StatusEnum
from typing import Optional, Set
from typing_extensions import Self

class NodeWithRegistries(BaseModel):
    """
    NodeWithRegistries
    """ # noqa: E501
    id: Optional[StrictInt] = None
    name: StrictStr
    resource_type: Optional[ResourceTypeEnum] = None
    description: Optional[StrictStr] = None
    org_id: StrictInt
    user_id: StrictInt
    role: NodeRoleEnum
    live: Optional[StrictBool] = Field(default=False, description="Node is live and will respond immediately to commands")
    architecture: NodeArchitectureEnum = Field(description="Node architecture")
    interfaces: Optional[List[NetworkInterface]] = None
    advertised_interface: Optional[StrictInt] = None
    tags: Optional[List[StrictStr]] = None
    last_seen: Optional[datetime] = None
    error: Optional[StrictStr] = None
    certificate: Optional[StrictStr] = None
    status: StatusEnum
    cluster_id: Optional[StrictInt] = None
    docker_swarm_info: Optional[DockerSwarmInfo] = None
    device_authorization: Optional[DeviceAuthorization] = None
    registry_associations: Optional[List[RegistryNodeAssociation]] = None
    registries: Optional[List[ContainerRegistry]] = None
    __properties: ClassVar[List[str]] = ["id", "name", "resource_type", "description", "org_id", "user_id", "role", "live", "architecture", "interfaces", "advertised_interface", "tags", "last_seen", "error", "certificate", "status", "cluster_id", "docker_swarm_info", "device_authorization", "registry_associations", "registries"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NodeWithRegistries from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in interfaces (list)
        _items = []
        if self.interfaces:
            for _item_interfaces in self.interfaces:
                if _item_interfaces:
                    _items.append(_item_interfaces.to_dict())
            _dict['interfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of docker_swarm_info
        if self.docker_swarm_info:
            _dict['docker_swarm_info'] = self.docker_swarm_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of device_authorization
        if self.device_authorization:
            _dict['device_authorization'] = self.device_authorization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in registry_associations (list)
        _items = []
        if self.registry_associations:
            for _item_registry_associations in self.registry_associations:
                if _item_registry_associations:
                    _items.append(_item_registry_associations.to_dict())
            _dict['registry_associations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in registries (list)
        _items = []
        if self.registries:
            for _item_registries in self.registries:
                if _item_registries:
                    _items.append(_item_registries.to_dict())
            _dict['registries'] = _items
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if interfaces (nullable) is None
        # and model_fields_set contains the field
        if self.interfaces is None and "interfaces" in self.model_fields_set:
            _dict['interfaces'] = None

        # set to None if advertised_interface (nullable) is None
        # and model_fields_set contains the field
        if self.advertised_interface is None and "advertised_interface" in self.model_fields_set:
            _dict['advertised_interface'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        # set to None if last_seen (nullable) is None
        # and model_fields_set contains the field
        if self.last_seen is None and "last_seen" in self.model_fields_set:
            _dict['last_seen'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if certificate (nullable) is None
        # and model_fields_set contains the field
        if self.certificate is None and "certificate" in self.model_fields_set:
            _dict['certificate'] = None

        # set to None if cluster_id (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_id is None and "cluster_id" in self.model_fields_set:
            _dict['cluster_id'] = None

        # set to None if docker_swarm_info (nullable) is None
        # and model_fields_set contains the field
        if self.docker_swarm_info is None and "docker_swarm_info" in self.model_fields_set:
            _dict['docker_swarm_info'] = None

        # set to None if device_authorization (nullable) is None
        # and model_fields_set contains the field
        if self.device_authorization is None and "device_authorization" in self.model_fields_set:
            _dict['device_authorization'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NodeWithRegistries from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "resource_type": obj.get("resource_type"),
            "description": obj.get("description"),
            "org_id": obj.get("org_id"),
            "user_id": obj.get("user_id"),
            "role": obj.get("role"),
            "live": obj.get("live") if obj.get("live") is not None else False,
            "architecture": obj.get("architecture"),
            "interfaces": [NetworkInterface.from_dict(_item) for _item in obj["interfaces"]] if obj.get("interfaces") is not None else None,
            "advertised_interface": obj.get("advertised_interface"),
            "tags": obj.get("tags"),
            "last_seen": obj.get("last_seen"),
            "error": obj.get("error"),
            "certificate": obj.get("certificate"),
            "status": obj.get("status"),
            "cluster_id": obj.get("cluster_id"),
            "docker_swarm_info": DockerSwarmInfo.from_dict(obj["docker_swarm_info"]) if obj.get("docker_swarm_info") is not None else None,
            "device_authorization": DeviceAuthorization.from_dict(obj["device_authorization"]) if obj.get("device_authorization") is not None else None,
            "registry_associations": [RegistryNodeAssociation.from_dict(_item) for _item in obj["registry_associations"]] if obj.get("registry_associations") is not None else None,
            "registries": [ContainerRegistry.from_dict(_item) for _item in obj["registries"]] if obj.get("registries") is not None else None
        })
        return _obj


