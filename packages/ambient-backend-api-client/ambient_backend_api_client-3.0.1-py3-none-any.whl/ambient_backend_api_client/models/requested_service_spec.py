# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RequestedServiceSpec(BaseModel):
    """
    RequestedServiceSpec
    """ # noqa: E501
    id: Optional[StrictInt] = None
    service_id: Optional[StrictInt] = None
    image: StrictStr = Field(description="Docker image to deploy")
    tags: Optional[List[StrictStr]] = Field(default=None, description="List of tags to apply to the service")
    ports: Optional[List[StrictStr]] = Field(default=None, description="List of ports to expose")
    replicas: Optional[StrictInt] = None
    labels: Optional[List[StrictStr]] = None
    env_vars: Optional[List[StrictStr]] = None
    hostname: Optional[StrictStr] = None
    mounts: Optional[List[StrictStr]] = None
    networks: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["id", "service_id", "image", "tags", "ports", "replicas", "labels", "env_vars", "hostname", "mounts", "networks"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestedServiceSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if service_id (nullable) is None
        # and model_fields_set contains the field
        if self.service_id is None and "service_id" in self.model_fields_set:
            _dict['service_id'] = None

        # set to None if replicas (nullable) is None
        # and model_fields_set contains the field
        if self.replicas is None and "replicas" in self.model_fields_set:
            _dict['replicas'] = None

        # set to None if labels (nullable) is None
        # and model_fields_set contains the field
        if self.labels is None and "labels" in self.model_fields_set:
            _dict['labels'] = None

        # set to None if env_vars (nullable) is None
        # and model_fields_set contains the field
        if self.env_vars is None and "env_vars" in self.model_fields_set:
            _dict['env_vars'] = None

        # set to None if hostname (nullable) is None
        # and model_fields_set contains the field
        if self.hostname is None and "hostname" in self.model_fields_set:
            _dict['hostname'] = None

        # set to None if mounts (nullable) is None
        # and model_fields_set contains the field
        if self.mounts is None and "mounts" in self.model_fields_set:
            _dict['mounts'] = None

        # set to None if networks (nullable) is None
        # and model_fields_set contains the field
        if self.networks is None and "networks" in self.model_fields_set:
            _dict['networks'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestedServiceSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "service_id": obj.get("service_id"),
            "image": obj.get("image"),
            "tags": obj.get("tags"),
            "ports": obj.get("ports"),
            "replicas": obj.get("replicas"),
            "labels": obj.get("labels"),
            "env_vars": obj.get("env_vars"),
            "hostname": obj.get("hostname"),
            "mounts": obj.get("mounts"),
            "networks": obj.get("networks")
        })
        return _obj


