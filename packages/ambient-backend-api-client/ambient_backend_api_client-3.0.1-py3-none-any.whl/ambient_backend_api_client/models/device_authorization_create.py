# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DeviceAuthorizationCreate(BaseModel):
    """
    DeviceAuthorizationCreate
    """ # noqa: E501
    device_code: Optional[StrictStr] = Field(default=None, description="Device code for authorization")
    user_code: Optional[StrictStr] = Field(default=None, description="User code for authorization")
    created_at: Optional[datetime] = Field(default=None, description="Time when the device authorization was created")
    expires_in: Optional[StrictInt] = Field(default=600, description="Time in seconds until the device authorization expires")
    interval: Optional[StrictInt] = Field(default=5, description="Interval in seconds to poll for the device authorization")
    node_id: Optional[StrictInt] = None
    user_id: Optional[StrictInt] = None
    org_id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["device_code", "user_code", "created_at", "expires_in", "interval", "node_id", "user_id", "org_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DeviceAuthorizationCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if node_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_id is None and "node_id" in self.model_fields_set:
            _dict['node_id'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if org_id (nullable) is None
        # and model_fields_set contains the field
        if self.org_id is None and "org_id" in self.model_fields_set:
            _dict['org_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DeviceAuthorizationCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "device_code": obj.get("device_code"),
            "user_code": obj.get("user_code"),
            "created_at": obj.get("created_at"),
            "expires_in": obj.get("expires_in") if obj.get("expires_in") is not None else 600,
            "interval": obj.get("interval") if obj.get("interval") is not None else 5,
            "node_id": obj.get("node_id"),
            "user_id": obj.get("user_id"),
            "org_id": obj.get("org_id")
        })
        return _obj


