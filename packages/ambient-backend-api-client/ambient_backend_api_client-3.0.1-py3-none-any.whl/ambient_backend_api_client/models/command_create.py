# coding: utf-8

"""
    Ambient API

     This API provides access to Ambient services. It is designed to be used by Ambient applications and services. 

    The version of the OpenAPI document: 0.8.2
    Contact: jose@ambientlabscomputing.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ambient_backend_api_client.models.cluster_select_options import ClusterSelectOptions
from ambient_backend_api_client.models.command1 import Command1
from ambient_backend_api_client.models.node_select_options import NodeSelectOptions
from typing import Optional, Set
from typing_extensions import Self

class CommandCreate(BaseModel):
    """
    CommandCreate
    """ # noqa: E501
    command_list: Optional[List[StrictStr]] = None
    command_str: Optional[StrictStr] = None
    timeout: Optional[StrictInt] = None
    store_output: Optional[StrictBool] = False
    workdir: Optional[StrictStr] = None
    os_user: Optional[StrictStr] = None
    env_vars: Optional[Dict[str, StrictStr]] = None
    shell: Optional[StrictBool] = False
    node_options: Optional[NodeSelectOptions] = None
    cluster_options: Optional[ClusterSelectOptions] = None
    command: Command1
    __properties: ClassVar[List[str]] = ["command_list", "command_str", "timeout", "store_output", "workdir", "os_user", "env_vars", "shell", "node_options", "cluster_options", "command"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CommandCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of node_options
        if self.node_options:
            _dict['node_options'] = self.node_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cluster_options
        if self.cluster_options:
            _dict['cluster_options'] = self.cluster_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of command
        if self.command:
            _dict['command'] = self.command.to_dict()
        # set to None if command_list (nullable) is None
        # and model_fields_set contains the field
        if self.command_list is None and "command_list" in self.model_fields_set:
            _dict['command_list'] = None

        # set to None if command_str (nullable) is None
        # and model_fields_set contains the field
        if self.command_str is None and "command_str" in self.model_fields_set:
            _dict['command_str'] = None

        # set to None if timeout (nullable) is None
        # and model_fields_set contains the field
        if self.timeout is None and "timeout" in self.model_fields_set:
            _dict['timeout'] = None

        # set to None if workdir (nullable) is None
        # and model_fields_set contains the field
        if self.workdir is None and "workdir" in self.model_fields_set:
            _dict['workdir'] = None

        # set to None if os_user (nullable) is None
        # and model_fields_set contains the field
        if self.os_user is None and "os_user" in self.model_fields_set:
            _dict['os_user'] = None

        # set to None if env_vars (nullable) is None
        # and model_fields_set contains the field
        if self.env_vars is None and "env_vars" in self.model_fields_set:
            _dict['env_vars'] = None

        # set to None if node_options (nullable) is None
        # and model_fields_set contains the field
        if self.node_options is None and "node_options" in self.model_fields_set:
            _dict['node_options'] = None

        # set to None if cluster_options (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_options is None and "cluster_options" in self.model_fields_set:
            _dict['cluster_options'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CommandCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "command_list": obj.get("command_list"),
            "command_str": obj.get("command_str"),
            "timeout": obj.get("timeout"),
            "store_output": obj.get("store_output") if obj.get("store_output") is not None else False,
            "workdir": obj.get("workdir"),
            "os_user": obj.get("os_user"),
            "env_vars": obj.get("env_vars"),
            "shell": obj.get("shell") if obj.get("shell") is not None else False,
            "node_options": NodeSelectOptions.from_dict(obj["node_options"]) if obj.get("node_options") is not None else None,
            "cluster_options": ClusterSelectOptions.from_dict(obj["cluster_options"]) if obj.get("cluster_options") is not None else None,
            "command": Command1.from_dict(obj["command"]) if obj.get("command") is not None else None
        })
        return _obj


