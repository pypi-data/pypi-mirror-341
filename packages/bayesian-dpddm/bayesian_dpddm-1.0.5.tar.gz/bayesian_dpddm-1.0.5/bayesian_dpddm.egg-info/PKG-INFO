Metadata-Version: 2.4
Name: bayesian_dpddm
Version: 1.0.5
Summary: Implements Bayesian D-PDDM for Post-Deployment Deterioration Monitoring of ML models.
Author-email: viet <viet@cs.toronto.edu>, sid <sid.arya@mail.utoronto.ca>
License: MIT License
        
        Copyright (c) 2025 Viet Nguyen
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: homepage, https://github.com/teivng/bayesian_dpddm
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.26.4
Requires-Dist: torch>=2.5.1
Requires-Dist: torchvision>=0.20.1
Requires-Dist: vbll>=0.2.6
Requires-Dist: tqdm>=4.66.5
Requires-Dist: matplotlib>=3.10.0
Requires-Dist: pillow>=11.0.0
Requires-Dist: wandb>=0.19.6
Requires-Dist: hydra-core>=1.3.2
Requires-Dist: twine
Requires-Dist: build
Dynamic: license-file

# Bayesian D-PDDM

Bayesian implementation of the D-PDDM algorithm for post-deployment deterioration monitoring. Bayesian D-PDDM is a Bayesian approximation to the D-PDDM algorithm which provably monitors model deterioration at deployment time. Bayesian D-PDDM:

- Flags deteriorating shifts in the unsupervised deployment data distribution
- Resists flagging non-deteriorating shifts, unlike classical OOD detection leveraging distances and/or metrics between data distributions. 

## Installation and Requirements

This implementation requires ``python>=3.11``. 

The easiest way to install ``bayesian_dpddm`` is with ``pip``:

``pip install bayesian_dpddm``

You can also install by cloning the GitHub repo:

```
# Clone the repo
git clone https://github.com/teivng/bayesian_dpddm.git

# Navigate into repo directory 
cd bayesian_dpddm

# Install the required dependencies
pip install .
```

## Sweeping Instructions

All experiments are running from the root directory of the repo. We use ``hydra-core`` as an ``argparse`` on steroids, in tandem with ``wandb`` for sweeping. For a sweeping configuration ``experiments/my_sweep.yaml``, run:

```
wandb sweep experiments/my_sweep.yaml
```

for which ``wandb`` responds with:

```
wandb: Creating sweep from: experiments/my_sweep.yaml
wandb: Creating sweep with ID: <my_sweep_id>
wandb: View sweep at: https://wandb.ai/<my_wandb_team>/<my_project>/sweeps/<my_sweep_id>
```

### Sweeping locally
Run sweep agent with: ``wandb agent <my_wandb_team>/<my_project>/<my_sweep_id>``.

### Sweeping with ``slurm``

``sbatch`` files format pre-configured for the Vaughan cluster. Edit the templates at will. 

We execute a script to replace the ``wandb agent ...`` line in our ``.slrm`` files:

```
./experiments/replace_wandb_agent.sh "wandb agent <my_wandb_team>/<my_project>/<my_sweep_id>"
```

Finally, spam jobs on the cluster and maximize your allocation per ``qos``: 

```
./experiments/sbatch_all.sh
```

Edit this script per your allocation. 


## Usage and Tutorials

In short, training a ``DPDDMMonitor`` consists of a three steps.

1. Train the base model of the monitor on I.I.D. training data
2. With a held-out set of I.I.D. validation data, train the distribution of I.I.D. disagreement rates (Phi) of the monitor
3. Deploy the base model and monitor by periodically running ``dpddm_test`` on batches of unsupervised deployment data 

When ``dpddm_test`` returns ``True``, the monitor recognizes that the base model may severely underperform on the unsupervised deployment data. This is the cue for ML practitioners to inspect the problem further and consider further measures such as adapting and retraining. 

For a full tutorial on how to deploy ``bayesian_dpddm`` to monitor a downstream task, consider running the guidebook ``tutorials/classification.ipynb`` where we train a ``DPDDMBayesianMonitor`` to monitor an induced deteriorating shift on the UCI Heart Disease dataset. 

## Citation

Coming soon.



