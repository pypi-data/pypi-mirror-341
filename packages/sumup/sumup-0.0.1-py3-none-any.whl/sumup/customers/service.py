# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Service, AsyncService
from .types import (
    PersonalDetails,
    Customer,
    PaymentInstrumentResponse,
)
import typing
import pydantic


class CreateCustomerBody(pydantic.BaseModel):
    """
    CreateCustomerBody is a schema definition.
    """

    customer_id: str
    """
	Unique ID of the customer.
	"""

    personal_details: typing.Optional[PersonalDetails] = None
    """
	Personal details for the customer.
	"""


class UpdateCustomerBody(pydantic.BaseModel):
    """
    UpdateCustomerBody is a schema definition.
    """

    personal_details: typing.Optional[PersonalDetails] = None
    """
	Personal details for the customer.
	"""


type ListPaymentInstruments200Response = typing.List[PaymentInstrumentResponse]
"""
ListPaymentInstruments200Response is a schema definition.
"""


class DeactivatePaymentInstrument204Response(pydantic.BaseModel):
    """
    DeactivatePaymentInstrument204Response is a schema definition.
    """


class CustomersService(Service):
    def __init__(self, client):
        super().__init__(client)

    def create(self, body: CreateCustomerBody) -> Customer:
        """
        create: Create a customer
        Creates a new saved customer resource which you can later manipulate and save payment instruments to.
        """
        resp = self._client.post(
            "/v0.1/customers",
            json=body,
        )
        return Customer(**resp.json())

    def list_payment_instruments(self, customer_id: str) -> ListPaymentInstruments200Response:
        """
        list_payment_instruments: List payment instruments
        Lists all payment instrument resources that are saved for an identified customer.
        """
        resp = self._client.get(
            f"/v0.1/customers/{customer_id}/payment-instruments",
        )
        return ListPaymentInstruments200Response(**resp.json())

    def get(self, customer_id: str) -> Customer:
        """
        get: Retrieve a customer
        Retrieves an identified saved customer resource through the unique `customer_id` parameter, generated upon customer creation.
        """
        resp = self._client.get(
            f"/v0.1/customers/{customer_id}",
        )
        return Customer(**resp.json())

    def update(self, customer_id: str, body: UpdateCustomerBody) -> Customer:
        """
        update: Update a customer
        Updates an identified saved customer resource's personal details.

        The request only overwrites the parameters included in the request, all other parameters will remain with theirinitially assigned values.
        """
        resp = self._client.put(
            f"/v0.1/customers/{customer_id}",
            json=body,
        )
        return Customer(**resp.json())

    def deactivate_payment_instrument(
        self, customer_id: str, token: str
    ) -> DeactivatePaymentInstrument204Response:
        """
        deactivate_payment_instrument: Deactivate a payment instrument
        Deactivates an identified card payment instrument resource for a customer.
        """
        resp = self._client.delete(
            f"/v0.1/customers/{customer_id}/payment-instruments/{token}",
        )
        return DeactivatePaymentInstrument204Response(**resp.json())


class AsyncCustomersService(AsyncService):
    def __init__(self, client):
        super().__init__(client)

    async def create(self, body: CreateCustomerBody) -> Customer:
        """
        create: Create a customer
        Creates a new saved customer resource which you can later manipulate and save payment instruments to.
        """
        resp = await self._client.post(
            "/v0.1/customers",
            json=body,
        )
        return Customer(**resp.json())

    async def list_payment_instruments(self, customer_id: str) -> ListPaymentInstruments200Response:
        """
        list_payment_instruments: List payment instruments
        Lists all payment instrument resources that are saved for an identified customer.
        """
        resp = await self._client.get(
            f"/v0.1/customers/{customer_id}/payment-instruments",
        )
        return ListPaymentInstruments200Response(**resp.json())

    async def get(self, customer_id: str) -> Customer:
        """
        get: Retrieve a customer
        Retrieves an identified saved customer resource through the unique `customer_id` parameter, generated upon customer creation.
        """
        resp = await self._client.get(
            f"/v0.1/customers/{customer_id}",
        )
        return Customer(**resp.json())

    async def update(self, customer_id: str, body: UpdateCustomerBody) -> Customer:
        """
        update: Update a customer
        Updates an identified saved customer resource's personal details.

        The request only overwrites the parameters included in the request, all other parameters will remain with theirinitially assigned values.
        """
        resp = await self._client.put(
            f"/v0.1/customers/{customer_id}",
            json=body,
        )
        return Customer(**resp.json())

    async def deactivate_payment_instrument(
        self, customer_id: str, token: str
    ) -> DeactivatePaymentInstrument204Response:
        """
        deactivate_payment_instrument: Deactivate a payment instrument
        Deactivates an identified card payment instrument resource for a customer.
        """
        resp = await self._client.delete(
            f"/v0.1/customers/{customer_id}/payment-instruments/{token}",
        )
        return DeactivatePaymentInstrument204Response(**resp.json())
