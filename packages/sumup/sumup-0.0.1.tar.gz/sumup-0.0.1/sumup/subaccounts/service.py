# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Service, AsyncService
from .types import Operator
import typing
import pydantic


class CreateSubAccountBodyPermissions(pydantic.BaseModel):
    """
    CreateSubAccountBodyPermissions is a schema definition.
    """

    create_moto_payments: typing.Optional[bool] = None

    create_referral: typing.Optional[bool] = None

    full_transaction_history_view: typing.Optional[bool] = None

    refund_transactions: typing.Optional[bool] = None


class CreateSubAccountBody(pydantic.BaseModel):
    """
    CreateSubAccountBody is a schema definition.
    """

    password: str
    """
	Min length: 8
	"""

    username: str
    """
	Format: email
	"""

    nickname: typing.Optional[str] = None

    permissions: typing.Optional[CreateSubAccountBodyPermissions] = None


class UpdateSubAccountBodyPermissions(pydantic.BaseModel):
    """
    UpdateSubAccountBodyPermissions is a schema definition.
    """

    create_moto_payments: typing.Optional[bool] = None

    create_referral: typing.Optional[bool] = None

    full_transaction_history_view: typing.Optional[bool] = None

    refund_transactions: typing.Optional[bool] = None


class UpdateSubAccountBody(pydantic.BaseModel):
    """
    UpdateSubAccountBody is a schema definition.
    """

    disabled: typing.Optional[bool] = None

    nickname: typing.Optional[str] = None

    password: typing.Optional[str] = None
    """
	Min length: 8
	"""

    permissions: typing.Optional[UpdateSubAccountBodyPermissions] = None

    username: typing.Optional[str] = None
    """
	Format: email
	Max length: 256
	"""


class ListSubAccountsParams(pydantic.BaseModel):
    """
    ListSubAccountsParams: query parameters for ListSubAccounts
    """

    include_primary: typing.Optional[bool] = None
    """
	If true the list of operators will include also the primary user.
	"""

    query: typing.Optional[str] = None
    """
	Search query used to filter users that match given query term.
	
	Current implementation allow querying only over the email address.
	All operators whos email address contains the query string are returned.
	"""


type ListSubAccounts200Response = typing.List[Operator]
"""
ListSubAccounts200Response is a schema definition.
"""


class SubaccountsService(Service):
    def __init__(self, client):
        super().__init__(client)

    def list_sub_accounts(
        self, params: ListSubAccountsParams | None = None
    ) -> ListSubAccounts200Response:
        """
        list_sub_accounts: List operators
        Returns list of operators for currently authorized user's merchant.
        Deprecated: Subaccounts API is deprecated, to list users in your merchant account please use [List members](https://developer.sumup.com/api/members/list) instead.
        """
        resp = self._client.get(
            "/v0.1/me/accounts",
            params=params.dict(),
        )
        return ListSubAccounts200Response(**resp.json())

    def create_sub_account(self, body: CreateSubAccountBody) -> Operator:
        """
        create_sub_account: Create an operator
        Creates new operator for currently authorized users' merchant.
        Deprecated: Subaccounts API is deprecated, to create an user in your merchant account please use [Create member](https://developer.sumup.com/api/members/create) instead.
        """
        resp = self._client.post(
            "/v0.1/me/accounts",
            json=body,
        )
        return Operator(**resp.json())

    def deactivate_sub_account(self, operator_id: int) -> Operator:
        """
        deactivate_sub_account: Disable an operator

        Deprecated: Subaccounts API is deprecated, to remove an user that's a member of your merchant account please use [Deletemember](https://developer.sumup.com/api/members/delete) instead.
        """
        resp = self._client.delete(
            f"/v0.1/me/accounts/{operator_id}",
        )
        return Operator(**resp.json())

    def compat_get_operator(self, operator_id: int) -> Operator:
        """
        compat_get_operator: Retrieve an operator
        Returns specific operator.
        Deprecated: Subaccounts API is deprecated, to get an user that's a member of your merchant account please use [Get member](https://developer.sumup.com/api/members/get)instead.
        """
        resp = self._client.get(
            f"/v0.1/me/accounts/{operator_id}",
        )
        return Operator(**resp.json())

    def update_sub_account(self, operator_id: int, body: UpdateSubAccountBody) -> Operator:
        """
        update_sub_account: Update an operator
        Updates operator. If the operator was disabled and their password is updated they will be unblocked.
        Deprecated: Subaccounts API is deprecated, to update an user that's a member of your merchant account please use [Updatemember](https://developer.sumup.com/api/members/update) instead.
        """
        resp = self._client.put(
            f"/v0.1/me/accounts/{operator_id}",
            json=body,
        )
        return Operator(**resp.json())


class AsyncSubaccountsService(AsyncService):
    def __init__(self, client):
        super().__init__(client)

    async def list_sub_accounts(
        self, params: ListSubAccountsParams | None = None
    ) -> ListSubAccounts200Response:
        """
        list_sub_accounts: List operators
        Returns list of operators for currently authorized user's merchant.
        Deprecated: Subaccounts API is deprecated, to list users in your merchant account please use [List members](https://developer.sumup.com/api/members/list) instead.
        """
        resp = await self._client.get(
            "/v0.1/me/accounts",
            params=params.dict(),
        )
        return ListSubAccounts200Response(**resp.json())

    async def create_sub_account(self, body: CreateSubAccountBody) -> Operator:
        """
        create_sub_account: Create an operator
        Creates new operator for currently authorized users' merchant.
        Deprecated: Subaccounts API is deprecated, to create an user in your merchant account please use [Create member](https://developer.sumup.com/api/members/create) instead.
        """
        resp = await self._client.post(
            "/v0.1/me/accounts",
            json=body,
        )
        return Operator(**resp.json())

    async def deactivate_sub_account(self, operator_id: int) -> Operator:
        """
        deactivate_sub_account: Disable an operator

        Deprecated: Subaccounts API is deprecated, to remove an user that's a member of your merchant account please use [Deletemember](https://developer.sumup.com/api/members/delete) instead.
        """
        resp = await self._client.delete(
            f"/v0.1/me/accounts/{operator_id}",
        )
        return Operator(**resp.json())

    async def compat_get_operator(self, operator_id: int) -> Operator:
        """
        compat_get_operator: Retrieve an operator
        Returns specific operator.
        Deprecated: Subaccounts API is deprecated, to get an user that's a member of your merchant account please use [Get member](https://developer.sumup.com/api/members/get)instead.
        """
        resp = await self._client.get(
            f"/v0.1/me/accounts/{operator_id}",
        )
        return Operator(**resp.json())

    async def update_sub_account(self, operator_id: int, body: UpdateSubAccountBody) -> Operator:
        """
        update_sub_account: Update an operator
        Updates operator. If the operator was disabled and their password is updated they will be unblocked.
        Deprecated: Subaccounts API is deprecated, to update an user that's a member of your merchant account please use [Updatemember](https://developer.sumup.com/api/members/update) instead.
        """
        resp = await self._client.put(
            f"/v0.1/me/accounts/{operator_id}",
            json=body,
        )
        return Operator(**resp.json())
