# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Service, AsyncService
from .types import (
    Link,
    TransactionFull,
    TransactionHistory,
)
from datetime import datetime
import typing
import pydantic


class RefundTransactionBody(pydantic.BaseModel):
    """
    RefundTransactionBody: Optional amount for partial refunds of transactions.
    """

    amount: typing.Optional[float] = None
    """
	Amount to be refunded. Eligible amount can't exceed the amount of the transaction and varies based on countryand currency. If you do not specify a value, the system performs a full refund of the transaction.
	"""


class ListTransactionsParams(pydantic.BaseModel):
    """
    ListTransactionsParams: query parameters for ListTransactions
    """

    changes_since: typing.Optional[datetime] = None
    """
	Filters the results by the latest modification time of resources and returns only transactions that are modified*at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	"""

    limit: typing.Optional[int] = None
    """
	Specifies the maximum number of results per page. Value must be a positive integer and if not specified, willreturn 10 results.
	"""

    newest_ref: typing.Optional[str] = None
    """
	Filters the results by the reference ID of transaction events and returns only transactions with events whoseIDs are *smaller* than the specified value. This parameters supersedes the `newest_time` parameter (if bothare provided in the request).
	"""

    newest_time: typing.Optional[datetime] = None
    """
	Filters the results by the creation time of resources and returns only transactions that are created *before*the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	"""

    oldest_ref: typing.Optional[str] = None
    """
	Filters the results by the reference ID of transaction events and returns only transactions with events whoseIDs are *greater* than the specified value. This parameters supersedes the `oldest_time` parameter (if bothare provided in the request).
	"""

    oldest_time: typing.Optional[datetime] = None
    """
	Filters the results by the creation time of resources and returns only transactions that are created *ator after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	"""

    order: typing.Optional[str] = None
    """
	Specifies the order in which the returned results are displayed.
	"""

    payment_types: typing.Optional[typing.List[str]] = None
    """
	Filters the returned results by the specified list of payment types used for the transactions.
	"""

    statuses: typing.Optional[typing.List[str]] = None
    """
	Filters the returned results by the specified list of final statuses of the transactions.
	"""

    transaction_code: typing.Optional[str] = None
    """
	Retrieves the transaction resource with the specified transaction code.
	"""

    types: typing.Optional[typing.List[str]] = None
    """
	Filters the returned results by the specified list of transaction types.
	"""

    users: typing.Optional[typing.List[str]] = None
    """
	Filters the returned results by user email.
	"""


class GetTransactionParams(pydantic.BaseModel):
    """
    GetTransactionParams: query parameters for GetTransaction
    """

    id: typing.Optional[str] = None
    """
	Retrieves the transaction resource with the specified transaction ID (the `id` parameter in the transaction resource).
	"""

    internal_id: typing.Optional[str] = None
    """
	Retrieves the transaction resource with the specified internal transaction ID (the `internal_id` parameter inthe transaction resource).
	"""

    transaction_code: typing.Optional[str] = None
    """
	Retrieves the transaction resource with the specified transaction code.
	"""


class ListTransactionsV21Params(pydantic.BaseModel):
    """
    ListTransactionsV21Params: query parameters for ListTransactionsV2.1
    """

    changes_since: typing.Optional[datetime] = None
    """
	Filters the results by the latest modification time of resources and returns only transactions that are modified*at or after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	"""

    limit: typing.Optional[int] = None
    """
	Specifies the maximum number of results per page. Value must be a positive integer and if not specified, willreturn 10 results.
	"""

    newest_ref: typing.Optional[str] = None
    """
	Filters the results by the reference ID of transaction events and returns only transactions with events whoseIDs are *smaller* than the specified value. This parameters supersedes the `newest_time` parameter (if bothare provided in the request).
	"""

    newest_time: typing.Optional[datetime] = None
    """
	Filters the results by the creation time of resources and returns only transactions that are created *before*the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	"""

    oldest_ref: typing.Optional[str] = None
    """
	Filters the results by the reference ID of transaction events and returns only transactions with events whoseIDs are *greater* than the specified value. This parameters supersedes the `oldest_time` parameter (if bothare provided in the request).
	"""

    oldest_time: typing.Optional[datetime] = None
    """
	Filters the results by the creation time of resources and returns only transactions that are created *ator after* the specified timestamp (in [ISO8601](https://en.wikipedia.org/wiki/ISO_8601) format).
	"""

    order: typing.Optional[str] = None
    """
	Specifies the order in which the returned results are displayed.
	"""

    payment_types: typing.Optional[typing.List[str]] = None
    """
	Filters the returned results by the specified list of payment types used for the transactions.
	"""

    statuses: typing.Optional[typing.List[str]] = None
    """
	Filters the returned results by the specified list of final statuses of the transactions.
	"""

    transaction_code: typing.Optional[str] = None
    """
	Retrieves the transaction resource with the specified transaction code.
	"""

    types: typing.Optional[typing.List[str]] = None
    """
	Filters the returned results by the specified list of transaction types.
	"""

    users: typing.Optional[typing.List[str]] = None
    """
	Filters the returned results by user email.
	"""


class GetTransactionV21Params(pydantic.BaseModel):
    """
    GetTransactionV21Params: query parameters for GetTransactionV2.1
    """

    id: typing.Optional[str] = None
    """
	Retrieves the transaction resource with the specified transaction ID (the `id` parameter in the transaction resource).
	"""

    internal_id: typing.Optional[str] = None
    """
	Retrieves the transaction resource with the specified internal transaction ID (the `internal_id` parameter inthe transaction resource).
	"""

    transaction_code: typing.Optional[str] = None
    """
	Retrieves the transaction resource with the specified transaction code.
	"""


class ListTransactions200Response(pydantic.BaseModel):
    """
    ListTransactions200Response is a schema definition.
    """

    items: typing.Optional[typing.List[TransactionHistory]] = None

    links: typing.Optional[typing.List[Link]] = None


class ListTransactionsV21200Response(pydantic.BaseModel):
    """
    ListTransactionsV21200Response is a schema definition.
    """

    items: typing.Optional[typing.List[TransactionHistory]] = None

    links: typing.Optional[typing.List[Link]] = None


class RefundTransaction204Response(pydantic.BaseModel):
    """
    RefundTransaction204Response is a schema definition.
    """


class TransactionsService(Service):
    def __init__(self, client):
        super().__init__(client)

    def list_deprecated(
        self, params: ListTransactionsParams | None = None
    ) -> ListTransactions200Response:
        """
        list_deprecated: List transactions
        Lists detailed history of all transactions associated with the merchant profile.
        Deprecated: this operation is deprecated
        """
        resp = self._client.get(
            "/v0.1/me/transactions/history",
            params=params.dict(),
        )
        return ListTransactions200Response(**resp.json())

    def get_deprecated(self, params: GetTransactionParams | None = None) -> TransactionFull:
        """
        get_deprecated: Retrieve a transaction
        Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and*one* of following parameters is required:

         *  `id`
         *  `internal_id`
         *  `transaction_code`
         *  `foreign_transaction_id`
         *  `client_transaction_id`

        Deprecated: this operation is deprecated
        """
        resp = self._client.get(
            "/v0.1/me/transactions",
            params=params.dict(),
        )
        return TransactionFull(**resp.json())

    def list(
        self, merchant_code: str, params: ListTransactionsV21Params | None = None
    ) -> ListTransactionsV21200Response:
        """
        list: List transactions
        Lists detailed history of all transactions associated with the merchant profile.
        """
        resp = self._client.get(
            f"/v2.1/merchants/{merchant_code}/transactions/history",
            params=params.dict(),
        )
        return ListTransactionsV21200Response(**resp.json())

    def get(
        self, merchant_code: str, params: GetTransactionV21Params | None = None
    ) -> TransactionFull:
        """
        get: Retrieve a transaction
        Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and*one* of following parameters is required:

         *  `id`
         *  `internal_id`
         *  `transaction_code`
         *  `foreign_transaction_id`
         *  `client_transaction_id`
        """
        resp = self._client.get(
            f"/v2.1/merchants/{merchant_code}/transactions",
            params=params.dict(),
        )
        return TransactionFull(**resp.json())

    def refund(self, txn_id: str, body: RefundTransactionBody) -> RefundTransaction204Response:
        """
        refund: Refund a transaction
        Refunds an identified transaction either in full or partially.
        """
        resp = self._client.post(
            f"/v0.1/me/refund/{txn_id}",
            json=body,
        )
        return RefundTransaction204Response(**resp.json())


class AsyncTransactionsService(AsyncService):
    def __init__(self, client):
        super().__init__(client)

    async def list_deprecated(
        self, params: ListTransactionsParams | None = None
    ) -> ListTransactions200Response:
        """
        list_deprecated: List transactions
        Lists detailed history of all transactions associated with the merchant profile.
        Deprecated: this operation is deprecated
        """
        resp = await self._client.get(
            "/v0.1/me/transactions/history",
            params=params.dict(),
        )
        return ListTransactions200Response(**resp.json())

    async def get_deprecated(self, params: GetTransactionParams | None = None) -> TransactionFull:
        """
        get_deprecated: Retrieve a transaction
        Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and*one* of following parameters is required:

         *  `id`
         *  `internal_id`
         *  `transaction_code`
         *  `foreign_transaction_id`
         *  `client_transaction_id`

        Deprecated: this operation is deprecated
        """
        resp = await self._client.get(
            "/v0.1/me/transactions",
            params=params.dict(),
        )
        return TransactionFull(**resp.json())

    async def list(
        self, merchant_code: str, params: ListTransactionsV21Params | None = None
    ) -> ListTransactionsV21200Response:
        """
        list: List transactions
        Lists detailed history of all transactions associated with the merchant profile.
        """
        resp = await self._client.get(
            f"/v2.1/merchants/{merchant_code}/transactions/history",
            params=params.dict(),
        )
        return ListTransactionsV21200Response(**resp.json())

    async def get(
        self, merchant_code: str, params: GetTransactionV21Params | None = None
    ) -> TransactionFull:
        """
        get: Retrieve a transaction
        Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and*one* of following parameters is required:

         *  `id`
         *  `internal_id`
         *  `transaction_code`
         *  `foreign_transaction_id`
         *  `client_transaction_id`
        """
        resp = await self._client.get(
            f"/v2.1/merchants/{merchant_code}/transactions",
            params=params.dict(),
        )
        return TransactionFull(**resp.json())

    async def refund(
        self, txn_id: str, body: RefundTransactionBody
    ) -> RefundTransaction204Response:
        """
        refund: Refund a transaction
        Refunds an identified transaction either in full or partially.
        """
        resp = await self._client.post(
            f"/v0.1/me/refund/{txn_id}",
            json=body,
        )
        return RefundTransaction204Response(**resp.json())
