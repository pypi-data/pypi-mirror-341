# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Service, AsyncService
from .types import (
    MembershipStatus,
    Attributes,
    Metadata,
    Member,
)
import typing
import pydantic


class CreateMerchantMemberBody(pydantic.BaseModel):
    """
    CreateMerchantMemberBody is a schema definition.
    """

    email: str
    """
	Email address of the member to add.
	Format: email
	"""

    roles: typing.List[str]
    """
	List of roles to assign to the new member. In the case of service accounts, the roles are predefined.
	"""

    attributes: typing.Optional[Attributes] = None
    """
	Object attributes that modifiable only by SumUp applications.
	"""

    is_managed_user: typing.Optional[bool] = None
    """
	True if the user is managed by the merchant. In this case, we'll created a virtual user with the provided passwordand nickname.
	"""

    is_service_account: typing.Optional[bool] = None
    """
	True if the user is a service account. It can later be used to create OAuth2 clients.
	"""

    metadata: typing.Optional[Metadata] = None
    """
	Set of user-defined key-value pairs attached to the object. Partial updates are not supported. When updating, alwayssubmit whole metadata.
	"""

    nickname: typing.Optional[str] = None
    """
	Nickname of the member to add. Only used if `is_managed_user` is true. Used for display purposes only.
	"""

    password: typing.Optional[str] = None
    """
	Password of the member to add. Only used if `is_managed_user` is true. In the case of service accounts, thepassword is not used and can not be defined by the caller.
	Format: password
	Min length: 8
	"""


class UpdateMerchantMemberBodyUser(pydantic.BaseModel):
    """
    UpdateMerchantMemberBodyUser: Allows you to update user data of managed users.
    """

    nickname: typing.Optional[str] = None
    """
	User's preferred name. Used for display purposes only.
	"""

    password: typing.Optional[str] = None
    """
	Password of the member to add. Only used if `is_managed_user` is true.
	Format: password
	Min length: 8
	"""


class UpdateMerchantMemberBody(pydantic.BaseModel):
    """
    UpdateMerchantMemberBody is a schema definition.
    """

    attributes: typing.Optional[Attributes] = None
    """
	Object attributes that modifiable only by SumUp applications.
	"""

    metadata: typing.Optional[Metadata] = None
    """
	Set of user-defined key-value pairs attached to the object. Partial updates are not supported. When updating, alwayssubmit whole metadata.
	"""

    roles: typing.Optional[typing.List[str]] = None

    user: typing.Optional[UpdateMerchantMemberBodyUser] = None
    """
	Allows you to update user data of managed users.
	"""


class ListMerchantMembersParams(pydantic.BaseModel):
    """
    ListMerchantMembersParams: query parameters for ListMerchantMembers
    """

    email: typing.Optional[str] = None
    """
	Filter the returned members by email address prefix.
	"""

    limit: typing.Optional[int] = None
    """
	Maximum number of members to return.
	"""

    offset: typing.Optional[int] = None
    """
	Offset of the first member to return.
	"""

    roles: typing.Optional[typing.List[str]] = None
    """
	Filter the returned members by role.
	"""

    scroll: typing.Optional[bool] = None
    """
	Indicates to skip count query.
	"""

    status: typing.Optional[MembershipStatus] = None
    """
	Filter the returned members by the membership status.
	"""


class ListMerchantMembers200Response(pydantic.BaseModel):
    """
    ListMerchantMembers200Response is a schema definition.
    """

    items: typing.List[Member]

    total_count: typing.Optional[int] = None


class MembersService(Service):
    def __init__(self, client):
        super().__init__(client)

    def list(
        self, merchant_code: str, params: ListMerchantMembersParams | None = None
    ) -> ListMerchantMembers200Response:
        """
        list: List members
        Lists merchant members.
        """
        resp = self._client.get(
            f"/v0.1/merchants/{merchant_code}/members",
            params=params.dict(),
        )
        return ListMerchantMembers200Response(**resp.json())

    def create(self, merchant_code: str, body: CreateMerchantMemberBody) -> Member:
        """
        create: Create a member
        Create a merchant member.
        """
        resp = self._client.post(
            f"/v0.1/merchants/{merchant_code}/members",
            json=body,
        )
        return Member(**resp.json())

    def delete(self, merchant_code: str, member_id: str):
        """
        delete: Delete a member
        Deletes a merchant member.
        """
        self._client.delete(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
        )

    def get(self, merchant_code: str, member_id: str) -> Member:
        """
        get: Retrieve a member
        Retrieve a merchant member.
        """
        resp = self._client.get(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
        )
        return Member(**resp.json())

    def update(self, merchant_code: str, member_id: str, body: UpdateMerchantMemberBody) -> Member:
        """
        update: Update a member
        Update the merchant member.
        """
        resp = self._client.put(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
            json=body,
        )
        return Member(**resp.json())


class AsyncMembersService(AsyncService):
    def __init__(self, client):
        super().__init__(client)

    async def list(
        self, merchant_code: str, params: ListMerchantMembersParams | None = None
    ) -> ListMerchantMembers200Response:
        """
        list: List members
        Lists merchant members.
        """
        resp = await self._client.get(
            f"/v0.1/merchants/{merchant_code}/members",
            params=params.dict(),
        )
        return ListMerchantMembers200Response(**resp.json())

    async def create(self, merchant_code: str, body: CreateMerchantMemberBody) -> Member:
        """
        create: Create a member
        Create a merchant member.
        """
        resp = await self._client.post(
            f"/v0.1/merchants/{merchant_code}/members",
            json=body,
        )
        return Member(**resp.json())

    async def delete(self, merchant_code: str, member_id: str):
        """
        delete: Delete a member
        Deletes a merchant member.
        """
        await self._client.delete(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
        )

    async def get(self, merchant_code: str, member_id: str) -> Member:
        """
        get: Retrieve a member
        Retrieve a merchant member.
        """
        resp = await self._client.get(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
        )
        return Member(**resp.json())

    async def update(
        self, merchant_code: str, member_id: str, body: UpdateMerchantMemberBody
    ) -> Member:
        """
        update: Update a member
        Update the merchant member.
        """
        resp = await self._client.put(
            f"/v0.1/merchants/{merchant_code}/members/{member_id}",
            json=body,
        )
        return Member(**resp.json())
