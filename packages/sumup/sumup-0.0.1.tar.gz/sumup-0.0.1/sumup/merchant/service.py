# Code generated by `py-sdk-gen`. DO NOT EDIT.
from .._service import Service, AsyncService
from .types import (
    DoingBusinessAs,
    MerchantSettings,
    BankAccount,
    MerchantProfile,
    PersonalProfile,
    MerchantAccount,
)
import typing
import pydantic


class ListBankAccountsParams(pydantic.BaseModel):
    """
    ListBankAccountsParams: query parameters for ListBankAccounts
    """

    primary: typing.Optional[bool] = None
    """
	If true only the primary bank account (the one used for payouts) will be returned.
	"""


class GetAccountParams(pydantic.BaseModel):
    """
    GetAccountParams: query parameters for GetAccount
    """

    include: typing.Optional[typing.List[str]] = None
    """
	A list of additional information you want to receive for the user. By default only personal and merchant profileinformation will be returned.
	"""


class ListBankAccountsV11Params(pydantic.BaseModel):
    """
    ListBankAccountsV11Params: query parameters for ListBankAccountsV11
    """

    primary: typing.Optional[bool] = None
    """
	If true only the primary bank account (the one used for payouts) will be returned.
	"""


type ListBankAccounts200Response = typing.List[BankAccount]
"""
ListBankAccounts200Response is a schema definition.
"""

type ListBankAccountsV11200Response = typing.List[BankAccount]
"""
ListBankAccountsV11200Response is a schema definition.
"""


class MerchantService(Service):
    def __init__(self, client):
        super().__init__(client)

    def get_personal_profile(self) -> PersonalProfile:
        """
        get_personal_profile: Retrieve a personal profile
        Retrieves personal profile data.
        """
        resp = self._client.get(
            "/v0.1/me/personal-profile",
        )
        return PersonalProfile(**resp.json())

    def get_settings(self) -> MerchantSettings:
        """
        get_settings: Get settings
        Retrieves merchant settings.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/settings",
        )
        return MerchantSettings(**resp.json())

    def get_doing_business_as(self) -> DoingBusinessAs:
        """
        get_doing_business_as: Retrieve DBA
        Retrieves Doing Business As profile.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/doing-business-as",
        )
        return DoingBusinessAs(**resp.json())

    def list_bank_accounts_deprecated(
        self, params: ListBankAccountsParams | None = None
    ) -> ListBankAccounts200Response:
        """
        list_bank_accounts_deprecated: List bank accounts
        Retrieves bank accounts of the merchant.
        Deprecated: this operation is deprecated
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile/bank-accounts",
            params=params.dict(),
        )
        return ListBankAccounts200Response(**resp.json())

    def get_merchant_profile(self) -> MerchantProfile:
        """
        get_merchant_profile: Retrieve a merchant profile
        Retrieves merchant profile data.
        """
        resp = self._client.get(
            "/v0.1/me/merchant-profile",
        )
        return MerchantProfile(**resp.json())

    def get(self, params: GetAccountParams | None = None) -> MerchantAccount:
        """
        get: Retrieve a profile
        Returns user profile information.
        """
        resp = self._client.get(
            "/v0.1/me",
            params=params.dict(),
        )
        return MerchantAccount(**resp.json())

    def list_bank_accounts(
        self, merchant_code: str, params: ListBankAccountsV11Params | None = None
    ) -> ListBankAccountsV11200Response:
        """
        list_bank_accounts: List bank accounts
        Retrieves bank accounts of the merchant.
        """
        resp = self._client.get(
            f"/v1.1/merchants/{merchant_code}/bank-accounts",
            params=params.dict(),
        )
        return ListBankAccountsV11200Response(**resp.json())


class AsyncMerchantService(AsyncService):
    def __init__(self, client):
        super().__init__(client)

    async def get_personal_profile(self) -> PersonalProfile:
        """
        get_personal_profile: Retrieve a personal profile
        Retrieves personal profile data.
        """
        resp = await self._client.get(
            "/v0.1/me/personal-profile",
        )
        return PersonalProfile(**resp.json())

    async def get_settings(self) -> MerchantSettings:
        """
        get_settings: Get settings
        Retrieves merchant settings.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/settings",
        )
        return MerchantSettings(**resp.json())

    async def get_doing_business_as(self) -> DoingBusinessAs:
        """
        get_doing_business_as: Retrieve DBA
        Retrieves Doing Business As profile.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/doing-business-as",
        )
        return DoingBusinessAs(**resp.json())

    async def list_bank_accounts_deprecated(
        self, params: ListBankAccountsParams | None = None
    ) -> ListBankAccounts200Response:
        """
        list_bank_accounts_deprecated: List bank accounts
        Retrieves bank accounts of the merchant.
        Deprecated: this operation is deprecated
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile/bank-accounts",
            params=params.dict(),
        )
        return ListBankAccounts200Response(**resp.json())

    async def get_merchant_profile(self) -> MerchantProfile:
        """
        get_merchant_profile: Retrieve a merchant profile
        Retrieves merchant profile data.
        """
        resp = await self._client.get(
            "/v0.1/me/merchant-profile",
        )
        return MerchantProfile(**resp.json())

    async def get(self, params: GetAccountParams | None = None) -> MerchantAccount:
        """
        get: Retrieve a profile
        Returns user profile information.
        """
        resp = await self._client.get(
            "/v0.1/me",
            params=params.dict(),
        )
        return MerchantAccount(**resp.json())

    async def list_bank_accounts(
        self, merchant_code: str, params: ListBankAccountsV11Params | None = None
    ) -> ListBankAccountsV11200Response:
        """
        list_bank_accounts: List bank accounts
        Retrieves bank accounts of the merchant.
        """
        resp = await self._client.get(
            f"/v1.1/merchants/{merchant_code}/bank-accounts",
            params=params.dict(),
        )
        return ListBankAccountsV11200Response(**resp.json())
