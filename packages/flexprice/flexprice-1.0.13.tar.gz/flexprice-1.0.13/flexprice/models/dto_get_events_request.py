# coding: utf-8

"""
    FlexPrice API

    FlexPrice API Service

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DtoGetEventsRequest(BaseModel):
    """
    DtoGetEventsRequest
    """ # noqa: E501
    count_total: Optional[StrictBool] = None
    end_time: Optional[StrictStr] = None
    event_id: Optional[StrictStr] = None
    event_name: Optional[StrictStr] = None
    external_customer_id: Optional[StrictStr] = None
    iter_first_key: Optional[StrictStr] = None
    iter_last_key: Optional[StrictStr] = None
    offset: Optional[StrictInt] = None
    page_size: Optional[StrictInt] = None
    property_filters: Optional[Dict[str, List[StrictStr]]] = None
    start_time: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["count_total", "end_time", "event_id", "event_name", "external_customer_id", "iter_first_key", "iter_last_key", "offset", "page_size", "property_filters", "start_time"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DtoGetEventsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DtoGetEventsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "count_total": obj.get("count_total"),
            "end_time": obj.get("end_time"),
            "event_id": obj.get("event_id"),
            "event_name": obj.get("event_name"),
            "external_customer_id": obj.get("external_customer_id"),
            "iter_first_key": obj.get("iter_first_key"),
            "iter_last_key": obj.get("iter_last_key"),
            "offset": obj.get("offset"),
            "page_size": obj.get("page_size"),
            "property_filters": obj.get("property_filters"),
            "start_time": obj.get("start_time")
        })
        return _obj


