
__version__ = "1.1.7" if "{" not in "1.1.7" else "0.0.0"

from exploitfarm.utils import try_tcp_connection
from exploitfarm.models.enums import AttackMode, SetupStatus, FlagStatus
import requests
import functools
import random
import os
from exploitfarm.utils.config import ClientConfig
from exploitfarm.tui.config import inital_config_setup
from exploitfarm.tui.login import login_required
from enum import Enum
import psutil
import traceback
from exploitfarm.utils import DEV_MODE
 
os_windows = (os.name == 'nt')
os_unix = (os.name == 'posix')

def get_host():
    result = os.getenv("XFARM_HOST", None)
    if not result:
        raise ValueError("this exploit has to be run with xfarm")
    return result

class Prio(Enum):
    high = 0
    normal = 1
    low = 2

def nicenessify(priority:Prio=Prio.low, pid:int|None=None):
    try:
        pid = os.getpid() if pid is None else pid
        ps = psutil.Process(pid)
        if not isinstance(priority, Prio):
            try:
                priority = Prio(priority)
            except Exception:
                priority = Prio.low

        nice_value = None
        
        if os_unix:
            match priority:
                case Prio.high:
                    nice_value = -10
                case Prio.normal:
                    nice_value = 0
                case Prio.low:
                    nice_value = 15
        if os_windows:
            match priority:
                case Prio.high:
                    nice_value = psutil.HIGH_PRIORITY_CLASS
                case Prio.normal:
                    nice_value = psutil.NORMAL_PRIORITY_CLASS
                case Prio.low:
                    nice_value = psutil.BELOW_NORMAL_PRIORITY_CLASS
        ps.nice(nice_value)
    except Exception as e:
        error = traceback.format_exc() if DEV_MODE else ""
        print(f"Error setting priority: {e} {error}")
        pass

def get_config():
    config = ClientConfig.read()
    if not inital_config_setup(config):
        raise ValueError("It's required to setup the client first")
    login_required(config)
    return config

def random_str(
    length:int|None = None,
    length_range:int = (8,12),
    numbers:bool = True,
    lower:bool = True,
    upper:bool = True,
    specials:bool = False,
    exclude:str = "",
    include:str = ""
) -> str:
    alphabet = ""
    if numbers:
        alphabet += "0123456789"
    if lower:
        alphabet += "abcdefghijklmnopqrstuvwxyz"
    if upper:
        alphabet += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    if specials:
        alphabet += "!@#$%^&*()_+-=[]{}|;:,.<>?/~"
    if exclude:
        alphabet = alphabet.translate(str.maketrans("", "", exclude))
    if include:
        alphabet += include
    if not alphabet:
        raise ValueError("No alphabet selected")
    alphabet = "".join(list(set([ele for ele in alphabet])))
    if length is None:
        length = random.randint(*length_range)
    return "".join(random.choices(alphabet, k=length))

def session(
    random_agent:bool = True,
    additional_agents:list = [],
    additional_headers:dict = {},
    user_agent:str = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.3",
) -> requests.Session:
    headers = {
        "User-Agent": random.choice(
            [
                "Mozilla/5.0 (X11; Linux x86_64; rv:124.0) Gecko/20100101 Firefox/124.0",
                "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.3",
                "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.3",
            ]+additional_agents
        ) if random_agent else user_agent,
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-GB,en;q=0.8,it;q=0.7,en-US;q=0.6",
        **additional_headers
    } 
    s = requests.Session()
    s.headers.update(headers)
    return s

#Force flush print
print = functools.partial(print, flush = True)

#Exported functions
__all__ = [
    "try_tcp_connection",
    "AttackMode",
    "SetupStatus",
    "get_host",
    "get_config",
    "random_str",
    "session",
    "print",
    "nicenessify",
    "Prio",
    "FlagStatus"
]