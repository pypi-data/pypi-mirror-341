"use strict";(self.webpackChunksage_agent=self.webpackChunksage_agent||[]).push([[824],{824:(e,t,s)=>{var n;s.r(t),s.d(t,{ChatBoxWidget:()=>g,ChatRequestStatus:()=>n,default:()=>C}),function(e){e.IDLE="idle",e.PENDING="pending",e.RETRYING="retrying",e.COMPLETED="completed",e.ERROR="error",e.CANCELLED="cancelled"}(n||(n={}));var o=s(256);class i{constructor(e){this.messageHistory=[],this.container=e}clearHistory(){this.container.innerHTML="",this.messageHistory=[]}addUserMessage(e){const t=document.createElement("div");t.className="sage-ai-message sage-ai-user-message",t.innerHTML=`<strong>You:</strong> ${e}`,this.container.appendChild(t),this.container.scrollTop=this.container.scrollHeight,this.messageHistory.push({role:"user",content:e})}addAIResponse(e){const t=document.createElement("div");t.className="sage-ai-message sage-ai-ai-message",t.innerHTML=`<strong>AI:</strong> ${e}`,this.container.appendChild(t),this.container.scrollTop=this.container.scrollHeight,this.messageHistory.push({role:"assistant",content:e})}addSystemMessage(e){const t=document.createElement("div");t.className="sage-ai-message sage-ai-system-message",t.textContent=e,this.container.appendChild(t),this.container.scrollTop=this.container.scrollHeight}addErrorMessage(e){const t=document.createElement("div");t.className="sage-ai-message sage-ai-error-message",t.textContent=e,this.container.appendChild(t),this.container.scrollTop=this.container.scrollHeight}addToolCalls(e){if(!e||0===e.length)return;const t=document.createElement("div");t.className="sage-ai-tool-calls";const s=document.createElement("div");s.className="sage-ai-tool-calls-header",s.innerHTML="<strong>Tool Calls:</strong>",t.appendChild(s),e.forEach(((e,s)=>{const n=document.createElement("div");n.className="sage-ai-tool-call";const o=document.createElement("span");o.className="sage-ai-tool-call-badge",o.textContent=e.name||"Unknown Tool";const i=document.createElement("pre");i.className="sage-ai-tool-call-content",i.textContent=JSON.stringify(e.input||{},null,2),n.appendChild(o),n.appendChild(i),t.appendChild(n),console.log(`Tool Call ${s+1}:`,e)})),this.container.appendChild(t),this.container.scrollTop=this.container.scrollHeight}addToolResult(e,t){const s=document.createElement("div");s.className="sage-ai-tool-result";const n=document.createElement("div");n.className="sage-ai-tool-result-header",n.innerHTML=`<strong>Tool Result (${e}):</strong>`,s.appendChild(n);const o=document.createElement("pre");o.className="sage-ai-tool-result-content",o.textContent=JSON.stringify(t,null,2),s.appendChild(o),this.container.appendChild(s),this.container.scrollTop=this.container.scrollHeight}addLoadingIndicator(e="AI is thinking..."){const t=document.createElement("div");return t.className="sage-ai-message sage-ai-loading",t.textContent=e,this.container.appendChild(t),this.container.scrollTop=this.container.scrollHeight,t}removeElement(e){this.container.contains(e)&&this.container.removeChild(e)}getMessageHistory(){return this.messageHistory}}var a=s(912),r=s.n(a);class c{constructor(){this.client=null,this.modelName="claude-3-5-sonnet-20241022",this.requestStatus=n.IDLE,this.abortController=null}initialize(e){this.client=e?new(r())({apiKey:e,dangerouslyAllowBrowser:!0}):null}setModelName(e){this.modelName=e}getModelName(){return this.modelName}getRequestStatus(){return this.requestStatus}cancelRequest(){this.abortController&&(this.abortController.abort(),this.abortController=null,this.requestStatus=n.CANCELLED)}async sendMessage(e,t=[],s){if(!this.client)throw new Error("Anthropic client not initialized");this.requestStatus=n.PENDING,this.abortController=new AbortController;try{const s=e.slice(-15);console.log("Sending messages to Claude:",JSON.stringify(s,null,2));const o=await this.client.messages.create({model:this.modelName,max_tokens:4096,messages:s,tools:t.length>0?t:void 0});return console.log("Anthropic response:",o),this.requestStatus=n.COMPLETED,o}catch(o){if(console.error("Error calling Anthropic API:",o),"AbortError"===o.name||this.requestStatus===n.CANCELLED)throw this.requestStatus=n.CANCELLED,new Error("Request cancelled");if(this.requestStatus=n.RETRYING,s)return await s(o,1),await new Promise((e=>setTimeout(e,45e3))),this.sendMessage(e,t,s);throw this.requestStatus=n.ERROR,o}}}var l=s(88),h=s(280);class d{constructor(){this.client=null,this.tools=[]}async initialize(){try{this.client=new l.K({name:"sage-ai-client",version:"1.0.0"});const e=new h.A(new URL("/sse","http://localhost:3001"),{requestInit:{headers:{Accept:"text/event-stream"}}});return await this.client.connect(e),void await this.refreshTools()}catch(e){throw console.error("Failed to initialize MCP client:",e),e}}async refreshTools(){if(!this.client)throw new Error("MCP client not initialized");try{const e=await this.client.listTools();console.log("Available MCP tools:",e),this.tools=[];for(const t of e.tools)this.tools.push({name:t.name,description:t.description,input_schema:t.inputSchema});return console.log(`Updated ${this.tools.length} tools from MCP server.`),this.tools}catch(e){throw console.error("Failed to update tools:",e),e}}getTools(){return this.tools}async executeTool(e,t=3){if(!this.client)throw new Error("MCP client not initialized");const{name:s,input:n,id:o}=e;let i=0;for(;i<=t;)try{console.log(`Executing tool ${s} with args:`,n);const e=await this.client.callTool({name:s,arguments:{...n}});return console.log(`Tool ${s} returned:`,e),{type:"tool_result",tool_use_id:o,content:"object"==typeof e?JSON.stringify(e):String(e)}}catch(e){if(i++,console.error(`Tool execution failed (attempt ${i}/${t+1}):`,e),i>t)return{type:"tool_result",tool_use_id:o,content:`Error: ${e instanceof Error?e.message:String(e)}`};await new Promise((e=>setTimeout(e,1e3*i)))}throw new Error("Tool execution failed after all retries")}async getLastCellInfo(){if(!this.client)return"";try{const e=await this.client.callTool({name:"get_last_cell_info"});if(console.log("Last cell info:",e),e&&e.content&&e.content.cell_id)return`\n\n[last_cell_id: ${e.content.cell_id}]`}catch(e){console.warn("Could not get last cell info:",e)}return""}}class g extends o.Widget{constructor(){super(),this.isProcessingMessage=!1,this.loadingIndicator=null,this.id="sage-ai-chat",this.title.label="AI Chat",this.title.closable=!0,this.addClass("sage-ai-chatbox"),this.anthropicService=new c,this.toolService=new d;const e=new o.PanelLayout;this.layout=e;const t=document.createElement("div");t.className="sage-ai-toolbar",this.resetButton=document.createElement("button"),this.resetButton.className="sage-ai-reset-button",this.resetButton.textContent="Reset Chat",this.resetButton.addEventListener("click",(()=>this.resetChat())),t.appendChild(this.resetButton);const s=document.createElement("div");s.className="sage-ai-history-container",this.chatHistory=document.createElement("div"),this.chatHistory.className="sage-ai-chat-history",s.appendChild(this.chatHistory),this.messageComponent=new i(this.chatHistory);const n=document.createElement("div");n.className="sage-ai-input-container",this.chatInput=document.createElement("input"),this.chatInput.className="sage-ai-chat-input",this.chatInput.placeholder="Ask your question...",this.chatInput.addEventListener("keydown",(e=>{"Enter"!==e.key||""===this.chatInput.value.trim()||this.isProcessingMessage||this.sendMessage()})),this.sendButton=document.createElement("button"),this.sendButton.className="sage-ai-send-button",this.sendButton.textContent="Send",this.sendButton.addEventListener("click",(()=>{this.isProcessingMessage?this.cancelMessage():""!==this.chatInput.value.trim()&&this.sendMessage()})),n.appendChild(this.chatInput),n.appendChild(this.sendButton),e.addWidget(new o.Widget({node:t})),e.addWidget(new o.Widget({node:s})),e.addWidget(new o.Widget({node:n})),this.messageComponent.addSystemMessage(`Welcome to AI Chat! Using model: ${this.anthropicService.getModelName()}`),this.initializeServices()}async initializeServices(){try{await this.toolService.initialize(),this.messageComponent.addSystemMessage("Connected to MCP server successfully."),this.messageComponent.addSystemMessage(`Loaded ${this.toolService.getTools().length} tools from MCP server.`)}catch(e){console.error("Failed to connect to MCP server:",e),this.messageComponent.addSystemMessage("❌ Failed to connect to MCP server. Some features may not work.")}}resetChat(){this.isProcessingMessage&&this.cancelMessage(),this.messageComponent.clearHistory(),this.messageComponent.addSystemMessage(`Welcome to AI Chat! Using model: ${this.anthropicService.getModelName()}`)}cancelMessage(){this.isProcessingMessage&&(this.anthropicService.cancelRequest(),this.isProcessingMessage=!1,this.loadingIndicator&&(this.messageComponent.removeElement(this.loadingIndicator),this.loadingIndicator=null),this.messageComponent.addSystemMessage("Request cancelled by user."),this.updateSendButton(!1))}updateSendButton(e){e?(this.sendButton.textContent="Cancel",this.sendButton.className="sage-ai-cancel-button"):(this.sendButton.textContent="Send",this.sendButton.className="sage-ai-send-button")}async sendMessage(){const e=this.chatInput.value.trim();if(!e||this.isProcessingMessage)return;if(this.isProcessingMessage=!0,this.updateSendButton(!0),this.chatInput.value="",this.chatInput.focus(),!this.anthropicService.getRequestStatus())return this.messageComponent.addSystemMessage("❌ API key is not set. Please configure it in the settings."),this.isProcessingMessage=!1,void this.updateSendButton(!1);let t=e;try{const e=await this.toolService.getLastCellInfo();e&&(t+=e,console.log("Augmented message with cell info:",t))}catch(e){console.warn("Failed to augment message:",e)}this.messageComponent.addUserMessage(e),this.loadingIndicator=this.messageComponent.addLoadingIndicator();const s=[{role:"user",content:t}];try{await this.processConversation(s)}catch(e){console.error("Error in conversation processing:",e),this.anthropicService.getRequestStatus()!==n.CANCELLED&&this.messageComponent.addErrorMessage(`❌ ${e instanceof Error?e.message:"An error occurred while communicating with the AI service."}`)}finally{this.loadingIndicator&&(this.messageComponent.removeElement(this.loadingIndicator),this.loadingIndicator=null),this.isProcessingMessage=!1,this.updateSendButton(!1)}}async processConversation(e){let t;try{t=await this.anthropicService.sendMessage(e,this.toolService.getTools(),(async(e,t)=>{this.loadingIndicator&&this.messageComponent.removeElement(this.loadingIndicator),this.messageComponent.addErrorMessage(`API request failed: ${e.message}. Retrying in 45 seconds... (Attempt ${t})`),this.loadingIndicator=this.messageComponent.addLoadingIndicator("Waiting to retry...")}))}catch(e){if(this.anthropicService.getRequestStatus()===n.CANCELLED)return;throw e}for(;;){const s=[];let o=!1;if(t.content&&t.content.length>0)for(const i of t.content)if("text"===i.type)console.log("Received text response from Claude"),s.push(i);else if("tool_use"===i.type){o=!0;const s=i.name,a=i.input;console.log(`Claude wants to use tool: ${s}`),this.messageComponent.addToolCalls([{id:i.id,name:i.name,input:i.input}]),e.push({role:"assistant",content:[i]});const r=await this.toolService.executeTool({id:i.id,name:s,input:a});if(this.messageComponent.addToolResult(s,r.content),e.push({role:"user",content:[r]}),this.anthropicService.getRequestStatus()===n.CANCELLED)return;try{this.loadingIndicator&&this.messageComponent.removeElement(this.loadingIndicator),this.loadingIndicator=this.messageComponent.addLoadingIndicator("Processing tool results..."),t=await this.anthropicService.sendMessage(e,this.toolService.getTools())}catch(e){if(this.anthropicService.getRequestStatus()===n.CANCELLED)return;throw e}break}if(!o){if(s.length>0){const e=s.filter((e=>"text"===e.type)).map((e=>e.text));e.length>0&&this.messageComponent.addAIResponse(e.join("\n\n"))}break}}}onAfterShow(e){this.chatInput.focus()}setApiKey(e){this.anthropicService.initialize(e),e?this.messageComponent.addSystemMessage("API key configured successfully."):this.messageComponent.addSystemMessage("⚠️ No API key set. Please configure it in the settings.")}setModelName(e){e&&e!==this.anthropicService.getModelName()&&(this.anthropicService.setModelName(e),this.messageComponent.addSystemMessage(`Model changed to: ${e}`))}}var m=s(507),u=s(569);const p={id:"sage-agent:plugin",description:"Sage AI - Your AI Data Partner",autoStart:!0,requires:[u.ICommandPalette],optional:[m.ISettingRegistry],activate:(e,t,s)=>{console.log("JupyterLab extension sage-agent is activated!");const n=new u.WidgetTracker({namespace:"sage-ai-chat"}),o=()=>{const t=new g;return n.add(t),e.shell.add(t,"right",{rank:1e3}),t};let i=o();s&&Promise.all([s.load(p.id),e.restored]).then((([e])=>{(e=>{const t=e.get("apiKey").composite;i.setApiKey(t);const s=e.get("modelName").composite;i.setModelName(s),e.changed.connect((()=>{const t=e.get("apiKey").composite,s=e.get("modelName").composite;i.setApiKey(t),i.setModelName(s)}))})(e)})).catch((e=>{console.error("Failed to load sage-ai settings",e)}));const a="sage-ai:open-chat";e.commands.addCommand(a,{label:"Open AI Chat",execute:()=>{i.isDisposed&&(i=o()),i.isAttached||e.shell.add(i,"right",{rank:1e3}),e.shell.activateById(i.id)}}),t.addItem({command:a,category:"AI Tools"})}},C=p}}]);