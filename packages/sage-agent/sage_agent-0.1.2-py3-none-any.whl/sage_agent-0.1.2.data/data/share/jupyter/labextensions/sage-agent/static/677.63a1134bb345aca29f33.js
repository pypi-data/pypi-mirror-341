"use strict";(self.webpackChunksage_agent=self.webpackChunksage_agent||[]).push([[677],{677:(t,e,s)=>{s.r(e),s.d(e,{ChatBoxWidget:()=>c,default:()=>m});var o=s(256),a=s(88),i=s(280),n=s(912),l=s.n(n);class c extends o.Widget{constructor(){super(),this.apiKey="",this.modelName="claude-3-5-sonnet-20241022",this.messageHistory=[],this.mcpClient=null,this.anthropicClient=null,this.formattedTools=[],this.id="sage-ai-chat",this.title.label="AI Chat",this.title.closable=!0,this.addClass("sage-ai-chatbox");const t=new o.PanelLayout;this.layout=t;const e=document.createElement("div");e.className="sage-ai-history-container",this.chatHistory=document.createElement("div"),this.chatHistory.className="sage-ai-chat-history",e.appendChild(this.chatHistory);const s=document.createElement("div");s.className="sage-ai-input-container",this.chatInput=document.createElement("input"),this.chatInput.className="sage-ai-chat-input",this.chatInput.placeholder="Ask your question...",this.chatInput.addEventListener("keydown",(t=>{"Enter"===t.key&&""!==this.chatInput.value.trim()&&this.sendMessage()})),this.sendButton=document.createElement("button"),this.sendButton.className="sage-ai-send-button",this.sendButton.textContent="Send",this.sendButton.addEventListener("click",(()=>{""!==this.chatInput.value.trim()&&this.sendMessage()})),s.appendChild(this.chatInput),s.appendChild(this.sendButton),t.addWidget(new o.Widget({node:e})),t.addWidget(new o.Widget({node:s})),this.addSystemMessage(`Welcome to AI Chat! Using model: ${this.modelName}`),this.initializeMcpClient()}async initializeMcpClient(){try{this.mcpClient=new a.K({name:"sage-ai-client",version:"1.0.0"});const t=new i.A(new URL("/sse","http://localhost:3001"),{requestInit:{headers:{Accept:"text/event-stream"}}});await this.mcpClient.connect(t),this.addSystemMessage("Connected to MCP server successfully.");const e=await this.mcpClient.listTools();console.log("Available MCP tools:",e),this.formattedTools=[];for(const t of e.tools)this.formattedTools.push({name:t.name,description:t.description,input_schema:t.inputSchema});this.addSystemMessage(`Loaded ${this.formattedTools.length} tools from MCP server.`)}catch(t){console.error("Failed to connect to MCP server:",t),this.addSystemMessage("❌ Failed to connect to MCP server. Some features may not work.")}}async updateAvailableTools(){try{if(!this.mcpClient&&(await this.initializeMcpClient(),!this.mcpClient))throw new Error("Failed to initialize MCP client");const t=await this.mcpClient.listTools();console.log("Available MCP tools:",t),this.formattedTools=[];for(const e of t.tools)this.formattedTools.push({name:e.name,description:e.description,input_schema:e.inputSchema});console.log(`Updated ${this.formattedTools.length} tools from MCP server.`)}catch(t){throw console.error("Failed to update tools:",t),new Error(`Failed to update tools: ${t instanceof Error?t.message:String(t)}`)}}async executeTool(t,e,s,o=3){let a=0;for(;a<=o;)try{if(!this.mcpClient)throw new Error("MCP client not initialized");console.log(`Executing tool ${t} with args:`,e);const o={name:t};e&&"object"==typeof e&&Object.entries(e).forEach((([t,e])=>{o[t]=e})),console.log("Formatted tool args:",o);const a=await this.mcpClient.callTool({name:t,arguments:{...e}});return console.log(`Tool ${t} returned:`,a),{type:"tool_result",tool_use_id:s,content:"object"==typeof a?JSON.stringify(a):String(a)}}catch(t){if(a++,console.error(`Tool execution failed (attempt ${a}/${o+1}):`,t),a>o)return{type:"tool_result",tool_use_id:s,content:`Error: ${t instanceof Error?t.message:String(t)}`};await new Promise((t=>setTimeout(t,1e3*a)))}}addToolResult(t,e){const s=document.createElement("div");s.className="sage-ai-tool-result";const o=document.createElement("div");o.className="sage-ai-tool-result-header",o.innerHTML=`<strong>Tool Result (${t}):</strong>`,s.appendChild(o);const a=document.createElement("pre");a.className="sage-ai-tool-result-content",a.textContent=JSON.stringify(e,null,2),s.appendChild(a),this.chatHistory.appendChild(s),this.chatHistory.scrollTop=this.chatHistory.scrollHeight}async getLastCellInfo(){if(!this.mcpClient)return"";try{const t=await this.mcpClient.callTool({name:"get_last_cell_info"});if(console.log("Last cell info:",t),t&&t.content&&t.content.cell_id)return`\n\n[last_cell_id: ${t.content.cell_id}]`}catch(t){console.warn("Could not get last cell info:",t)}return""}async sendMessage(){const t=this.chatInput.value.trim();if(!t)return;if(this.chatInput.value="",this.chatInput.focus(),!this.apiKey)return void this.addSystemMessage("❌ API key is not set. Please configure it in the settings.");this.anthropicClient||this.setApiKey(this.apiKey);let e=t;try{const t=await this.getLastCellInfo();t&&(e+=t,console.log("Augmented message with cell info:",e))}catch(t){console.warn("Failed to augment message:",t)}this.addUserMessage(t);const s=document.createElement("div");s.className="sage-ai-message sage-ai-loading",s.textContent="AI is thinking...",this.chatHistory.appendChild(s),this.chatHistory.scrollTop=this.chatHistory.scrollHeight;const o=[{role:"user",content:e}];try{await this.updateAvailableTools();const t=[];let e=await this.callClaude(o);for(;;){const s=[];let a=!1;if(e.content&&e.content.length>0)for(const i of e.content)if("text"===i.type)console.log("Received text response from Claude"),t.push(i.text),s.push(i);else if("tool_use"===i.type){a=!0;const n=i.name,l=i.input;console.log(`Claude wants to use tool: ${n}`);const c=`[Calling tool ${n} with args ${JSON.stringify(l)}]`;t.push(c),this.addToolCalls([{id:i.id,name:i.name,input:i.input}]),s.push(i),o.push({role:"assistant",content:s});const r=await this.executeTool(n,l,i.id);this.addToolResult(n,r.content),o.push({role:"user",content:[r]});try{e=await this.callClaude(o)}catch(e){t.push(`Error from Claude API: ${e instanceof Error?e.message:String(e)}`);break}break}if(!a){if(s.length>0){const t=s.filter((t=>"text"===t.type)).map((t=>t.text));t.length>0&&this.addAIResponse(t.join("\n\n"))}break}}this.chatHistory.contains(s)&&this.chatHistory.removeChild(s)}catch(t){s.parentNode===this.chatHistory&&this.chatHistory.removeChild(s),this.addSystemMessage(`❌ ${t instanceof Error?t.message:"An error occurred while communicating with the AI service."}`)}}async callClaude(t){if(!this.anthropicClient)throw new Error("Anthropic client not initialized");const e=t.slice(-15),s=await this.anthropicClient.messages.create({model:this.modelName,max_tokens:4096,messages:e,tools:this.formattedTools.length>0?this.formattedTools:void 0});return console.log("Anthropic response:",s),s}onAfterShow(t){this.chatInput.focus()}setApiKey(t){this.apiKey=t,t?(this.anthropicClient=new(l())({apiKey:t,dangerouslyAllowBrowser:!0}),this.addSystemMessage("API key configured successfully.")):(this.anthropicClient=null,this.addSystemMessage("⚠️ No API key set. Please configure it in the settings."))}setModelName(t){t&&t!==this.modelName&&(this.modelName=t,this.addSystemMessage(`Model changed to: ${this.modelName}`))}addUserMessage(t){const e=document.createElement("div");e.className="sage-ai-message sage-ai-user-message",e.innerHTML=`<strong>You:</strong> ${t}`,this.chatHistory.appendChild(e),this.chatHistory.scrollTop=this.chatHistory.scrollHeight,this.messageHistory.push({role:"user",content:t})}addAIResponse(t){const e=document.createElement("div");e.className="sage-ai-message sage-ai-ai-message",e.innerHTML=`<strong>AI:</strong> ${t}`,this.chatHistory.appendChild(e),this.chatHistory.scrollTop=this.chatHistory.scrollHeight,this.messageHistory.push({role:"assistant",content:t})}addToolCalls(t){if(!t||0===t.length)return;const e=document.createElement("div");e.className="sage-ai-tool-calls";const s=document.createElement("div");s.className="sage-ai-tool-calls-header",s.innerHTML="<strong>Tool Calls:</strong>",e.appendChild(s),t.forEach(((t,s)=>{const o=document.createElement("div");o.className="sage-ai-tool-call";const a=document.createElement("span");a.className="sage-ai-tool-call-badge",a.textContent=t.name||"Unknown Tool";const i=document.createElement("pre");i.className="sage-ai-tool-call-content",i.textContent=JSON.stringify(t.input||{},null,2),o.appendChild(a),o.appendChild(i),e.appendChild(o),console.log(`Tool Call ${s+1}:`,t)})),this.chatHistory.appendChild(e),this.chatHistory.scrollTop=this.chatHistory.scrollHeight}addSystemMessage(t){const e=document.createElement("div");e.className="sage-ai-message sage-ai-system-message",e.textContent=t,this.chatHistory.appendChild(e),this.chatHistory.scrollTop=this.chatHistory.scrollHeight}}var r=s(507),h=s(569);const d={id:"sage-agent:plugin",description:"Sage AI - Your AI Data Partner",autoStart:!0,requires:[h.ICommandPalette],optional:[r.ISettingRegistry],activate:(t,e,s)=>{console.log("JupyterLab extension sage-agent is activated!");const o=new h.WidgetTracker({namespace:"sage-ai-chat"}),a=()=>{const e=new c;return o.add(e),t.shell.add(e,"right",{rank:1e3}),e};let i=a();s&&Promise.all([s.load(d.id),t.restored]).then((([t])=>{(t=>{const e=t.get("apiKey").composite;i.setApiKey(e);const s=t.get("modelName").composite;i.setModelName(s),t.changed.connect((()=>{const e=t.get("apiKey").composite,s=t.get("modelName").composite;i.setApiKey(e),i.setModelName(s)}))})(t)})).catch((t=>{console.error("Failed to load sage-ai settings",t)}));const n="sage-ai:open-chat";t.commands.addCommand(n,{label:"Open AI Chat",execute:()=>{i.isDisposed&&(i=a()),i.isAttached||t.shell.add(i,"right",{rank:1e3}),t.shell.activateById(i.id)}}),e.addItem({command:n,category:"AI Tools"})}},m=d}}]);