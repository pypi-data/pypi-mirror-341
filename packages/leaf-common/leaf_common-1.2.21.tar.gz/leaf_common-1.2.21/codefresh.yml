version: "1.0"

steps:

    clone-repo:
        type: git-clone
        title: "Clone ${{CF_REPO_NAME}} repo"
        repo: "${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}"
        git: github
        revision: "${{CF_REVISION}}"
        depth: 0  # Fetch full history, not a shallow clone

    determine_latest_git_tag:
        title: "Determine Latest Git tag"
        description: "Find the current git tag for use later in pipeline"
        type: "freestyle"
        image: alpine/git:v2.30.0
        working_directory: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        commands:
          - cf_export SETUPTOOLS_SCM_PRETEND_VERSION=`git tag --sort=-v:refname | head -n 1`

    prepare_for_build:
        description: "Do any common preparation for tests"
        type: "freestyle"
        image: alpine:3.13.1
        working_directory: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        commands:
            # Set up some variables

            # It's our experience the the CF_VOLUME can leak between builds
            # Attempt to do some isolation.
            - export TEMP_DIR_OUTSIDE_CONTAINER=${{CF_VOLUME_PATH}}/tmp/${{CF_BUILD_ID}}
            - mkdir -p ${TEMP_DIR_OUTSIDE_CONTAINER}

            - export APP_HOME=/home/${{CF_REPO_OWNER}}
            - export APP_SOURCE=${APP_HOME}/${{CF_REPO_NAME}}

            # cf_export these variables so these vars can be used in later build steps
            - cf_export TEMP_DIR_OUTSIDE_CONTAINER APP_HOME APP_SOURCE

            # set the wheel package name which is the
            # the repo name, but with underscores instead of dashes
            - cf_export PACKAGE_NAME=`echo ${{CF_REPO_NAME}} | sed s/-/_/g`

    repo_build:
        title: "Building Docker image for ${{CF_REPO_NAME}}"
        type: "build"
        image_name: "leaf/${{CF_REPO_NAME}}"
        tag: ${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_SHORT_REVISION}}
        working_directory: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        dockerfile: "build_scripts/Dockerfile"
        disable_push: true
        buildkit: true
        # Docker BuildKit has different output. This progress plain allows
        # us to see the "old" style output which is useful.
        progress: "plain"
        build_arguments:
            - REPO=${{CF_REPO_NAME}}
            - USERNAME=${{CF_REPO_OWNER}}
            - APP_HOME=${{APP_HOME}}
            - APP_SOURCE=${{APP_SOURCE}}

    run_all_tests:
        type: parallel
        fail_fast: false
        steps:
            run_pylint:
                title: Run pylint
                # Use the image created by the repo_build step above
                # See: https://codefresh.io/docs/docs/codefresh-yaml/variables/
                image: ${{repo_build}}
                description: "Run Pylint"
                # Specifically run in the APP_SOURCE directory inside the container,
                # *not* in the CF_VOLUME as we had erroneously done before.
                working_directory: ${{APP_SOURCE}}
                # Allow the pipeline to continue if this step fails
                fail_fast: false
                commands:
                    - pip3 freeze
                    - build_scripts/run_pylint.sh

            run_flake8:
                title: Run flake8
                # Use the image created by the repo_build step above
                # See: https://codefresh.io/docs/docs/codefresh-yaml/variables/
                image: ${{repo_build}}
                description: "Run Flake8"
                # Specifically run in the APP_SOURCE directory inside the container,
                # *not* in the CF_VOLUME as we had erroneously done before.
                working_directory: ${{APP_SOURCE}}
                # Allow the pipeline to continue if this step fails
                fail_fast: false
                commands:
                    - pip3 freeze
                    # See repo ~/.flake8 file for settings
                    - flake8

            run_unit_tests:
                title: Run unit tests
                # Use the image created by the repo_build step above
                # See: https://codefresh.io/docs/docs/codefresh-yaml/variables/
                image: ${{repo_build}}
                description: Run unit tests (pytests)
                # Specifically run in the APP_SOURCE directory inside the container,
                # *not* in the CF_VOLUME as we had erroneously done before.
                working_directory: ${{APP_SOURCE}}
                fail_fast: false
                commands:
                    - pip3 freeze
                    - pytest --version
                    - >
                      pytest
                      --verbose
                      -m "not integration"
                      --timer-top-n 10
                      --cov=${PACKAGE_NAME}

    clean_up:
        description: "Clean up after ourselves"
        type: "freestyle"
        image: alpine:3.13.1
        working_directory: ${{CF_VOLUME_PATH}}/${{CF_REPO_NAME}}
        commands:
            # Clean up anything senstive we do not want to leak between builds
            - rm -rf ${{TEMP_DIR_OUTSIDE_CONTAINER}}
            - rm -rf ${{CF_VOLUME_PATH}}/${{CF_BUILD_ID}}

    all_test_status:
        title: Check For Failed Tests
        description: "Handle any fail cases that may have occurred"
        image: alpine:3.13.1
        commands:
            - exit 1
        when:
            condition:
                any:
                    static_test_fail:
                        steps.run_pylint.result == "failure" ||
                        steps.run_flake8.result == "failure" ||
                        steps.run_unit_tests.result == "failure" ||
                        steps.run_all_tests.result == "failure"

    build_wheel:
        title: Build wheel file
        image: ${{repo_build}}
        shell: bash
        description: Build wheel file for distribution
        working_directory: ${{APP_SOURCE}}
        commands:
            - python -m build --wheel
            - mkdir -p ${{CF_VOLUME_PATH}}/${{CF_BUILD_ID}}
            - cd dist && mv ${PACKAGE_NAME}*.whl ${{CF_VOLUME_PATH}}/${{CF_BUILD_ID}}

    upload-to-S3:
        title: Upload Wheel to S3
        type: aws-s3
        arguments:
            REGION: us-west-2
            BUCKET: ${{UNILEAF_WHEEL_BUCKET}}
            S3_INTEGRATION: amazon
            S3_PREFIX: ${{PACKAGE_NAME}}/
            SOURCE: ${{CF_VOLUME_PATH}}/${{CF_BUILD_ID}}
        when:
            condition:
                all:
                # This is idiomatic Codefresh for detecting if ${{CF_RELEASE_TAG}} has a value. We only want to deploy
                # on Github release triggers, and this variable gets populated only for Github releases.
                    deploy_tagged_builds_only: 'includes("${{CF_RELEASE_TAG}}", "{{CF_RELEASE_TAG}}") == false'
