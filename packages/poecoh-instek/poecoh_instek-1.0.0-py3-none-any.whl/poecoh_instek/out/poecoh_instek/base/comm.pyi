from serial import Serial
from typing import overload

class InstekException(BaseException): ...

class Status:
    ch1_cc: bool
    ch2_cc: bool
    beep: bool
    output: bool
    def __init__(self, string: str) -> None: ...

class Identity:
    manufacturer: str
    model: str
    serial: str
    firmware: str
    def __init__(self, string: str) -> None: ...

class Comm:
    sp: Serial
    def __init__(self, port: str, baud: int) -> None: ...
    def open(self) -> None: ...
    def close(self) -> None: ...
    def write(self, string: str) -> None: ...
    def read(self, timeout: float) -> str | None: ...
    def error(self) -> None: ...
    def purge(self) -> None: ...
    def clear_errors(self) -> None: ...
    def command(self, string: str, timeout: float) -> str | None: ...
    @overload
    def voltage(self, channel: int) -> float: ...
    @overload
    def voltage(self, channel: int, value: float) -> None: ...
    @overload
    def current(self, channel: int) -> float: ...
    @overload
    def current(self, channel: int, value: float) -> None: ...
    def status(self) -> Status: ...
    def identity(self) -> Identity: ...
    def baud(self) -> None: ...
    def output(self, state: bool) -> None: ...
    def beep(self, state: bool) -> None: ...
    def tracking(self, mode: int) -> None: ...
    @staticmethod
    def test(port: str) -> Identity | None: ...

def requireResponse(response: str | None) -> str: ...
