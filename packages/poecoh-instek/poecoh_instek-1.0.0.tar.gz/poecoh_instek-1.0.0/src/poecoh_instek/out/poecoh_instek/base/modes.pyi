from .channels import Channel3 as Channel3, Channel4 as Channel4, ChannelI, ChannelS, Comm as Comm, Identity as Identity, InstekException as InstekException

__all__ = ['Comm', 'Independent', 'Series', 'SeriesCommon', 'Parallel', 'Identity', 'InstekException', 'Channel4', 'Channel3']

class BaseMode:
    def __init__(self, comm: Comm) -> None: ...
    @property
    def output(self) -> bool: ...
    @output.setter
    def output(self, state: bool) -> None: ...
    @property
    def beep(self) -> bool: ...
    @beep.setter
    def beep(self, state: bool) -> None: ...

class Independent(BaseMode):
    def __init__(self, comm: Comm) -> None: ...
    @property
    def ch1(self) -> ChannelI: ...
    @property
    def ch2(self) -> ChannelI: ...

class Series(BaseMode):
    def __init__(self, comm: Comm) -> None: ...
    @property
    def voltage(self) -> float: ...
    @voltage.setter
    def voltage(self, value: float) -> None: ...
    @property
    def current(self) -> float: ...
    @current.setter
    def current(self, value: float) -> None: ...
    @property
    def cc(self) -> bool: ...

class SeriesCommon(BaseMode):
    def __init__(self, comm: Comm) -> None: ...
    @property
    def voltage(self) -> float: ...
    @voltage.setter
    def voltage(self, value: float) -> None: ...
    @property
    def ch1(self) -> ChannelS: ...
    @property
    def ch2(self) -> ChannelS: ...

class Parallel(BaseMode):
    def __init__(self, comm: Comm) -> None: ...
    @property
    def voltage(self) -> float: ...
    @voltage.setter
    def voltage(self, value: float) -> None: ...
    @property
    def current(self) -> float: ...
    @current.setter
    def current(self, value: float) -> None: ...
    @property
    def cc(self) -> bool: ...
