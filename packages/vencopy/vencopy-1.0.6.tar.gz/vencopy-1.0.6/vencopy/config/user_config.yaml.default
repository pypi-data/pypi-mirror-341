#-*- coding:utf-8 -*-
# __license__ = "BSD-3-Clause"

# This config holds specifications for a venco.py run that can be configured by the user.

global:
  multiple_scenarios:
    run_multiple_scenarios: False
    scenario_name: "workflows"
  dataset: MiD17 # options are MiD08, MiD17, VF, KiD
  debug: False
  number_lines_debug: 50
  run_label: ""
  write_output_to_disk:
      metadata: False
      parse_output: False
      grid_output: False
      flex_output: False
      diary_output: False
      aggregator_output: False
      processor_output:
        normalised_weekly_profiles: True
        normalised_annual_profiles: True
        fleet_annual_profiles: False
  absolute_path:
      MiD08: PATH_TO_DATA_FOLDER
      MiD17: PATH_TO_DATA_FOLDER  # e.g. C:/MiD/proprietary/B2/STATA
      KiD: PATH_TO_DATA_FOLDER
      eurostat_population: PATH_TO_DATA_FOLDER
      vencopy_root: USER_FOLDER_ROOT
  consider_temperature_cycle_dependency:
    annual: False
    season: None  # 'all' will assign the season based on the real timestamp of the trip, specifying a seasons implies all trips took place in that specific season
    daily: False  # day-night cycle
    day_night_factors:
      winter:
        temperature_range: 6.52 # temperature ranges between AVERAGE max and min of a day (highest/lowest factors and ranges are only used if consider_daily_day_night_cycle is activated)
        highest_temperature_hour: 14
        consumption_at_highest_hour: min # define if the the hour with the highest temperature is also the hour with the highest consumption or lowest consumption (max or min)
        lowest_temperature_hour: 1
        consumption_at_lowest_hour: max
      spring:
        temperature_range: 10.58
        highest_temperature_hour: 14
        consumption_at_highest_hour: min 
        lowest_temperature_hour: 3
        consumption_at_lowest_hour: max
      summer:
        temperature_range: 11.37
        highest_temperature_hour: 14
        consumption_at_highest_hour: max 
        lowest_temperature_hour: 3
        consumption_at_lowest_hour: min
      fall:
        temperature_range: 6.53
        highest_temperature_hour: 13
        consumption_at_highest_hour: min
        lowest_temperature_hour: 1
        consumption_at_lowest_hour: max

dataparsers:
  encryption_password: "PW"
  seasons: 
    filter_season_post_assignment: False  # filter for one season after season is assigned with "all"
    season_filter: spring  # spring, summer, fall, winter
  split_overnight_trips: True
  location_park_before_first_trip:
    MiD08: "HOME"
    MiD17: "HOME"
    KiD: "HOME"
    VF: "HOME"
  subset_vehicle_segment: False
  vehicle_segment:
    VF: "S"  # options are: S, M, L
    KiD: "Car" # options: "Light motorised vehicle", "Car", "Van", "Truck", "Tractor unit", "Coach", "Other tractor unit", "Agriculture and forestry tractor unit", "Other"
    MiD17: None
  subset_area_type: False
  area_type: 
      MiD17: 1 # options: 1 (kreisfreie Großstadt), 2 (städtischer Kreis), 3 (ländlicher Kreis mit Verdichtungsansätzen), 4 (dünn besiedelter ländlicher Kreis)
      VF: 1 # options: 1 (kreisfreie Großstadt), 2 (städtischer Kreis), 3 (ländlicher Kreis mit Verdichtungsansätzen), 4 (dünn besiedelter ländlicher Kreis)
      KiD: 1 # options: 1 (BBR 1 and 2), 2 (BBR 3 and 4), 3 (BBR 5, 6 and 7), 4 (BBR 8 and 9), (exclude 10 == unbekannt)

gridmodellers:
  minimum_parking_time: 900 # charging power is set to zero if parking time lower than <minimum_parking_time> in seconds
  grid_model: "simple" # Options are "simple" and "probability"
  losses: True # Take into account charging station losses
  force_last_trip_home: True # Require that all last trips end home
  rated_power_simple: 11
  charging_infrastructure_mappings: # Simple grid model: Explicit mapping given for each location aka parking purpose
      "DRIVING": False
      "HOME": True
      "WORK": True
      "SCHOOL": False
      "SHOPPING": True
      "LEISURE": True
      "OTHER": False
      "NA": False
      # KiD additional purposes below
      "PEOPLE_MOBILITY": False
      "TRANSPORT": False
      "SERVICES": False
  grid_availability_distribution: # Grid model 3: Probabilities given for each location aka trip purpose and capacity
      "DRIVING":
        0: 1
      "HOME":
        0: 0.1
        3.7: 0.3
        11: 0.5
        22: 0
      "WORK":
        0: 0.2
        3.7: 0.2
        11: 0.6
        22: 0
        50: 0
      "SCHOOL":
        0: 0.2
        3.7: 0.2
        11: 0.6
        22: 0
        50: 0
      "SHOPPING":
        0: 0.2
        3.7: 0.2
        11: 0.6
        22: 0
        50: 0
      "LEISURE":
        0: 0.2
        3.7: 0.2
        11: 0.6
        22: 0
        50: 0
      "OTHER":
        0: 0.2
        3.7: 0.2
        11: 0.6
        22: 0
        50: 0
      "0.0":
          0: 1
      # KiD additional purposes below
      "HQ":
          11: 0.2
          22: 0.2
          0: 0.6
      "DELIVERY":
          11: 0.2
          22: 0.2
          0: 0.6
  loss_factor: # if gridlosses is activated, the losses are calculated with the general factor, the power of the charging station and the seasonal factor
    general: 0.1 # Gives the power in decimal (percent) that is being lost per rated capacity. See gridModeller for detailed usage.
    winter_factor: 1.5 # factors, 1 would be equal as the general loss with no additional seasonal loss
    spring_factor: 1.03
    summer_factor: 1.3
    fall_factor: 1.03


flexestimators:
  iteration: True  # use iteration for convergence of battery levels at the beginning and end of the day
  filter_fuel_need: True # Should activity chains that require fuel for trip distance satisfaction be filtered out?
  electric_consumption: 
    general: 18 # in kWh/100km, input assumption for specific electric consumption
    winter_factor: 0.3 # factors, 0 would be equal as the general electric consumption
    spring_factor: 0 # please take into account that this is an average that gets adjusted based on the hour of the day and the temperature range in each season if daily_cycle is enabled
    summer_factor: 0.03
    fall_factor: 0
  fuel_consumption: 1.0 # in l/100km, input assumption for specific fuel consumption for auxiliary fuel
  battery:
    battery_capacity: 75 # in kWh, input assumption for battery capacity
    start_soc: 1 # State-of-charge between 0 and 1 at beginning of activity chain
    maximum_soc: 0.97 # in %
    minimum_soc: 0.10 # in %
    max_iterations: 15  # maximum iteration for convergence of battery calculation
    epsilon_battery_level: 0.0001  # Iterations stop once the difference between start and end battery level have decreased to this share of fleet battery level (e.g. 0.01 for 1% would relate to a threshold of 100 Wh per car for a 10 kWh battery capacity.)
  cccv_charging:
    consider_cccv: False  # consider CCCV (constant current constant voltage) for the vehicle battery management system 
    cccv_limit: 0.75 # SOC_start, where charging Constant Curent charging is done and Constanc Voltage Charging takes place
    max_iteration_cccv: 50  # number of maximum iteration steps to calculate CV charge volume
  plugging_behaviour:
    consider_plugging_behaviour: False
    soc_plugging_threshold: 0.60


diarybuilders:
  time_resolution: 15
  is_week_diary: False # Determine if the activity data set comprises weekly activity chains (synthesized by WeekDiaryBuilder)


profileaggregators:
  aggregation_timespan: weekly # options are: daily, weekly
  weight_flow_profiles: False # Currently only used for flow profile aggregation
  alpha: 10 # Only used for state profile aggregation


postprocessor:
  normalisation:
    normalise_profiles: True
    upscaling_base: fleet_size  # options are: fleet_size OR annual_demand
  annual_profiles_creation:
    create_annual_profiles: True
    start_weekday: 1 # 1=Monday
  fleet_profiles_creation:
    create_fleet_profiles: False
    temporal: ['2030'] # modelling year
    spatial: 
      country: DE  # ISO 3166-1 A-2 TODO: add in the postprocessing the country based on dataset name in the metadata
      nuts_level: nuts_0 # options are NUTS_0, NUTS_1, NUTS_2, NUTS_3
    fleet_size_nuts_0: [4100000] # total fleet size for each modelling year (number of vehicles)
    annual_demand_nuts_0: [70]  # total annual demand at country level (TWh)
    yearly_mileage: 12000  # average vehicle yearly mileage to retrieve number of vehicles if upscaling_base = annual_demand
  immobile_vehicles:
    MiD17:
      # Values based on B1 / Autos dataset
      1: 39.03
      2: 35.8559
      3: 37.078
      4: 36.5294
      5: 36.6748
      6: 48.8876
      7: 61.2697
    VF:
      # Values based on B1 / Autos dataset
      1: 39.03
      2: 35.8559
      3: 37.078
      4: 36.5294
      5: 36.6748
      6: 48.8876
      7: 61.2697
    KiD:
      Car:
        1: 33.1
        2: 33.1
        3: 33.1
        4: 33.1
        5: 33.1
        6: 37.6
        7: 37.6
      Van:
        1: 37.4
        2: 37.4
        3: 37.4
        4: 37.4
        5: 37.4
        6: 84.7
        7: 84.7
      Truck:
        1: 32.4
        2: 32.4
        3: 32.4
        4: 32.4
        5: 32.4
        6: 90.8
        7: 90.8
      Tractor unit:
        1: 18.9
        2: 18.9
        3: 18.9
        4: 18.9
        5: 18.9
        6: 86.4
        7: 86.4
      Coach:
        1: 26.8
        2: 26.8
        3: 26.8
        4: 26.8
        5: 26.8
        6: 76.3
        7: 76.3
      Agriculture and forestry tractor unit:
        1: 75.8
        2: 75.8
        3: 75.8
        4: 75.8
        5: 75.8
        6: 79.1
        7: 79.1
      Other tractor unit:
        1: 81.6
        2: 81.6
        3: 81.6
        4: 81.6
        5: 81.6
        6: 87
        7: 87
      Other:
        1: 71.6
        2: 71.6
        3: 71.6
        4: 71.6
        5: 71.6
        6: 82.7
        7: 82.7
      Light motorised vehicle:
        1: 87.5
        2: 87.5
        3: 87.5
        4: 87.5
        5: 87.5
        6: 85.7
        7: 85.7
