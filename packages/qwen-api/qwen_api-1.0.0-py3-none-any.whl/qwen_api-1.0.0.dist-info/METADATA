Metadata-Version: 2.4
Name: qwen-api
Version: 1.0.0
Summary: Unofficial Qwen API Client
Author-email: Ahmad Rosyihuddin <rosyihuddin.dev@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/arosyihuddin/qwen-api
Project-URL: Documentation, https://github.com/arosyihuddin/qwen-api
Project-URL: Repository, https://github.com/arosyihuddin/qwen-api
Project-URL: Issues, https://github.com/arosyihuddin/qwen-api
Keywords: qwen,ai,llm,qwen-api
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Topic :: Software Development :: Build Tools
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.12
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.32.3
Requires-Dist: python-dotenv>=1.1.0
Requires-Dist: sseclient-py>=1.8.0
Requires-Dist: pydantic>=2.11.3
Requires-Dist: pydantic-settings>=2.8.1
Requires-Dist: aiohttp>=3.11.16
Requires-Dist: colorama>=0.4.6
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: mypy; extra == "dev"

# qwen-api

[![PyPI version](https://badge.fury.io/py/qwen-api.svg)](https://pypi.org/project/qwen-api/)

Unofficial Python SDK for accessing [Qwen AI](https://chat.qwen.ai) API.

---

## ‚ú® Features

- Easy-to-use interface to interact with Qwen chat completions
- Support for both sync and async usage
- Streamed response handling
- Built-in auth manager via `.env`
- Fully typed models using `pydantic`

---

## üì¶ Installation

```bash
pip install qwen-api
```

---

## üöÄ Usage

### Basic Usage

```python
from qwen_api.client import Qwen
from qwen_api.types.chat import ChatMessage

client = Qwen()
messages = [
    ChatMessage(role="user", content="Hello! What can you do?")
]

response = client.chat.create(messages=messages, model="qwen-max-latest")
print(response.choices)
```

### Async Usage

```python
import asyncio
from qwen_api.client import Qwen
from qwen_api.types.chat import ChatMessage

async def main():
    client = Qwen()
    messages = [
        ChatMessage(role="user", content="Tell me a joke.")
    ]
    response = await client.chat.acreate(messages=messages, model="qwen-max-latest")
    print(response.choices)

asyncio.run(main())
```

### Streaming

```python
for chunk in client.chat.create(messages=messages, model="qwen-max-latest", stream=True):
    print(chunk.choices)
```

---

## ‚öôÔ∏è Environment Setup

Make sure you have a `.env` file in your root directory with:

```env
QWEN_AUTH_TOKEN=your_api_token
QWEN_COOKIE=your_cookie_value
```

---

## üìÇ Examples

Check the `examples/` folder for more advanced usage.

---

## üìÉ License

Copyright 2025 Ahmad Rosyihuddin

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ‚ÄúSoftware‚Äù), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED ‚ÄúAS IS‚Äù, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

---

## üôã‚Äç‚ôÇÔ∏è Contributing

Contributions, issues, and feature requests are welcome!

1. Fork the project
2. Create your feature branch (`git checkout -b feature/feature-name`)
3. Commit your changes (`git commit -am 'Add new feature'`)
4. Push to the branch (`git push origin feature/feature-name`)
5. Open a Pull Request
