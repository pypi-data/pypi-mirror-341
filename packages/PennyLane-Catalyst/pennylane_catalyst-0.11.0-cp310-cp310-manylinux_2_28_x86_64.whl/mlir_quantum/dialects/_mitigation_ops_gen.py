
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_result_or_value as _get_op_result_or_value,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "mitigation"

@_ods_cext.register_operation(_Dialect)
class ZneOp(_ods_ir.OpView):
  OPERATION_NAME = "mitigation.zne"

  _ODS_REGIONS = (0, True)

  def __init__(self, result, callee, args, folding, numFolds, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(args))
    operands.append(_get_op_result_or_value(numFolds))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["callee"] = (callee if (
    isinstance(callee, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('SymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('SymbolRefAttr')(callee, context=_ods_context))
    attributes["folding"] = (folding if (
    isinstance(folding, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FoldingAttr')) else
      _ods_ir.AttrBuilder.get('FoldingAttr')(folding, context=_ods_context))
    results.extend(result)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def args(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def numFolds(self):
    _ods_variadic_group_length = len(self.operation.operands) - 2 + 1
    return self.operation.operands[1 + _ods_variadic_group_length - 1]

  @builtins.property
  def callee(self):
    return self.operation.attributes["callee"]

  @callee.setter
  def callee(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["callee"] = value

  @builtins.property
  def folding(self):
    return self.operation.attributes["folding"]

  @folding.setter
  def folding(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["folding"] = value

def zne(result, callee, args, folding, num_folds, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ZneOp(result=result, callee=callee, args=args, folding=folding, numFolds=num_folds, loc=loc, ip=ip))
