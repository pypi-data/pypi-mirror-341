name: CI

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request: {}

jobs:
  resolve:
    runs-on: ubuntu-latest
    outputs:
      MSRV: ${{ steps.resolve-msrv.outputs.MSRV }}
      full-build: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build') }}
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: resolve MSRV
        id: resolve-msrv
        run: echo MSRV=`python -c 'import tomllib; print(tomllib.load(open("Cargo.toml", "rb"))["workspace"]["package"]["rust-version"])'` >> $GITHUB_OUTPUT

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt,clippy

      - uses: Swatinem/rust-cache@v2

      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files --verbose
        env:
          PRE_COMMIT_COLOR: always
          SKIP: test

  build-sdist:
    name: build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable
      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_sdist
          path: dist

  build:
    needs: [resolve]
    name: build on ${{ matrix.os }} / ${{ matrix.target }}
    if: ${{ needs.resolve.outputs.full-build == 'true' }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows, macos, linux]
        target: [x86_64, aarch64]
        # onyx runtime seems to have issues with these targets, need to find alternative
        # solution, fine to skip for now.
        exclude:
          - os: windows
            target: aarch64
          - os: linux
            target: aarch64

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
          rust-toolchain: stable

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

      - run: |
          pip install -U twine
          twine check --strict dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_${{ matrix.os }}_${{ matrix.target }}
          path: dist

  inspect-pypi-assets:
    needs: [build, build-sdist]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: list dist files
        run: |
          ls -lh dist/
          ls -l dist/
          echo "`ls dist | wc -l` files"

      - name: extract and list sdist file
        run: |
          mkdir sdist-files
          tar -xvf dist/*.tar.gz -C sdist-files
          tree -a sdist-files

      - name: extract and list wheel file
        run: |
          ls dist/*py3-none-*linux*x86_64.whl | head -n 1
          python -m zipfile --list `ls dist/*py3-none-*linux*x86_64.whl | head -n 1`

  test-builds:
    name: test build on ${{ matrix.os }}
    needs: [build]

    strategy:
      fail-fast: false
      matrix:
        os: [windows, macos, linux]
        target: [x86_64, aarch64]
        # onyx runtime seems to have issues with these targets, need to find alternative
        # solution, fine to skip for now.
        exclude:
          - os: windows
            target: aarch64
          - os: linux
            target: aarch64

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: run tests
        run: |
          python3 -m pip install mcpdb --no-index --no-deps --find-links dist --force-reinstall
          mcpdb --help

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [resolve, lint, test-builds, build-sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
          allowed-skips: ${{ needs.resolve.outputs.full-build == 'true' && '' || 'test-builds' }}

  release:
    needs: [check]
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - run: |
          pip install -U twine
          ls -l dist/
          twine check --strict dist/*

      - name: upload to pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
