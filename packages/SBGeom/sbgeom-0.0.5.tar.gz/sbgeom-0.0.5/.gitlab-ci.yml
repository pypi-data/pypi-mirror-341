
stages:
  - build_docs
  - build_linux_wheels
  - deploy

build_docs:
  stage: build_docs
  image: gcc    
  before_script:
      # Install build dependencies
      - apt-get update && apt-get -y install cmake
  script:
      - apt-get --assume-yes install python3-pip
      - apt-get --assume-yes install python3-venv
      - python3 -m venv .venv
      - source .venv/bin/activate
      - apt-get --assume-yes install doxygen 
      - pip install sphinx 
      - pip install breathe
      - pip install sphinx-rtd-theme
      - pip install sphinxcontrib-bibtex
                    
      - cmake -S . -B build/
      - cd build/
      - make Sphinx
      - cd ../
      - mv build/src/docs/sphinx/ public/
  environment: production
  artifacts:
      paths:
        - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH


build_linux_wheels_job: 
  stage: build_linux_wheels
  image: python:3.12
  rules:   
    - when: manual # Run pipeline for all other cases
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
  script:
    - curl -sSL https://get.docker.com/ | sh
    - python -m pip install cibuildwheel==2.18.1
    - cibuildwheel --output-dir dist
  artifacts:
    paths:
      - dist/

pypi:
    stage: deploy
    image: python:3.12 
    rules:
      - when: manual # Run pipeline for all other cases
  # make a docker daemon available for cibuildwheel to use
    cache: {}
    script:
        - pip install -U twine
        - pip install build
        - python -m build --sdist        
        - twine upload dist/*
