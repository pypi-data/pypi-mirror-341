from collections.abc import Iterator, Sequence
from typing import Annotated, overload

from numpy.typing import ArrayLike


class Coil:
    def Scale_Points(self, Factor: float) -> None: ...

    def Get_Centre(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]: ...

    def Set_Centre(self, Centre: Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]) -> None: ...

    def __repr__(self) -> str: ...

    def Mesh_Triangles_Centroid(self, width_phi: float, width_R: float, number_of_vertices: int) -> Mesh: ...

    def Mesh_Triangles_RMF(self, width_phi: float, width_R: float, number_of_vertices: int) -> Mesh: ...

    def Mesh_Triangles_Frenet(self, width_phi: float, width_R: float, number_of_vertices: int) -> Mesh: ...

    def Mesh_Triangles_Rotated_From_Centroid(self, width_phi: float, width_R: float, number_of_vertices: int, rotation: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]) -> Mesh: ...

    @overload
    def Position(self, arg: float, /) -> Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]: ...

    @overload
    def Position(self, arg: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], /) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    @overload
    def Tangent(self, arg: float, /) -> Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]: ...

    @overload
    def Tangent(self, arg: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], /) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Finite_Size_Lines_Centroid(self, width_phi: float, width_R: float, number_of_points: int) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Finite_Size_Lines_RMF(self, width_phi: float, width_R: float, number_of_points: int) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Finite_Size_Lines_Frenet(self, width_phi: float, width_R: float, number_of_points: int) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Finite_Size_Lines_Rotated_From_Centroid(self, width_phi: float, width_R: float, number_of_points: int, rotation: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Return_Sampling_Curve(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

class Coil_Set:
    def __init__(self, arg: Sequence[Coil], /) -> None: ...

    def Truncate_to_Angles(self, arg0: float, arg1: float, /) -> None: ...

    def Scale_Points(self, Factor: float) -> None: ...

    def Number_of_Coils(self) -> int: ...

    def __getitem__(self, arg: int, /) -> Coil: ...

    def __iter__(self) -> Iterator[Coil]: ...

    def Mesh_Triangles_Centroid(self, width_phi: float, width_R: float, number_of_vertices: int) -> Mesh: ...

    def Mesh_Triangles_RMF(self, width_phi: float, width_R: float, number_of_vertices: int) -> Mesh: ...

    def Mesh_Triangles_Frenet(self, width_phi: float, width_R: float, number_of_vertices: int) -> Mesh: ...

    def Mesh_Triangles_Rotated_From_Centroid(self, width_phi: float, width_R: float, number_of_vertices: int, rotation: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]) -> Mesh: ...

class Discrete_Coil(Coil):
    def __init__(self, Positions: Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]) -> None: ...

    def Get_Vertices(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Set_Vertices(self, Vertices: Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]) -> None: ...

class Flux_Surface_Settings:
    def __init__(self, Number_of_Surfaces: int, n_tor: int, m_pol: int, Symmetry: int) -> None: ...

    @property
    def number_of_surfaces(self) -> int: ...

    @property
    def n_tor(self) -> int: ...

    @property
    def m_pol(self) -> int: ...

    @property
    def symmetry(self) -> int: ...

    def __repr__(self) -> str: ...

class Flux_Surfaces:
    @overload
    def __init__(self, R_mnc: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Z_mns: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Flux_Surface_Settings: Flux_Surface_Settings) -> None: ...

    @overload
    def __init__(self, Dictionary: dict) -> None: ...

    def __repr__(self) -> str: ...

    def Rmnc(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')]: ...

    def Zmns(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')]: ...

    def m_pol_vec(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]: ...

    def n_tor_vec(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]: ...

    def flux_surface_settings(self) -> Flux_Surface_Settings: ...

    def Return_Dictionary(self) -> object: ...

    def Return_Axis_Position(self, phi: float) -> Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]: ...

    @overload
    def Return_Position(self, s: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], LCFS_distance_label: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], theta: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], phi: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')]: ...

    @overload
    def Return_Position(self, s: float, LCFS_distance_label: float, theta: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], phi: float) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    @overload
    def Return_Position(self, s: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], LCFS_distance_label: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], theta: float, phi: float) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    @overload
    def Return_Position(self, s: float, LCFS_distance_label: float, theta: float, phi: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    @overload
    def Return_Position(self, s: float, LCFS_distance_label: float, theta: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], phi: float) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    @overload
    def Return_Position(self, s: float, LCFS_distance_label: float, theta: float, phi: float) -> Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]: ...

    @overload
    def Return_Cylindrical_Position(self, s: float, LCFS_distance_label: float, theta: float, phi: float) -> Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]: ...

    @overload
    def Return_Cylindrical_Position(self, s: float, LCFS_distance_label: float, theta: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], phi: float) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    @overload
    def Return_Normal(self, s: float, LCFS_distance_label: float, theta: float, phi: float) -> Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]: ...

    @overload
    def Return_Normal(self, s: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], LCFS_distance_label: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], theta: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], phi: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Mesh_Surface(self, s: float, LCFS_distance_label: float, N_lines_phi: int, N_lines_theta: int, phi_min: float, phi_max: float, Normals_Facing_Outwards: bool = True) -> Mesh: ...

    def Mesh_Tetrahedrons(self, s: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], LCFS_distance_label: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], N_lines_phi: int, N_lines_theta: int, phi_min: float, phi_max: float) -> Mesh: ...

    def Mesh_Surfaces_Closed(self, s_1: float, s_2: float, LCFS_distance_label_1: float, LCFS_distance_label_2: float, N_lines_phi: int, N_lines_theta: int, phi_min: float, phi_max: float) -> Mesh: ...

    def Mesh_Watertight_Flux_Surfaces(self, s_start: float, LCFS_distance_label_start: float, d_s: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], d_LCFS_distance_2: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], N_lines_phi: int, N_lines_theta: int, phi_min: float, phi_max: float) -> tuple[Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')], list[Annotated[ArrayLike, dict(dtype='uint32', shape=(None, 3), order='C')]]]: ...

    def Mesh_Tiled_Surface(self, s: float, LCFS_distance_label: float, N_lines_phi: int, N_lines_theta: int, Tile_Fraction: float, phi_min: float, phi_max: float) -> Mesh: ...

    def Mesh_Detailed_Tiled_Surface(self, s: float, LCFS_distance_label: float, N_lines_phi: int, N_lines_theta: int, Tile_Fraction: float, Normal_Inwards: float, phi_min: float, phi_max: float) -> Mesh: ...

class Flux_Surfaces_Fourier_Extended(Flux_Surfaces):
    @overload
    def __init__(self, R_mnc: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Z_mns: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Flux_Surface_Settings_Base: Flux_Surface_Settings, LCFS_distance_labels_extension: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], Rmnc_extension: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Zmns_extension: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Flux_Surface_Settings_extension: Flux_Surface_Settings) -> None: ...

    @overload
    def __init__(self, Flux_Surfaces: Flux_Surfaces, LCFS_distance_labels_extension: Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')], Rmnc_extension: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Zmns_extension: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Flux_Surface_Settings_extension: Flux_Surface_Settings) -> None: ...

    def Rmnc_Extension(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')]: ...

    def Zmns_Extension(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')]: ...

    def Extension_Labels(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None), order='C')]: ...

    def Flux_Surface_Settings_Extension(self) -> Flux_Surface_Settings: ...

class Flux_Surfaces_Normal_Extended(Flux_Surfaces):
    @overload
    def __init__(self, R_mnc: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Z_mns: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Flux_Surface_Settings: Flux_Surface_Settings) -> None: ...

    @overload
    def __init__(self, Flux_Surfaces: Flux_Surfaces) -> None: ...

class Flux_Surfaces_Normal_Extended_Constant_Phi(Flux_Surfaces):
    @overload
    def __init__(self, R_mnc: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Z_mns: Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')], Flux_Surface_Settings: Flux_Surface_Settings) -> None: ...

    @overload
    def __init__(self, Flux_Surfaces: Flux_Surfaces) -> None: ...

class Fourier_Coil(Coil):
    def __init__(self, xyz_cos: Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')], xyz_sin: Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')], centre: Annotated[ArrayLike, dict(dtype='float64', shape=(3), order='C')]) -> None: ...

    def Get_Fourier_Cos(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Set_Fourier_Cos(self, Fourier_Cos: Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]) -> None: ...

    def Get_Fourier_Sin(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]: ...

    def Set_Fourier_Sin(self, Fourier_Sin: Annotated[ArrayLike, dict(dtype='float64', shape=(None, 3), order='C')]) -> None: ...

class Mesh:
    def positions(self) -> Annotated[ArrayLike, dict(dtype='float64', shape=(None, None), order='C')]: ...

    def vertices(self) -> Annotated[ArrayLike, dict(dtype='uint32', shape=(None, None), order='C')]: ...

    def __repr__(self) -> str: ...
