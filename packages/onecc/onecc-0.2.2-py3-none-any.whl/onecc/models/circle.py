'''Wrapper of circle models in memory'''

from circle_schema import circle  # type: ignore

from pathlib import Path

# WARNING
# -------
#
# Be prepared for the circle schema version updates!
#
# To be more specific, it could be a problem if there's a mismatch between:
# - the installed `circle-schema` python package version
# - the schema version of the circle model generated by `onecc` command.
#
# To make the issue worse, there's no way to figure out the version of a given circle model.
#
# This can especially be a problem when unpacking(=deserializing) the buffer into native object of
# `ModelT` type. If a generated circle file uses a new feature that an old circle-schema python
# package cannot recognize, that information can be lost during unpacking.


class CircleModel:
  '''Abstraction of circle models'''

  # ------------------------------------------------------------------------------------------------
  # Design note: Keep the raw buffer as a single source of truth
  # ------------------------------------------------------------------------------------------------
  # Q-1) Why not use `circle.Model.Model` instead?
  #
  # A-1) `circle.Model.Model` does not provide any API to serialize the object back to a buffer,
  #      which is required to save `CircleModel` back to a file.
  #
  #      NOTE Internally, `circle.Model.Model` is just a viewer of the given `_buf`.
  #      It does not maintain a separate copy of the buffer.
  #      Creating `circle.Model.Model` from `_buf` on the fly is very lightweight because of this.
  #
  # Q-2) Why not use `circle.Model.ModelT` instead? (from the native object API)
  #
  # A-2) To make `CircleModel.save()` stable over circle schema version updates.
  #      (See the "WARNING" section at top of this file for details.)
  # ------------------------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------------------------
  # Design note: `CircleModel` is read-only
  # ------------------------------------------------------------------------------------------------
  # As of Oct 2022, flatbuffer Python API does not support mutation.
  #
  # TODO Revisit here if the flatbuffers Python compiler exposes mutation API.
  #
  # Q) Why not use the native object API to allow mutation?
  # A) All information should be preserved during steps 1 and 3 in the below conversion sequence,
  #    to allow saving `CircleModel` back to a file.
  #
  #    :: buffer --(1)--> native object --(2)--> mutated native object --(3)--> buffer ::
  #
  #    However, there's no guarantee that the step 1 preserves all information.
  #    (See the "WARNING" section at top of this file for details.)
  # ------------------------------------------------------------------------------------------------

  # Restrict the data members of `CircleModel` (to keep `_buf` as a single source of truth).
  # ref: https://docs.python.org/3/reference/datamodel.html#slots
  __slots__ = ['_buf', '_name']

  def __init__(self, *, path):
    '''Initialize the circle model.

    :param path: Path to a `.circle` file.
    '''
    with open(path, 'rb') as f:
      self._buf: bytes = f.read()

    self._name: str = Path(path).stem

  def _content(self) -> circle.Model.Model:
    return circle.Model.Model.GetRootAs(self._buf, 0)

  def name(self) -> str:
    '''Human-readable name of the model'''
    assert self._name is not None
    return self._name

  def save(self, path) -> None:
    '''Save this circle model object to a given `path` as a file.'''
    path = Path(path)

    with open(path, 'wb') as f:
      f.write(self._buf)

    assert path.is_file()
