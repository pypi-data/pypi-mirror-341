import { TabNode } from 'flexlayout-react';
import { ButtonProps } from 'antd';
import { AddListener } from './callback';
import { WorkspaceItem, Entity, WorkspaceItemModel, WorkspaceRecordIdentifier, OsWorkspaceEntity, Relationship, OsTag, TagAttributes, ConceptFilter, FocusListItem, Concept, EntityBase } from './model';
import { TagWithRelationship, Workspace, WorkspaceChangeEmitter, WorkspaceIdentifier, WorkspacePermission, WorkspacePermissionValue, WorkspaceRecordWithRelationships } from './workspace';
import { EventEmitterType } from './event';
import { ActionContext, ContextMenuGroup, ContextMenuOptions, ContextMenuRequest } from './action';
import { ModalTemplateProps, SavedTemplate } from './templates';
import { App, AppServiceCallProps } from './app';
import { SearchOptions, SearchProps, SearchXperienceProps } from './search';
import { Styler, StylerConfig, StylerOption } from './styling';
import { GraphSpec } from './graph';
import { UserProfile } from './user';
import { ReactCssProperties, ReactRef, ReactNode } from './react-types';
import { Ontology } from './ontology';
import { OsAPIClient } from './client';
import { AIClient } from './ai';
/**
 * Represents properties for an icon.
 * @beta
 */
export type IconProps = {
    /**
     * Name of the icon.
     */
    icon: string;
    /**
     * Optional class name for styling.
     */
    className?: string;
    /**
     * Rotation angle for the icon.
     */
    rotate?: number;
    /**
     * Whether the icon should spin.
     */
    spin?: boolean;
    /**
     * CSS properties for the icon.
     */
    style?: ReactCssProperties;
    /**
     * Reference to the HTML span element.
     */
    iconRef?: ReactRef<HTMLSpanElement>;
};
/**
 * Represents a watcher.
 * @beta
 */
export type Watcher = {
    /**
     * Application ID.
     */
    app_id: string;
    /**
     * Application name.
     */
    app_name: string;
    /**
     * Watcher name.
     */
    watcher_name: string;
    /**
     * Constants for the watcher.
     */
    const: [key: string, value: any][];
    /**
     * Description of the watcher.
     */
    description: string;
    /**
     * File associated with the watcher.
     */
    file: string;
    /**
     * Interval for the watcher.
     */
    interval: string;
    /**
     * Name of the watcher.
     */
    name: string;
    /**
     * Parameters for the watcher.
     */
    params: [key: string, value: any][];
    /**
     * Semantically bound items.
     */
    semantically_bound: string[];
};
/**
 * Options for saving a file.
 * @beta
 */
export type SaveFileOptions = {
    /**
     * Path to save the file.
     */
    path?: string | undefined;
};
/**
 * Options for saving an item.
 * @beta
 */
export type SaveOptions = SaveFileOptions & {
    /**
     * Whether to save as a draft.
     */
    draft?: boolean;
    /**
     * Whether to save as a new file.
     */
    saveAs?: boolean;
    /**
     * Application related to the item.
     */
    app?: WorkspaceItem;
};
/**
 * Parameters for adding a comment.
 * @beta
 */
export type AddCommentParams = {
    /**
     * Parent UID for the comment.
     */
    os_parent_uid?: string;
    /**
     * Contents of the comment.
     */
    contents: string;
    /**
     * Slug for the comment.
     */
    slug?: string;
    /**
     * Workspace for the comment.
     */
    os_workspace?: string;
};
/**
 * Interface for desktop settings.
 * @beta
 */
export interface DesktopSettings {
    /**
     * Gets the IDs of open workspaces.
     */
    getOpenWorkspaceIds: () => Promise<string[]>;
    /**
     * Sets the IDs of open workspaces.
     */
    setOpenWorkspaceIds: (ids: string[]) => Promise<void>;
    /**
     * Listener for changes in open workspace IDs list (list gets updated on eg close / open event)
     */
    onOpenWorkspaceIdsChanged: AddListener<string[]>;
}
/**
 * Options for desktop actions.
 * @beta
 */
export type DesktopActionOptions = {
    /**
     * ID of the tab.
     */
    tabId?: string;
    /**
     * ID of the tab to place beside.
     */
    besideTabId?: string;
    /**
     * Whether to auto-select the tab.
     */
    autoSelectTab?: boolean;
    /**
     * Function to call on closing the tab.
     */
    onCloseTab?: () => void;
    /**
     * Additional options for the action.
     */
    with?: string;
    /**
     * Initial state for the action.
     */
    initialState?: any;
    /**
     * Whether to open in a new tab.
     */
    newTab?: boolean;
    /**
     * Whether to open in a modal window.
     */
    modal?: boolean;
    /**
     * Whether to preserve the state of the tab after action is finished. Used with modal.
     */
    preserve?: boolean;
    /**
     * Whether to raise the tab to the front.
     */
    raiseOnly?: boolean;
    /**
     * Open tab in a new tabset
     */
    newTabset?: boolean;
    /**
     * Wait for the tab to open
     */
    awaitShowTab?: boolean;
};
/**
 * Context for desktop actions.
 * @beta
 */
export interface DesktopActionContext extends ActionContext {
    /**
     * Event emitter type.
     */
    ee: EventEmitterType;
    /**
     * Prefix for event topics.
     */
    eventTopicPrefix?: string;
    /**
     * Options for the action.
     */
    options?: DesktopActionOptions;
}
/**
 * Type for icons.
 * @beta
 */
export type Icon = IconProps | string;
/**
 * Group for desktop action menu items.
 * @beta
 */
export type DesktopActionMenuItemGroup = ContextMenuGroup;
/**
 * Filter for desktop actions.
 * @beta
 */
export type DesktopActionFilter = (context: DesktopActionContext) => boolean;
/**
 * Function for desktop actions.
 * @beta
 */
export type DesktopAction = (context: DesktopActionContext) => any;
/**
 * Menu item for desktop actions.
 * @beta
 */
export type DesktopActionMenuItem = {
    /**
     * Label for the menu item.
     */
    label: ReactNode;
    /**
     * Key for the menu item.
     */
    key: string;
    /**
     * Icon for the menu item.
     */
    icon: Icon;
    /**
     * Service related to the menu item.
     */
    service?: string;
    /**
     * Additional options for the menu item.
     */
    with?: string;
    /**
     * Group for the menu item. Default is 'general'.
     */
    group?: DesktopActionMenuItemGroup;
    /**
     * Subgroup for the menu item.
     */
    subgroup?: string;
    /**
     * Order of the menu item.
     */
    order?: number;
    /**
     * Children menu items.
     */
    children?: DesktopActionMenuItem[] | ((props: DesktopActionContext) => DesktopActionMenuItem[]);
    /**
     * Filter for accepting the menu item.
     */
    accepts: DesktopActionFilter;
    /**
     * Function to invoke the action.
     */
    invoke: DesktopAction;
};
/**
 * Type for notifications.
 * @beta
 */
export type OsNotification = string | {
    /**
     * ID of the notification.
     */
    id?: string;
    /**
     * Message of the notification.
     */
    message: string | ReactNode;
    /**
     * Description of the notification.
     */
    description?: string;
    /**
     * Level of the notification.
     */
    level?: 'info' | 'success' | 'error' | 'warning';
    /**
     * Additional details for the notification.
     */
    detail?: {
        [key: string]: any;
    };
    /**
     * Placement of the notification.
     */
    placement?: 'top' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
};
/**
 * Properties for showing a tab.
 * @beta
 */
export type ShowTabProps = {
    /**
     * Application related to the tab.
     */
    app: WorkspaceItem;
    /**
     * Item related to the tab.
     */
    item?: WorkspaceItem;
    /**
     * Options for showing the tab.
     */
    options?: DesktopActionOptions;
};
/**
 * Type for progress information.
 * @beta
 */
export type OsProgress = {
    /**
     * Key for the progress item.
     */
    key: string;
    /**
     * Label for the progress item.
     */
    label?: ReactNode;
    /**
     * Type of job for the progress item.
     */
    job_type?: string;
    /**
     * Status of the progress item.
     */
    status?: 'active' | 'success' | 'exception' | 'normal' | undefined;
};
/**
 * Affirmative option for the confirmation modal.
 * @beta
 */
export declare const OS_CONFIRM_MODAL_YES = true;
/**
 * Negative option for the confirmation modal.
 * @beta
 */
export declare const OS_CONFIRM_MODAL_NO = false;
/**
 * Option to get out of the confirmation modal.
 * @beta
 */
export declare const OS_CONFIRM_MODAL_CANCEL: undefined;
/**
 * Response type for confirmation modal.
 * @beta
 */
export type OS_CONFIRM_MODAL_RESPONSE = typeof OS_CONFIRM_MODAL_YES | typeof OS_CONFIRM_MODAL_NO | typeof OS_CONFIRM_MODAL_CANCEL;
/**
 * Properties for confirmation modal.
 * @beta
 */
export type OsConfirmProps = string | {
    /**
     * Title of the confirmation modal.
     */
    title: string;
    /**
     * Icon for the confirmation modal.
     */
    icon?: string;
    /**
     * Content of the confirmation modal.
     */
    content?: string;
    /**
     * Text for the OK button.
     */
    okText?: string;
    /**
     * Properties for the OK button.
     */
    okButtonProps?: ButtonProps;
    /**
     * Text for the cancel button.
     */
    cancelText?: string;
    /**
     * Task ID related to the confirmation modal.
     */
    taskID?: string;
};
/**
 * Properties for creating an entity form.
 * @beta
 */
export type CreateEntityFormProps = {
    /**
     * Entity for the form.
     */
    entity?: Entity;
    /**
     * Workspace for the form. Defaults to activeWorkspace (when set) if no os_workspace is passed
     */
    os_workspace?: string;
    /**
     * Fallback Workspace for the form in case there's no activeWorkspace or os_workspace
     */
    fallback_workspace?: string;
    /**
     * Concept related to the form.
     */
    concept?: string;
};
/**
 * Properties for creating relations dialog.
 * @beta
 */
export type CreateRelationsDialogProps = {
    /**
     * Source entity for the relations.
     */
    source?: Entity;
    /**
     * Workspace for the relations.
     */
    os_workspace?: string;
    /**
     * Target item for the relations.
     */
    target?: FocusListItem;
    /**
     * Whether to create a new record.
     */
    createRecord?: boolean;
    /**
     * Name of the relation.
     */
    relationName?: string;
    /**
     * Default target concept for the relations.
     */
    defaultTargetConcept?: string;
};
/**
 * Properties for saving as modal.
 * @beta
 */
export type SaveAsModalProps = {
    /**
     * Item to be saved.
     */
    item: WorkspaceItem;
    /**
     * Application related to the item.
     */
    app?: WorkspaceItem;
};
/**
 * Context for pasting entities.
 * @beta
 */
export type EntityPasteContext = {
    /**
     * Counts the number of entities.
     */
    count: () => Promise<number>;
    /**
     * Fetches entities with a limit.
     */
    fetch: (limit?: number) => Promise<Entity[]>;
};
/**
 * Parameters for opening a desktop.
 * @beta
 */
export type DesktopOpenParams = {
    /**
     * Options for the desktop action.
     */
    options?: DesktopActionOptions;
    /**
     * Items to be opened.
     */
    items: Entity[];
};
/**
 * Reasons for task cleanup.
 * @beta
 */
export type TaskCleanupReason = 'canceled' | 'completed';
/**
 * Type for attachments.
 * @beta
 */
export type AttachmentType = string | Blob | ArrayBuffer | Record<string, any>;
/**
 * Response type for attachments.
 * @beta
 */
export type AttachmentResponseType = 'text' | 'blob' | 'arrayBuffer' | 'json' | 'url';
/**
 * Options for getting attachments.
 * @beta
 */
export interface GetAttachmentOptions<T extends AttachmentType> {
    /**
     * Path to the attachment.
     */
    path?: string;
    /**
     * Default value for the attachment.
     */
    default?: T;
    /**
     * Response type for the attachment.
     */
    responseType?: AttachmentResponseType;
}
/**
 * Options for displaying a progress bar.
 * @beta
 */
export type WithProgressBarOptions = {
    /**
     * Type of job for the progress bar.
     */
    job_type: string;
    /**
     * Label for the progress bar.
     */
    label?: string | JSX.Element;
    /**
     * Prefix for event topics.
     */
    eventTopicPrefix?: string;
    /**
     * Error message for the progress bar.
     */
    errorToast?: string | boolean;
};
/**
 * Context for desktop styler.
 * @beta
 */
export type DesktopStylerContext = {
    /**
     * Graph specification.
     */
    graph: GraphSpec;
    /**
     * Selected graph specification.
     */
    selected?: GraphSpec;
};
/**
 * Options for exporting items.
 * @beta
 */
export type ExportOptions = {
    /**
     * Filename for the export.
     */
    filename?: string;
};
/**
 * Options for importing ZIP files.
 * @beta
 */
export type ImportZipOptions = {
    /**
     * Whether to overwrite existing items.
     */
    overwrite?: boolean;
    /**
     * Target location for the import.
     */
    target?: string;
    /**
     * Whether to include content in the import.
     */
    include_content?: boolean;
    /**
     * Whether to include dashboards in the import.
     */
    include_dashboards?: boolean | 'if_missing';
};
/**
 * Options for pasting context.
 * @beta
 */
export type PasteContextOptions = {
    /**
     * First limit for the context.
     */
    limit1?: number;
    /**
     * Second limit for the context.
     */
    limit2?: number;
    /**
     * Record for the context.
     */
    record?: Entity;
    /**
     * Records for the context.
     */
    records?: Entity[];
    /**
     * Query for the context.
     */
    query?: ConceptFilter;
    /**
     * Whether to return a SavedSet entity when a folder is dropped.
     */
    preferSavedSet?: boolean;
};
/**
 * Parameters for drag start.
 * @beta
 */
export type DragStartParams = {
    /**
     * Record being dragged.
     */
    record: Entity;
    /**
     * Records being dragged.
     */
    records: Entity[];
    /**
     * Topic for drag end event.
     */
    dragEndTopic: string;
};
/**
 * Parameters for drag end.
 * @beta
 */
export type DragEndParams = {
    /**
     * Record being dragged.
     */
    record: Entity;
    /**
     * Records being dragged.
     */
    records: Entity[];
    /**
     * X-coordinate of the drag end position.
     */
    x: number;
    /**
     * Y-coordinate of the drag end position.
     */
    y: number;
};
/**
 * Options for fetching an entity.
 * @beta
 */
export type FetchEntityOptions = {};
/**
 * Options for pasting folders.
 * @beta
 */
export type FolderPasteOptions = {
    /**
     * Whether to include folders in the paste.
     */
    folders?: boolean;
    /**
     * Whether to include files in the paste.
     */
    files?: boolean;
    /**
     * Whether to paste recursively.
     */
    recursive?: boolean;
};
/**
 * Options for file tree.
 * @beta
 */
export type FileTreeOptions = {
    /**
     * Whether to recurse in the file tree.
     */
    recurse?: boolean;
    /**
     * Whether to exclude the root from the file tree.
     */
    exclude_root?: boolean;
    /**
     * Whether to flatten the file tree.
     */
    flat?: boolean;
    /**
     * Whether to show minimal information in the file tree.
     */
    minimal?: boolean;
    /**
     * Whether to include structure in the file tree.
     */
    structure?: boolean;
};
/**
 * Represents information about the current user.
 * @beta
 */
export type Whoami = {
    /**
     * Asynchronous channel for the user.
     */
    async_channel: string;
    /**
     * Email of the user.
     */
    email: string | null;
    /**
     * JWT token for the user.
     */
    os_jwt: string;
    /**
     * Username of the user.
     */
    username: string;
    /**
     * Roles of the user.
     */
    timbr_roles: string[];
    /**
     * Whether the user is a superuser (having the ADMIN_ALL_WORKSPACES username or role)
     */
    is_superuser: boolean;
};
/**
 * Options for copying items.
 * @beta
 */
export type CopyOptions = {
    /**
     * Name of the item to be copied.
     */
    os_item_name?: string;
};
/**
 * Options for extracting entities.
 * @beta
 */
export type ExtractEntitiesOptions = {
    hydrate?: boolean;
};
export type WorkspaceConfig = Partial<{
    description: string;
    os_icon: string;
    color: string;
    id?: string;
}>;
/**
 * Interface for desktop actions.
 * @beta
 */
export interface Desktop extends DesktopSettings, WorkspaceChangeEmitter {
    /**
     * Refreshes the desktop.
     */
    refresh: () => Promise<void>;
    /**
     * Opens a workspace.
     */
    openWorkspace: (ws: WorkspaceIdentifier | WorkspaceIdentifier[] | string[], showTab?: boolean) => Promise<void>;
    /**
     * Gets the active workspace.
     */
    getActiveWorkspace: (prompt?: boolean) => Promise<string | undefined>;
    /**
     * Sets the active workspace.
     */
    setActiveWorkspace: (workspace: string | undefined) => Promise<void>;
    /**
     * Closes a workspace.
     */
    closeWorkspace: (ws: WorkspaceIdentifier) => Promise<void>;
    /**
     * Copies an item.
     */
    copy: (source: WorkspaceItem, target: WorkspaceItem, options?: CopyOptions) => Promise<WorkspaceItem[]>;
    /**
     * Lists all workspaces with optional permissions.
     */
    listAllWorkspaces: (permissions?: WorkspacePermissionValue) => Promise<WorkspaceItem[]>;
    /**
     * This might not be enough, add a listener to {@link WorkspaceChangeEmitter.onOpenWorkspacesChanged} to keep getting updated.
     * In react components, prefer useDesktopWorkspaces hook.
     */
    getOpenWorkspaces: () => Promise<Workspace[]>;
    /**
     * Gets the OntologyAPI.
     * @returns a promise that resolves to the current ontology
     */
    getOntology: () => Promise<Ontology>;
    /**
     * Fetches an attachment based on the provided workspace identifier and path or ID.
     *
     * @param entity - The entity to which the attachment belongs.
     * @param options - Additional parameters
     * @returns A promise that resolves to the attachment of type T.
     */
    getAttachment: <T extends AttachmentType>(entity: Entity, options?: GetAttachmentOptions<T>) => Promise<T>;
    /**
     * @beta
     * Gets options for stylers.
     */
    getStylerOptions: () => Promise<StylerOption[]>;
    /**
     * @beta
     * Gets a styler by name and context.
     */
    getStyler: (name: string, context: DesktopStylerContext) => Promise<Styler>;
    /**
     * Gets a workspace by identifier.
     */
    getWorkspace: (ws: WorkspaceIdentifier, options?: {
        shouldRetry?: boolean;
    }) => Promise<Workspace | undefined>;
    /**
     * Gets items in a workspace by name.
     */
    getWorkspaceItems(os_item_name: string): Promise<WorkspaceItem[]>;
    /**
     * Gets the OsAPIClient.
     */
    getOsAPIClient(): Promise<OsAPIClient>;
    /**
     * Gets the AI client.
     */
    getAIClient(): Promise<AIClient>;
    /**
     * Applies a tag to an entity.
     */
    applyTag: (os_workspace: string, tag: OsTag | TagAttributes, entity: Entity | Entity[]) => Promise<void>;
    /**
     * Removes a tag from an entity.
     */
    removeTag: (os_workspace: string, tag: OsTag | TagAttributes, entity: Entity | Entity[]) => Promise<void>;
    /**
     * Updates a tag.
     */
    updateTag: (tag: OsTag) => Promise<OsTag>;
    /**
     * Gets an item by workspace identifier.
     */
    getItem: <T>(ws: WorkspaceIdentifier<T>) => Promise<WorkspaceItem<T>>;
    /**
     * Gets items by workspace identifiers.
     */
    getItems: (ws: WorkspaceIdentifier[]) => Promise<WorkspaceItem[]>;
    /**
     * Gets tags for an entity.
     */
    getTags: (entity: Entity) => Promise<TagWithRelationship[]>;
    /**
     * Gets available tags for an entity in a workspace.
     */
    getAvailableTags: (entity: Entity, workspace?: string) => Promise<OsTag[]>;
    /**
     * Gets templates by layout or filter
     */
    getTemplates: (layout?: string | ((template: SavedTemplate) => boolean)) => Promise<SavedTemplate[]>;
    /**
     * Gets a template by name or entity or filter with an optional default template.
     */
    getTemplate: (name: string | Entity | ((template: SavedTemplate) => boolean), defaultTemplate?: string) => Promise<SavedTemplate>;
    /**
     * Gets the named app if it is on the desktop and in a running state.
     */
    getApp: (name: string) => Promise<WorkspaceItem | undefined>;
    /**
     * Gets schema items by content type.
     */
    getSchemaItems(os_item_content_type: string): Promise<WorkspaceItem[]>;
    /**
     * Creates a workspace by name.
     */
    createWorkspace: (name: string, config?: WorkspaceConfig) => Promise<WorkspaceItem>;
    /**
     * Creates a private workspace for user by name.
     */
    createPrivateWorkspace: (name: string, config?: WorkspaceConfig) => Promise<Workspace>;
    /**
     * Connects two entities with a relationship in a workspace.
     */
    connect: (relationship: Relationship | string, from: Entity, to: Entity, os_workspace?: string) => Promise<WorkspaceItem>;
    /**
     * Saves an item with optional save options.
     */
    save: (item: (Partial<WorkspaceItem> & WorkspaceItemModel) | WorkspaceRecordIdentifier | WorkspaceRecordWithRelationships, options?: SaveOptions) => Promise<WorkspaceItem>;
    /**
     * Saves a file to an item with optional save options.
     */
    saveFile: (item: WorkspaceItem, file: File | string, options?: SaveOptions) => Promise<WorkspaceItem>;
    /**
     * Imports items.
     */
    import: (items: any[]) => Promise<void>;
    /**
     * Imports a ZIP file with optional import options.
     */
    importZip: (file: File, options?: ImportZipOptions) => Promise<void>;
    /**
     * Exports an item or items with optional export options.
     */
    export: (item: WorkspaceItem | WorkspaceItem[], options?: ExportOptions) => Promise<void>;
    /**
     * Fetches an entity from the index, or from the ontology if not found in the index.
     */
    fetchEntity: (entity: EntityBase, options?: FetchEntityOptions) => Promise<Entity>;
    /**
     * Extracts entities from some text which may be json or a list of urls.
     */
    extractEntities: (text: string, options?: ExtractEntitiesOptions) => Promise<Entity[]>;
    /**
     * Gets a file tree for a workspace or folder with optional file tree options.
     */
    getFilesTree: (workspace_or_folder: WorkspaceItem, options?: FileTreeOptions) => Promise<WorkspaceItem[]>;
    /**
     * Show the search modal and return the selected results.
     */
    getSearchResults: (params: undefined | string | SearchProps, enableSelection?: boolean) => Promise<Entity[] | undefined>;
    /**
     * Opens records with default action or as specified in the optional desktop action options.
     */
    open(records: Entity | Entity[], options?: DesktopActionOptions): Promise<void>;
    /**
     * Deletes an item or items recursively.
     */
    delete: (item: WorkspaceRecordIdentifier | WorkspaceRecordIdentifier[], recurse?: boolean) => Promise<void>;
    /**
     * Deletes records in a workspace by ID.
     */
    delete_workspace_records: (workspace_id: string) => Promise<void>;
    /**
     * Deletes local concept records in a workspace by base concept.
     */
    delete_local_concept_records: (workspace_id: string, base_concept: string) => Promise<void>;
    /**
     * Searches the index using the query string
     * @param query OpenSearch qeuery string.
     * @param options query options
     * @returns a promise resolving to the found entities.
     */
    search: (query: string, options?: SearchOptions) => Promise<Entity[]>;
    /**
     * Searches experience with optional search options.
     */
    searchXperience: (options?: SearchXperienceProps) => Promise<Entity[]>;
    /**
     * Shows a tab with given properties.
     */
    showTab: (props: ShowTabProps) => Promise<void>;
    /**
     * Closes a tab with given properties.
     */
    closeTab: (props: ShowTabProps) => Promise<void>;
    /**
     * Calls an application service with given properties.
     */
    callAppService: (props: AppServiceCallProps) => Promise<any>;
    /**
     * Shows a context menu with given properties.
     */
    showContextMenu: (props: ContextMenuRequest) => Promise<void>;
    /**
     * Shows a toast notification.
     */
    showToast: (notification: OsNotification) => Promise<void>;
    /**
     * Clears a toast notification by ID.
     */
    clearToast: (id: string) => Promise<void>;
    /**
     * Shows a progress item.
     */
    showProgress: (progress: OsProgress) => Promise<void>;
    /**
     * Wraps a promise with a progress bar.
     */
    withProgressBar: <T>(promise: Promise<T>, options?: WithProgressBarOptions) => Promise<T>;
    /**
     * Shows a confirmation modal.
     */
    showConfirm: (props: OsConfirmProps) => Promise<OS_CONFIRM_MODAL_RESPONSE>;
    /**
     * Shows a file upload dialog.
     */
    showFileUpload: (folder: WorkspaceItem) => Promise<WorkspaceItem[]>;
    /**
     * Shows a form for creating an entity.
     */
    showCreateEntityForm: (props: CreateEntityFormProps) => Promise<OsWorkspaceEntity[]>;
    /**
     * Shows a dialog for creating relations.
     */
    showCreateRelationsDialog: (props: CreateRelationsDialogProps) => Promise<void>;
    /**
     * Shows a modal for saving as.
     */
    showSaveAsModal: (props: SaveAsModalProps) => Promise<WorkspaceItem | undefined>;
    /**
     * Gets a paste context with optional options.
     */
    getPasteContext: (options: PasteContextOptions) => Promise<Entity[]>;
    /**
     * Shows a modal template.
     */
    showModalTemplate: (props: ModalTemplateProps) => Promise<void>;
    /**
     * Adds a comment to an entity.
     */
    addComment: (about: Entity, comment: AddCommentParams) => Promise<Entity>;
    /**
     * Adds a watch intent to an entity.
     */
    addWatchIntent: (entity: Entity, watcher: Watcher) => Promise<Entity>;
    /**
     * Removes a watch intent by workspace and intent ID.
     */
    removeWatchIntent: (os_workspace: string, intent_id: string) => Promise<void>;
    /**
     * Gets workspace permissions by IDs.
     */
    getWorkspacePermission: (os_worpsaces: string[]) => Promise<{
        [os_workspace: string]: WorkspacePermission;
    }>;
    /**
     * Gets the user profile.
     */
    getUser: () => Promise<UserProfile>;
    /**
     * Deploys an application with optional initial secrets.
     */
    deployApp: (app: WorkspaceItem | App, initialSecrets?: {
        [key: string]: string;
    }) => Promise<WorkspaceItem>;
    /**
     * Undeploys an application.
     */
    undeployApp: (app: WorkspaceItem | App) => Promise<WorkspaceItem>;
    /**
     * Gets information about the current user.
     */
    whoami: () => Promise<Whoami>;
    /**
     * Gets the focus list.
     */
    getFocusList: () => Promise<FocusListItem[]>;
    /**
     * Adds entities to the focus list with optional type and tab name.
     */
    addToFocusList: (entities: Entity[], type?: 'single' | 'group', tabName?: string) => Promise<FocusListItem[]>;
    /**
     * Removes entities from the focus list with optional type and tab name.
     */
    removeFromFocusList: (entities: Entity[], type?: 'single' | 'group', tabName?: string) => Promise<FocusListItem[]>;
    /**
     * Gets the image URL for an entity.
     */
    getImageUrl: (entity: EntityBase) => Promise<string>;
    /**
     * Gets images for an entity.
     */
    getImages: (entity: Entity) => Promise<Entity[]>;
    /**
     * Gets icon code for an entity, concept, or string.
     */
    internalGetIconCode: (x: Entity | Concept | string, defaultIcon?: string) => Promise<string>;
    /**
     * Gets JSON schema for a concept.
     */
    getJSONSchema: (concept: string) => Promise<{
        schema: string;
        schemaUI: string;
    }>;
    /**
     * Connect an attachment to an entity as featured_in
     */
    addAttachment: (entity: WorkspaceItem, file?: WorkspaceItem) => void;
    /**
     * Trigger a modal to allow users to manage the unzipping and extraction process within the workspace.
     */
    unzipFiles: (entity: WorkspaceItem, file: File) => void;
    /**
     * Get config files
     */
    getConfigFiles: (name: string) => Promise<WorkspaceItem[]>;
    /**
     * "Cache" for workspaces, avoiding to return a modal error, if this workspace was fetched before
     */
    workspaceStore: {
        [os_workspace: string]: Workspace;
    };
    getWhitelabelingInfo(): Promise<{
        OCTOSTAR_MAIN_LOGO: string;
        OCTOSTAR_FAVICON: string;
        OCTOSTAR_SPINNER: string;
    }>;
}
/**
 * Interface for app registry.
 * @beta
 */
export type AppRegistry = {
    /**
     * Registers a tab component.
     */
    registerTabComponent: ({ component, factory, }: {
        component: string;
        factory: (node: TabNode) => ReactNode;
    }) => void;
    /**
     * Registers an action.
     */
    registerAction: (action: DesktopActionMenuItem) => void;
    /**
     * @beta
     * Registers a styler.
     */
    registerStyler: (styler: StylerConfig) => () => void;
};
/**
 * Properties for workspace item title.
 * @beta
 */
export type WorkspaceItemTitleProps = DesktopActionContext & {
    /**
     * Whether to show hidden children in the workspace.
     */
    showHiddenChildren?: 'workspace' | boolean;
    /**
     * Menu options with extra action items.
     */
    menuOptions?: ContextMenuOptions & {
        extraActionItems?: DesktopActionMenuItem[];
    };
    /**
     * Whether the item is expanded.
     */
    expanded?: boolean;
    /**
     * Selected items in left sidebar
     */
    selectedItems: WorkspaceItem[];
    /**
     * If the component it is being used inside a Markdown component
     */
    markdown?: boolean;
};
//# sourceMappingURL=desktop.d.ts.map