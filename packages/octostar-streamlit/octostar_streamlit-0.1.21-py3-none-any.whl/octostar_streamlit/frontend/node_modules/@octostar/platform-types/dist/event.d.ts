/**
 * @beta
 * Type representing an event emitter with methods to manage events.
 */
export type EventEmitterType = {
    /**
     * Emits an event.
     * @param event - The name or symbol of the event.
     * @param args - The arguments to pass to the event listeners.
     */
    emit: (event: string | symbol, ...args: any[]) => void;
    /**
     * Registers an event listener.
     * @param event - The name or symbol of the event.
     * @param fn - The function to call when the event is emitted.
     */
    on: (event: string | symbol, fn: (...args: any[]) => void) => void;
    /**
     * Registers a one-time event listener.
     * @param event - The name or symbol of the event.
     * @param fn - The function to call when the event is emitted.
     */
    once: (event: string | symbol, fn: (...args: any[]) => void) => void;
    /**
     * Removes an event listener.
     * @param event - The name or symbol of the event.
     * @param fn - The function to remove from the event listeners.
     */
    off: (event: string | symbol, fn: (...args: any[]) => void) => void;
};
/**
 * @beta
 * Type representing an event name, which can be a string or symbol.
 */
export type EventName = string | symbol;
/**
 * @beta
 * Type representing a custom event listener.
 * @template L - The type of the event payload.
 * @param payload - The payload of the event.
 */
export type CustomEventListener<L> = (payload: L) => void;
/**
 * @beta
 * Type representing a function that produces events.
 * @param eventName - The name of the event.
 * @param data - The data associated with the event.
 * @returns The result of the event production.
 */
export type EventProducer = (eventName: EventName, data: any) => any;
/**
 * @beta
 * Type representing a function that publishes events.
 * @template T - The type of the event data.
 * @param eventName - The name of the event.
 * @param data - The data associated with the event.
 */
export type EventPublisher = <T>(eventName: EventName, data: T) => void;
/**
 * @beta
 * Type representing a function that unsubscribes from events.
 * @template L - The type of the event listener payload.
 * @param eventName - The name of the event.
 * @param listener - The event listener to remove.
 */
export type EventUnsubscriber = <L>(eventName: EventName, listener: CustomEventListener<L>) => void;
/**
 * @beta
 * Type representing a function that subscribes to events.
 * @template L - The type of the event listener payload.
 * @param eventName - The name of the event.
 * @param listener - The event listener to add.
 * @returns The function to unsubscribe the event listener.
 */
export type EventSubscriber = <L>(eventName: EventName, listener: CustomEventListener<L>) => EventUnsubscriber;
/**
 * @beta
 * Type representing the event context, including methods to manage event publishing and subscription.
 */
export type EventContextType = {
    /** The event emitter instance. */
    EE: EventEmitterType;
    /** Function to publish events. */
    publish: EventPublisher;
    /** Function to subscribe to events. */
    subscribe: EventSubscriber;
    /** Function to unsubscribe from events. */
    unsubscribe: EventUnsubscriber;
};
//# sourceMappingURL=event.d.ts.map