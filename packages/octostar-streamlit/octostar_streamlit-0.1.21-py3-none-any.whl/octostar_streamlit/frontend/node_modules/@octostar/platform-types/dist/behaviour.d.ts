import { GraphSpec } from './graph';
import { Entity } from './model';
/**
 * @beta
 * Type representing a set of behaviors with various methods for entity and graph operations.
 */
export type Behaviour = {
    /**
     * Gets the count of entities.
     * @returns A promise that resolves to the number of entities.
     */
    getEntitiesCount?: () => Promise<number>;
    /**
     * Gets a list of entities.
     * @param limit - Optional limit on the number of entities to retrieve.
     * @returns A promise that resolves to an array of entities.
     */
    getEntities?: (limit?: number) => Promise<Entity[]>;
    /**
     * Gets a single entity.
     * @returns A promise that resolves to an entity.
     */
    getEntity?: () => Promise<Entity>;
    /**
     * Gets the content associated with the behavior.
     * @returns A promise that resolves to the content.
     */
    getContent?: () => Promise<any>;
    /**
     * Gets the graph specification.
     * @returns A promise that resolves to the graph specification or undefined if not available.
     */
    getGraph?: () => Promise<GraphSpec | undefined>;
    /**
     * Opens the associated entity or content with the default action.
     * @returns A promise that resolves when the operation is complete.
     */
    open?: () => Promise<void>;
    /**
     * Edits the associated entity or content with the default edit action.
     * @returns A promise that resolves when the operation is complete.
     */
    edit?: () => Promise<void>;
};
//# sourceMappingURL=behaviour.d.ts.map