/**
 * The type for the chat model.
 */
export type ChatModel = {
    model_name: string;
    description: string;
};
/**
 * The options for the prompt.
 */
export type PromptOptions = {
    model?: string;
    apiKey?: string;
    stream?: boolean;
    enableRag?: boolean;
    cohereKey?: string;
};
export interface ChatMessage {
    /**
     * The id of the message. This is used to identify the message in the conversation.
     * It is generated by the chat agent, and is used to update the message in the conversation.
     * (It is repeated in each update, but this is ok because it is used to identify the message in the conversation.)
     */
    id: string;
    /**
     * The role of the message.
     */
    role: 'user' | 'assistant' | 'system';
    /**
     * The content of the message.
     * For `update` and `complete` messages, this is the partial or final response.
     * For `add_entities` and `remove_entities` messages, this is the json encoded list of entities.
     */
    content: string;
    /**
     * The type of the message.
     */
    type?: 'update' | 'complete' | 'add_entities' | 'remove_entities';
    /**
     * The timestamp of the message in ISO 8601 format.
     */
    timestamp?: string;
}
/**
 * The interface for the AI client.
 */
export interface AIClient {
    /**
     * Get the chat models.
     */
    getChatModels(): Promise<ChatModel[]>;
    /**
     * Prompt the AI.
     */
    prompt(prompt: string, options?: PromptOptions): Promise<string>;
}
//# sourceMappingURL=ai.d.ts.map