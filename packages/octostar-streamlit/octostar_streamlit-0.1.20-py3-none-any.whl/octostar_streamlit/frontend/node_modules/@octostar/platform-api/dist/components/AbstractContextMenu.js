import { desktopApi } from '../apis';
/**
 * @beta
 * Abstract class for creating a context menu.
 */
export class AbstractContextMenu extends HTMLElement {
    constructor() {
        super();
        this.trigger = ['contextMenu'];
        this.attachShadow({ mode: 'open' });
        this.shadowRoot.innerHTML = `
        <style>
          :host {
            cursor: pointer;
            width: 100%;
            display: flex;
            justify-content: space-between;
          }
        </style>
        <slot></slot>
        <slot name='menu-slot'></slot>
      `;
        this.addEventListener('contextmenu', this.handleRightClick.bind(this));
        this.addEventListener('mouseenter', this.onMouseEnter.bind(this));
        this.addEventListener('click', this.handleClick.bind(this));
    }
    connectedCallback() {
        this.updateProperties();
    }
    disconnectedCallback() {
        this.removeEventListener('contextmenu', this.handleRightClick);
        this.removeEventListener('mouseenter', this.onMouseEnter);
        this.removeEventListener('click', this.handleClick);
    }
    updateProperties() {
        if (this.hasAttribute('trigger')) {
            this.trigger = this.getAttribute('trigger').split(',');
        }
    }
    handleRightClick(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.trigger.includes('contextMenu')) {
            this.publishMouseEvent(event);
        }
    }
    onMouseEnter(event) {
        if (this.trigger.includes('hover')) {
            event.preventDefault();
            this.publishMouseEvent(event);
        }
    }
    handleClick(event) {
        event.preventDefault();
        event.stopPropagation();
        if (this.trigger.includes('click')) {
            this.publishMouseEvent(event);
        }
    }
    publishMouseEvent(event) {
        const x = event.clientX;
        const { y } = this.getBoundingClientRect();
        const context = this.getContext();
        if (context?.item) {
            context.items = context.items || [context.item];
        }
        this.publishRequest({
            ...context,
            x,
            y,
        });
    }
    publishRequest(request) {
        (this.desktop || desktopApi()).showContextMenu(request);
    }
}
//# sourceMappingURL=AbstractContextMenu.js.map