import { Callback, Unsubscribe } from './callback';
import { EConnection } from './graph';
import { Concept, Entity, Inheritance, Relationship, WorkspaceItem, WorkspaceRelationship } from './model';
import { QueryResponse, SendQueryOptions } from './query';
/**
 * @beta
 * Type representing the result of a relationship count operation.
 */
export type RelationshipCountResult = {
    /** The count of the relationships. */
    count: number;
    /** Whether the count is expired. */
    expired?: boolean;
};
/**
 * @beta
 * Interface representing ontology operations.
 */
export interface Ontology {
    /**
     * Cancels queries in the given context.
     * @param context - The context in which to cancel queries.
     * @returns A promise that resolves when the operation is complete.
     */
    cancelQueries: (context: string) => Promise<void>;
    /**
     * Gets the available ontologies.
     * @returns A promise that resolves to an array of available ontology names.
     */
    getAvailableOntologies: () => Promise<string[]>;
    /**
     * Gets workspace relationship records for a given entity and relationship.
     * @param entity - The entity for which to get relationship records.
     * @param rel - The relationship or relationship name.
     * @returns A promise that resolves to an array of workspace relationships.
     */
    getWorkspaceRelationshipRecords(entity: Entity, rel: string | Relationship): Promise<WorkspaceRelationship[]>;
    /**
     * Clears the relationship cache for a given entity and relationship.
     * @param entity - The entity for which to clear the cache.
     * @param relationship - The relationship or relationship name.
     * @param inverse - Whether to clear the inverse relationship cache.
     * @returns A promise that resolves when the operation is complete.
     */
    clearRelationshipCache: (entity: Entity, relationship: Relationship | string, inverse?: boolean) => Promise<void>;
    /**
     * Gets connected entities for a given entity and relationship.
     * @param entity - The entity for which to get connected entities.
     * @param relationship - The relationship or relationship name.
     * @param forceRefresh - Whether to force a refresh of the data.
     * @returns A promise that resolves to an array of connected entities.
     */
    getConnectedEntities: <T extends Entity>(entity: Entity, relationship: Relationship | string, forceRefresh?: boolean) => Promise<T[]>;
    /**
     * Gets connections by type for a given entity and concept.
     * @param entity - The entity for which to get connections.
     * @param concept - The concept for which to get connections.
     * @returns A promise that resolves to an array of connections.
     */
    getConnectionsByType: <T extends Entity>(entity: Entity, concept: string, handler?: (connections: EConnection[]) => Promise<void>) => Promise<EConnection[]>;
    /**
     * Gets the concept names.
     * @returns A promise that resolves to an array concept names.
     */
    getConceptNames: () => Promise<string[]>;
    /**
     * Gets a concept by its name.
     * @param conceptName - The name of the concept.
     * @returns A promise that resolves to the concept or undefined if not found.
     */
    getConceptByName: (conceptName: string) => Promise<Concept | undefined>;
    /**
     * Gets all concepts.
     * @returns A promise that resolves to a map of concept names to concepts.
     */
    getConcepts: () => Promise<Map<string, Concept>>;
    /**
     * Gets an entity.
     * @param e - The entity to get.
     * @param refresh - Whether to refresh the data.
     * @param skipSideEffects - Whether to skip side effects.
     * @returns A promise that resolves to the entity.
     */
    getEntity: <T extends Entity>(e: Entity, refresh?: boolean, skipSideEffects?: boolean) => Promise<T>;
    /**
     * Gets the name of the ontology.
     * @returns A promise that resolves to the name of the ontology.
     */
    getOntologyName: () => Promise<string>;
    /**
     * Gets the relationship count for a given entity and relationship.
     * @param entity - The entity for which to get the relationship count.
     * @param rel - The relationship or relationship name.
     * @param forceRefresh - Whether to force a refresh of the data.
     * @returns A promise that resolves to the relationship count result.
     */
    getRelationshipCount: (entity: Entity, rel: Relationship | string, forceRefresh?: boolean) => Promise<RelationshipCountResult>;
    /**
     * Gets the concept for a given entity.
     * @param entity - The entity for which to get the concept.
     * @returns A promise that resolves to the concept or undefined if not found.
     */
    getConceptForEntity: (entity: Entity) => Promise<Concept | undefined>;
    /**
     * Gets the relationships for a given entity.
     * @param entity - The entity for which to get relationships.
     * @returns A promise that resolves to an array of relationships.
     */
    getRelationshipsForEntity: (entity: Entity) => Promise<Relationship[]>;
    /**
     * Checks whether a concept exists.
     * @param conceptName - The name of the concept.
     * @returns A promise that resolves to a boolean indicating whether the concept exists.
     */
    isConcept: (conceptName: string) => Promise<boolean>;
    /**
     * Sends a query.
     * @param query - The query string.
     * @param options - Optional options for sending the query.
     * @returns A promise that resolves to the query response.
     */
    sendQuery: (query: string, options?: SendQueryOptions) => Promise<QueryResponse>;
    /**
     * Sends a query with a typed response.
     * @param query - The query string.
     * @param options - Optional options for sending the query.
     * @param force_refresh - Whether to force a refresh of the data.
     * @returns A promise that resolves to an array of results.
     */
    sendQueryT: <T>(query: string, options?: SendQueryOptions, force_refresh?: boolean) => Promise<T[]>;
    /**
     * Gets the system inheritance.
     * @returns A promise that resolves to an array of inheritances.
     */
    getSysInheritance(): Promise<Inheritance[]>;
    /**
     * Subscribes to changes for a given entity.
     * @param entity - The entity to subscribe to.
     * @param callback - The callback to invoke on changes.
     * @param skipInitialCallback - Whether to skip the initial callback.
     * @returns A promise that resolves to an unsubscribe function.
     */
    subscribe: <T>(entity: Entity, callback: Callback<T>, skipInitialCallback?: boolean) => Promise<Unsubscribe>;
    /**
     * Generates a consistent UUID.
     * @param name - The name for which to generate the UUID.
     * @param namespace - Optional namespace for the UUID.
     * @returns A promise that resolves to the UUID.
     */
    consistentUUID: (name: string, namespace?: string) => Promise<string>;
    /**
     * Updates the cache with the given entities.
     * @param entities - The entities to update in the cache.
     * @returns A promise that resolves to the updated entities.
     */
    updateCache: (entities: (Entity & WorkspaceItem)[]) => Promise<(Entity & WorkspaceItem)[]>;
}
/**
 * @beta
 * Type representing the details of an ontology to be shown.
 */
export type ShowOntology = {
    /** The concept of the ontology. */
    concept: string;
    /** The properties of the ontology. */
    properties: string | undefined;
    /** The primary keys of the ontology. */
    primary_keys: string | undefined;
    /** The label keys of the ontology. */
    label_keys: string | undefined;
    /** The inheritance of the ontology. */
    inheritance: string | undefined;
    /** The inheritance level of the ontology. */
    inheritance_level: number;
    /** The query associated with the ontology. */
    query: string | undefined;
    /** The description of the ontology. */
    description: string | undefined;
    /** The JSON representation of the query. */
    query_json: string | undefined;
};
/**
 * @beta
 * Type representing tags associated with an ontology.
 */
export type OntologyTags = {
    /** The target type of the tag. */
    target_type: string;
    /** The target name of the tag. */
    target_name: string;
    /** The name of the tag. */
    tag_name: string;
    /** The value of the tag. */
    tag_value: string;
};
//# sourceMappingURL=ontology.d.ts.map