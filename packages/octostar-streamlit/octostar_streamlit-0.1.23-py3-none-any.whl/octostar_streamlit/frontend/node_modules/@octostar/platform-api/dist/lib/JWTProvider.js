export class JWTProvider {
    constructor(tokenProvider, expiresThreshold = 300) {
        this.token = null;
        this.decoded = null;
        this.tokenProvider = tokenProvider;
        this.expiresThreshold = expiresThreshold;
    }
    async fetchToken() {
        this.token = await this.tokenProvider.getToken();
        this.decoded = JSON.parse(atob(this.token.split('.')[1])); // Decode the payload
    }
    isExpiredOrExpiringSoon() {
        if (!this.decoded || !this.decoded.exp) {
            return true; // Treat as expired if there's no expiration time
        }
        const currentTime = Math.floor(Date.now() / 1000);
        return this.decoded.exp < currentTime + this.expiresThreshold;
    }
    async getToken() {
        if (!this.token || this.isExpiredOrExpiringSoon()) {
            await this.fetchToken();
        }
        return this.token;
    }
}
//# sourceMappingURL=JWTProvider.js.map