import { Desktop } from './desktop';
import { EventEmitterType } from './event';
import { EdgeSpec, GraphSpec } from './graph';
import { Entity } from './model';
import { Ontology } from './ontology';
type TODO = any;
/**
 * @beta
 * Type representing a styler with methods for getting G6 node and edge styles.
 * See ColorByType.ts for an example
 */
export type Styler = {
    /**
     * Use this function to modify style of a node from outside the graph.
     * You can overwrite the style, but DO NOT merge currentStyle or originStyle when returning new styling (or rather styling patch).
     * This can lead do recursive clone error later on.
     * Merging with actual style will be handled automatically!
     * Use them just as a reference:
     * - @param originStyle for eg original node radius (if its a circural node), so you want to eg multiply it by amount of connections.
     * - @param currentStyle for eg current node radius (if its a circural node), so you want to eg apply a holor like a heatmap by amount of connections.
     * @param entity - The entity for which to get the node style.
     * @param originStyle - The original style (the one passed to node during it's initialization). See '@antv/graphin' -> NodeStyle
     * @param currentStyle - The current style. See '@antv/graphin' -> NodeStyle
     * @returns A promise that resolves to the style patch. See '@antv/graphin' -> NodeStyle
     */
    getG6NodeStyle?: (entity: Entity, originStyle: TODO, currentStyle: TODO) => Promise<TODO>;
    /**
     * Use this function to modify style of a edge from outside the graph.
     * You can overwrite the style, but DO NOT merge currentStyle or originStyle when returning new styling (or rather styling patch).
     * This can lead do recursive clone error later on.
     * Merging with actual style will be handled automatically!
     * Use them just as a reference, eg edge width to multiply.
     * @param edge - The edge specification for which to get the edge style.
     * @param originStyle - The original style (the one passed to edge during it's initialization). See '@antv/graphin' -> EdgeStyle
     * @param currentStyle - The current style. See '@antv/graphin' -> EdgeStyle
     * @returns A promise that resolves to the style patch. See '@antv/graphin' -> EdgeStyle
     */
    getG6EdgeStyle?: (edge: EdgeSpec, originStyle: TODO, currentStyle: TODO) => Promise<TODO>;
};
/**
 * @beta
 * Interface representing the context for a styler.
 */
export interface StylerContext {
    /** The graph specification. */
    graph: GraphSpec;
    /** The selected graph specification. */
    selected: GraphSpec;
    /** The ontology API instance. */
    OntologyAPI: Ontology;
    /** The desktop API instance. */
    DesktopAPI: Desktop;
    /** The event emitter instance. */
    ee: EventEmitterType;
    /** The event topic prefix. */
    eventTopicPrefix: string;
    /**
     * @beta
     * Callback function to be called when the task is complete.
     * @param x - The styler instance.
     */
    onTaskComplete?: (x: Styler) => void;
    /** Callback function to be called when the task is canceled. */
    onTaskCanceled?: () => void;
    /** The task ID associated with the styler. */
    taskID?: string;
}
/**
 * @beta
 * Type representing a function that produces a styler.
 * @param context - The context for the styler.
 * @returns A promise that resolves to the styler.
 */
export type StylerProducer = (context: StylerContext) => Promise<Styler>;
/**
 * @beta
 * Type representing an option for a styler.
 */
export type StylerOption = {
    /** The name of the styler option. */
    name: string;
    /** The description of the styler option. */
    description: string;
};
/**
 * @beta
 * Type representing the configuration for a styler.
 */
export type StylerConfig = StylerOption & {
    /** The name of the styler configuration. */
    name: string;
    /** The description of the styler configuration. */
    description: string;
    /** The initialization function for the styler. */
    init: StylerProducer;
    /** The optional destroy function for the styler. */
    destroy?: () => Promise<void>;
};
export {};
//# sourceMappingURL=styling.d.ts.map