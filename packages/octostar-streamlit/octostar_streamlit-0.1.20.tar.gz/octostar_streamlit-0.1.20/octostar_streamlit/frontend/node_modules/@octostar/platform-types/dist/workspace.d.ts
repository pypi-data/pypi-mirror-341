import { AddListener, Callback, Unsubscribe } from './callback';
import { Entity, OsTag, WorkspaceItem, WorkspaceItems, WorkspaceRelationship } from './model';
/**
 * @beta
 * Type representing information about a tag.
 */
export type TagInfo = {
    /** The tag string. */
    tag: string;
    /** The workspace associated with the tag. */
    os_workspace: string;
    /** The count of entities associated with the tag. */
    count: number;
    /** A sample of entities associated with the tag. */
    sample: Entity[];
    /** The entity representing the tag. */
    entity: OsTag;
};
/**
 * @beta
 * Type representing a tag with its associated relationship.
 */
export type TagWithRelationship = {
    /** The workspace relationship associated with the tag. */
    os_workspace_relationship: WorkspaceRelationship;
    /** The tag entity. */
    os_tag: OsTag;
};
/**
 * @beta
 * Type representing a permission for a workspace item.
 */
export type Permission = WorkspaceItem & {
    /** The username associated with the permission. */
    os_username?: string;
    /** The permission value. */
    os_permission: number;
    /** The role associated with the permission. */
    os_role?: string;
    /** The flags associated with the permission */
    os_flags?: number;
};
/**
 * @beta
 * Enum representing the possible values for workspace permissions.
 */
export declare enum WorkspacePermissionValue {
    None = 0,
    Read = 1,
    Write = 2,
    Admin = 4
}
/**
 * @beta
 * Type representing a workspace permission.
 */
export type WorkspacePermission = {
    /** The value of the permission. */
    value: WorkspacePermissionValue;
    /** The label for the permission. */
    label: string;
};
/**
 *
 * @beta
 * Type representing a workspace flags.
 */
export type WorkspaceFlags = {
    autoOpen?: boolean;
    isHidden?: boolean;
};
/**
 * @beta
 * Type representing information about records in a workspace.
 */
export type WorkspaceRecordInfo = {
    /** The concept associated with the records. */
    concept: string;
    /** The count of records. */
    count: number;
    /** The last updated timestamp for the records. */
    max_last_updated: string;
    /** The entities associated with the records. */
    entities: Entity[];
};
/**
 * @beta
 * Type representing a collection of workspace records.
 */
export type WorkspaceRecords = {
    [key: string]: WorkspaceRecordInfo;
};
/**
 * @beta
 * Type representing a workspace.
 */
export type Workspace = {
    /** The workspace item. */
    workspace: WorkspaceItem;
    /** The items in the workspace. */
    items: WorkspaceItems;
    /** Optional records in the workspace. */
    workspace_records?: WorkspaceRecords;
    /** Optional tags in the workspace. */
    tags?: TagInfo[];
    /** Optional permission for the workspace. */
    permission?: WorkspacePermission;
    /** Whether the workspace is active. */
    isActive?: boolean;
    os_flags?: number;
};
/**
 * @beta
 * Type representing a UUID.
 */
export type uuid = string;
/**
 * @beta
 * Type representing a workspace identifier, which can be a UUID or a workspace item.
 * @template T - The type of the workspace item.
 */
export type WorkspaceIdentifier<T = any> = uuid | WorkspaceItem<T>;
/**
 * @beta
 * Type representing a workspace item identifier, which is the same as a workspace identifier.
 * @template T - The type of the workspace item.
 */
export type WorkspaceItemIdentifier<T = any> = WorkspaceIdentifier<T>;
/**
 * @beta
 * Type representing a workspace record with its relationships.
 */
export type WorkspaceRecordWithRelationships = {
    /** The workspace item. */
    entity: WorkspaceItem;
    /** The name of the relationship. */
    relationship_name?: string;
    /** The relationships associated with the workspace record. */
    relationships?: [WorkspaceRecordWithRelationships];
};
/**
 * @beta
 * Interface representing a workspace change emitter.
 */
export interface WorkspaceChangeEmitter {
    /**
     * Subscribes to changes for a given workspace.
     * @param ws - The workspace identifier.
     * @param callback - The callback to invoke on changes.
     * @returns A promise that resolves to an unsubscribe function.
     */
    onWorkspaceChanged: (ws: WorkspaceIdentifier, callback: Callback<Workspace>) => Promise<Unsubscribe>;
    /**
     * Subscribes to changes for a given workspace item.
     * @param item - The workspace item identifier.
     * @param callback - The callback to invoke on changes.
     * @returns A promise that resolves to an unsubscribe function.
     */
    onWorkspaceItemChanged: (item: WorkspaceItemIdentifier, callback: Callback<WorkspaceItem>) => Promise<Unsubscribe>;
    /**
     * Subscribes to changes for the currently open workspaces.
     * @param callback - The callback to invoke with the current open workspaces.
     * @returns A promise that resolves to an unsubscribe function.
     */
    onOpenWorkspacesChanged: AddListener<Workspace[]>;
}
/**
 * @beta
 * Type representing settings for a workspace.
 */
export type WorkspaceSettings = {
    /** Whether the workspace is the master workspace. */
    isMaster?: boolean;
    /** The icon for the workspace. */
    os_icon?: string;
};
/**
 * @beta
 * Type representing a workspace item with its settings.
 */
export type OsWorkspacePickerProps = {
    onChange: (value: string) => void;
    desktop: any;
    openWorkspacesOnly?: boolean;
    defaultWorkspace?: string;
    checkActiveWorkspace?: boolean;
    permissions?: WorkspacePermissionValue;
    dashboardOptions?: {
        value: string;
        label: string;
    }[];
};
//# sourceMappingURL=workspace.d.ts.map