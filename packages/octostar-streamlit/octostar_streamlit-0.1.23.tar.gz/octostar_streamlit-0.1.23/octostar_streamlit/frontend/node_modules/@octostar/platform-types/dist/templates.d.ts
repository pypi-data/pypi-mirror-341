import { ModalProps } from 'antd';
import { ReactCssProperties } from './react-types';
import { SemanticBinding } from './semantic';
/**
 * @beta
 * Type representing the possible template types.
 */
export type TemplateType = 'nunjucks' | 'javascript';
/**
 * @beta
 * Type representing the possible template variants.
 */
export type TemplateVariant = 'antd';
/**
 * @beta
 * Type representing the metadata for a template.
 */
export type TemplateMetadata = {
    /** The name of the template. */
    name: string;
    /** The description of the template. */
    description: string;
    /** The concepts associated with the template. */
    concepts: string[];
    /** The priority of the template. Default is 100, lower is higher priority. */
    priority?: number;
    /** The type of the template. */
    type: TemplateType;
    /** The layout of the template. */
    layout: string;
    /** The variant of the template. */
    variant: TemplateVariant;
    /** Optional blurhash for the template. */
    blurhash?: string;
    /** The parameter names required by the template. */
    parameterNames: string[];
    /** Optional CSS properties for the template. */
    style?: ReactCssProperties;
    /** Whether the template renders multiple records. */
    rendersMultipleRecords?: boolean;
    /** Whether the template is an app. */
    isApp?: boolean;
    /** details for semantic bindings. These can be app-specific */
    bindings?: SemanticBinding[];
};
/**
 * @beta
 * Type representing a custom template, extending TemplateMetadata.
 */
export type CustomTemplate = TemplateMetadata & {
    /** The template content. */
    template: string;
};
/**
 * @beta
 * Type representing a saved template, extending CustomTemplate.
 */
export type SavedTemplate = CustomTemplate & {
    /** The unique identifier for the entity. */
    os_entity_uid: string;
    /** The workspace to which the template belongs. */
    os_workspace: string;
    /** The CSS content of the template. */
    css_content?: string;
};
/**
 * @beta
 * Type representing the properties for a custom template iframe.
 */
export type CustomTemplateIframeProps = {
    /** The template to be rendered in the iframe. */
    template: CustomTemplate | SavedTemplate | string;
    /** The context for the template. */
    context: any;
    /** Whether to enable debug mode. */
    debug?: boolean;
    /**
     * Callback function to be called on error.
     * @param err - The error object.
     */
    onError?: (err: {
        message: string;
    }) => void;
    /** The width of the iframe. */
    width?: number | string;
    /** The height of the iframe. */
    height?: number | string;
    /** Optional CSS properties for the iframe. */
    style?: ReactCssProperties;
    /** Whether the iframe should take the full width. */
    fullWidth?: boolean;
};
/**
 * @beta
 * Type representing the properties for a modal template, extending CustomTemplateIframeProps.
 */
export type ModalTemplateProps = CustomTemplateIframeProps & {
    /** Optional properties for the modal. */
    modalProps?: ModalProps;
    /** Whether the modal is open. */
    isModalOpen: boolean;
    /**
     * Function to set the open state of the modal.
     * @param open - The new open state of the modal.
     */
    setIsModalOpen: (open: boolean) => void;
    /** Callback function to be called on completion. */
    onComplete?: () => void;
    /** Callback function to be called on cancel. */
    onCancel?: () => void;
    /** The task ID associated with the modal. */
    taskID?: string;
};
//# sourceMappingURL=templates.d.ts.map