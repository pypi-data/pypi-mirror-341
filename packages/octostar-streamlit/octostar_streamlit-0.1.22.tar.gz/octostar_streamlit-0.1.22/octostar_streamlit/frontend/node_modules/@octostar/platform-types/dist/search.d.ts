import { QueryDslQueryContainer } from '@elastic/elasticsearch/lib/api/types';
import { Entity, WorkspaceItem } from './model';
/**
 * @beta
 * Interface representing the properties for the SearchXperience component.
 */
export interface SearchXperienceProps {
    /** The title of the search experience. */
    title?: string | undefined;
    /** The default concepts for the search experience. */
    defaultConcept?: string[] | undefined;
    /** Whether to disable the concept selector. */
    disableConceptSelector?: boolean | undefined;
    /** The task ID associated with the search experience. */
    taskID?: string;
    /** The default search fields for the search experience. */
    defaultSearchFields?: {
        entity_label?: string;
        os_textsearchfield?: string;
    };
}
/**
 * @beta
 * Interface representing the properties for the SearchXperienceModal component, extending SearchXperienceProps.
 */
export interface SearchXperienceModalProps extends SearchXperienceProps {
    /** Whether the modal is open. */
    open?: boolean | undefined;
    /**
     * Callback function to be called when the modal is closed.
     * @param entities - The entities selected in the search experience.
     * @returns A void or undefined.
     */
    onClose: (entities: Entity[]) => void | undefined;
}
/**
 * @beta
 * Type representing the search filter.
 */
export type SearchFilter = {
    label?: string;
    entity?: Entity;
    query?: QueryDslQueryContainer;
    imageUrl?: string;
};
/**
 * @beta
 * Interface representing the properties for the Search component.
 */
export interface SearchProps {
    /**
     * the query string to search for.
     */
    q?: string;
    /**
     * the label for the submit button.
     */
    submitButtonLabel?: string;
    /**
     * the filters to apply to the search.
     */
    filters?: SearchFilter[];
    /**
     * the default image to use for the search.
     */
    image?: WorkspaceItem;
    /**
     * disable ask AI
     */
    disableAskAI?: boolean;
    /**
     * disable save search
     */
    disableSaveSearch?: boolean;
}
/**
 * @beta
 * Interface representing the options given to search
 */
export interface SearchOptions {
    /**
     * The maximum number of entities returned.
     */
    limit?: number;
}
//# sourceMappingURL=search.d.ts.map