import { desktopApi } from '../apis';
/**
 * @beta
 * Custom element that renders a list of tags.
 */
export class OsTags extends HTMLElement {
    constructor() {
        super();
        this.mode = 'tags';
        this.root = this.attachShadow({ mode: 'open' });
    }
    static get observedAttributes() {
        return ['record', 'mode'];
    }
    attributeChangedCallback(name, oldValue, newValue) {
        if (name === 'record' && newValue !== oldValue) {
            this.record = JSON.parse(newValue);
            this.render();
        }
        if (name === 'mode' && newValue !== oldValue) {
            this.mode = newValue;
            this.render();
        }
    }
    async loadTags() {
        if (!this.record) {
            return [];
        }
        return (this.desktop || desktopApi()).getTags(this.record);
    }
    connectedCallback() {
        if (this.record) {
            this.render();
        }
    }
    set recordData(value) {
        this.record = value;
        this.setAttribute('record', JSON.stringify(value));
    }
    get recordData() {
        return this.record;
    }
    set dotsMode(visible) {
        this.mode = 'dots';
        this.setAttribute('show-dots', String(visible));
    }
    get dotsMode() {
        return this.mode;
    }
    async render() {
        if (!this.record) {
            return;
        }
        const tags = await this.loadTags();
        this.root.innerHTML = `<style>
    :host {
      width: 100%;
      display: flex;
      gap: 5px;
      align-items: center;
    }
</style>`;
        if (this.mode === 'dots') {
            const dots = document.createElement('tag-dots');
            dots.tagsData = tags;
            this.root.appendChild(dots);
        }
        if (this.mode === 'tags') {
            const label = document.createElement('os-context-menu');
            label.setAttribute('trigger', 'hover');
            label.context = { item: this.record };
            label.textContent = this.record.entity_label;
            this.root.appendChild(label);
            tags.forEach(tag => {
                const tagEl = document.createElement('os-tag');
                tagEl.tag = tag;
                this.root.appendChild(tagEl);
            });
            const tagMenu = document.createElement('os-tags-context-menu');
            tagMenu.setAttribute('trigger', 'hover');
            tagMenu.record = this.record;
            this.root.appendChild(tagMenu);
        }
    }
}
if (!customElements.get('os-tags')) {
    customElements.define('os-tags', OsTags);
}
//# sourceMappingURL=OsTags.js.map