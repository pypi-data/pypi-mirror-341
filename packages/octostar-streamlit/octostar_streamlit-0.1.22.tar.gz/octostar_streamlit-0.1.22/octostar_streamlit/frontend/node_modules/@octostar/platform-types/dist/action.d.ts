import { ItemType } from 'rc-menu/lib/interface';
import { EdgeSpec, GraphSpec } from './graph';
import { Entity, WorkspaceItem } from './model';
import { Workspace } from './workspace';
/**
 * @beta
 * Interface for managing data transfer during drag and drop operations.
 */
export interface IDataTransfer {
    /**
     * Clears the data for the specified format or all formats if none is specified.
     * @param format - The format of the data to clear.
     */
    clearData(format?: string): void;
    /**
     * Sets the data for the specified format.
     * @param format - The format of the data.
     * @param data - The data to be set.
     */
    setData(format: string, data: string): void;
    /**
     * Retrieves the data for the specified format.
     * @param format - The format of the data to retrieve.
     * @returns The data for the specified format, or null if not found.
     */
    getData(format: string): string | null;
    /**
     * Sets the image to be used for dragging.
     * @param img - The image element to be used.
     * @param xOffset - The horizontal offset.
     * @param yOffset - The vertical offset.
     */
    setDragImage?(img: Element, xOffset: number, yOffset: number): void;
    /** The drop effect for the drag operation. */
    readonly dropEffect: string;
    /** The effect allowed for the drag operation. */
    readonly effectAllowed: string;
    /** The list of files being transferred. */
    readonly files: FileList;
    /** The types of data being transferred. */
    readonly types: string[];
    /** The items being transferred. */
    readonly items: DataTransferItemList;
}
/**
 * @beta
 * Interface representing the context for an action.
 */
export interface ActionContext {
    concept?: string;
    graph?: GraphSpec & any;
    item?: WorkspaceItem;
    items?: WorkspaceItem[];
    workspace?: Workspace;
    dataTransfer?: IDataTransfer;
    eventTopicPrefix?: string;
    selectedItems?: WorkspaceItem[];
    /**
     * Callback function to be executed with the result of the action.
     * @param result - The result object containing records and relationships.
     */
    then?: (result?: {
        records?: Entity[];
        relationships?: EdgeSpec[];
    }) => void;
}
/**
 * @beta
 * Type representing the possible triggers for a context menu.
 */
export type trigger = 'hover' | 'contextMenu' | 'click';
/**
 * @beta
 * Type representing the groups for a context menu.
 */
export type ContextMenuGroup = 'add' | 'addto' | 'copy' | 'edit' | 'transform' | 'general' | 'open' | 'danger' | 'tags' | 'relations' | 'search' | 'actions' | 'file' | 'settings';
/**
 * @beta
 * Type representing labels for context menu groups.
 */
export type ContextMenuLabels = {
    [group in ContextMenuGroup]?: string;
};
/**
 * @beta
 * Options for configuring a context menu.
 */
export type ContextMenuOptions = {
    mode?: 'edit' | 'default';
    groups?: ContextMenuGroup[];
    labels?: ContextMenuLabels;
    extras?: ItemType[];
    excludedKeys?: string[];
};
/**
 * @beta
 * Request object for opening or clearing a context menu.
 */
export type ContextMenuRequest = (ActionContext & {
    x: number;
    y: number;
    openContextMenu?: boolean;
    onCloseEmit?: string;
    menuType?: 'default' | 'tags';
    options?: ContextMenuOptions;
}) | {
    clearContextMenu: true;
};
/**
 * @beta
 * Parameters for a context menu.
 */
export type ContextMenuParams = ActionContext & {
    children: any;
    trigger?: trigger[];
    onMenuToggle?: (isOpen: boolean) => void;
    options?: ContextMenuOptions;
    markdown?: boolean;
};
/**
 * @beta
 * Type representing an asynchronous filter function.
 */
export type AsyncFilter = () => Promise<boolean>;
/**
 * @beta
 * Interface for handling actions with optional close behavior.
 */
export type ActionHandler = {
    onClose?: AsyncFilter;
};
//# sourceMappingURL=action.d.ts.map