/**
 * @beta
 * Options for fetching data from an API.
 */
export interface FetchOptions extends Omit<RequestInit, 'body'> {
    /**
     * The API endpoint to hit, starting with a slash.
     */
    endpoint: string;
    /** A BodyInit object, object or null to set request's body. */
    body?: BodyInit | object | null;
}
/**
 * @beta
 * Interface representing a client for interacting with the OctoStar API.
 */
export interface OsAPIClient {
    /**
     * Fetch data from the API.
     * @param options - Configuration options for the fetch request.
     * @returns A promise that resolves with the fetched data of type T.
     */
    fetchData<T>(options: FetchOptions): Promise<T>;
    /**
     * Stream data from the API.
     * @param options - Configuration options for the stream request.
     * @returns A promise that resolves when the streaming is complete.
     */
    streamData(options: FetchOptions): Promise<ReadableStream<Uint8Array>>;
    /**
     * Streams text data from the API.
     * @param options - Configuration options for the stream request.
     * @returns A promise that resolves when the streaming is complete.
     */
    streamText(options: StreamTextOptions): Promise<void>;
    /**
     * Streams JSON line data from the API.
     * @param options - Configuration options for the stream request.
     * @returns A promise that resolves when the streaming is complete.
     */
    streamJson<T>(options: StreamJsonOptions<T>): Promise<void>;
}
/**
 * @beta
 * Options for streaming text data from an API.
 */
export interface StreamTextOptions extends FetchOptions {
    /**
     * The asynchronous function to process each line of text.
     */
    handler: (line: string) => Promise<void>;
}
/**
 * @beta
 * Options for streaming JSON line data from an API.
 */
export interface StreamJsonOptions<T> extends FetchOptions {
    /**
     * The asynchronous function to process each JSON object.
     */
    jsonHandler: (value: T) => Promise<void>;
}
//# sourceMappingURL=client.d.ts.map