/**
 * @beta
 * Custom element that renders a list of tags as colored dots.
 * If the number of tags exceeds the maximum number of dots, a count of the remaining tags is displayed.
 */
export class TagDots extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
        if (this.shadowRoot) {
            this.shadowRoot.innerHTML = `
          <style>
          .tags-dots-container{
            display: flex;
            align-items: center;
          }
          .tags-dot {
              display: flex;
              align-items: center;
              height: 15px;
              width: 15px;
              border-radius: 50%;
              position: relative;
              margin-left: -5px; 
              border: 2px solid white; 
            }
          
        
          .extra-count {
            background-color: red; 
            height: 20px;
            width: 20px;
            border-radius: 50%;
            color: black;
            display: flex; 
            justify-content: center; 
            align-items: center; 
          }
          </style>
          <div class="tags-dots-container"></div>

        `;
        }
    }
    set tagsData(value) {
        this.tags = value;
        this.render();
    }
    get tagsData() {
        return this.tags;
    }
    async render() {
        const container = this.shadowRoot?.querySelector('.tags-dots-container');
        if (!container) {
            return;
        }
        container.className = 'tags-dots-container';
        const MAX_DOTS = 3;
        const DEFAULT_TAG_COLOR = '#2279F2';
        const colors = this.tags
            ?.slice(0, MAX_DOTS)
            .map(tag => tag.os_tag.color || DEFAULT_TAG_COLOR);
        colors?.forEach(color => {
            const dot = document.createElement('span');
            dot.className = 'tags-dot';
            dot.style.backgroundColor = color;
            container.appendChild(dot);
        });
        if (this.tags && this.tags.length > MAX_DOTS) {
            const extraCount = document.createElement('span');
            extraCount.textContent = `${this.tags.length}`;
            extraCount.className = 'extra-count';
            container.appendChild(extraCount);
        }
    }
}
if (!customElements.get('tag-dots')) {
    customElements.define('tag-dots', TagDots);
}
//# sourceMappingURL=TagsDots.js.map