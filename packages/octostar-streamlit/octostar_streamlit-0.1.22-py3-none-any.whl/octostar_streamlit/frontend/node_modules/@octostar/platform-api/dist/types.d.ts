/**
 * @beta
 * Type representing a message value.
 */
export type GetRemoteApiParams = {
    name: string;
};
/**
 * @beta
 * Type representing a POST request.
 */
export type PostRequest<T extends object> = {
    source: Window | null;
    origin: string;
    data: T;
};
/**
 * @beta
 * Type representing a POST response.
 */
export type PostResponse<T extends object> = {
    source: Window | null;
    origin: string;
    data: T;
};
/**
 * @beta
 * Type representing a POST response with a payload.
 */
export type PostResponseWithPayload<T> = PostResponse<PostResponsePayload<T>>;
type BasePostResponsePayload<D, E> = {
    data: D;
    error: E;
};
/**
 * @beta
 * Type representing a POST response payload with an error.
 */
export type ErrorPostResponsePayload = BasePostResponsePayload<null, {
    code: string;
    message: string;
}>;
/**
 * @beta
 * Type representing a POST response payload with a success.
 */
export type SuccessPostResponsePayload<T> = BasePostResponsePayload<T, null>;
/**
 * @beta
 * Type representing a POST response payload.
 */
export type PostResponsePayload<T> = ErrorPostResponsePayload | SuccessPostResponsePayload<T>;
/**
 * @internal
 */
export type RemoteApiError = Error & {
    originalError: Error;
};
/**
 * @internal
 */
export type EnsureMethodsReturnPromise<T> = {
    [K in keyof T]: T[K] extends (...args: any[]) => any ? (...args: Parameters<T[K]>) => Promise<Awaited<ReturnType<T[K]>>> : T[K];
};
/**
 * @beta
 * Type representing a context listener.
 */
export type ContextListener<T> = (context: T) => void;
/**
 * @beta
 * Type representing the context API.
 */
export type ContextApi<T> = {
    getContext: () => Promise<T>;
    subscribeToChanges: (id: string | ContextListener<T>, callback?: ContextListener<T>) => Promise<void>;
    unsubscribeFromChanges: (id: string) => Promise<void>;
};
export {};
//# sourceMappingURL=types.d.ts.map