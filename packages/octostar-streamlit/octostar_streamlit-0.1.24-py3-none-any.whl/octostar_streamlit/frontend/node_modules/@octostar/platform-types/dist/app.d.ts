import { JobManifest } from './jobManifestTypes';
import { DesktopActionContext } from './desktop';
import { WorkspaceItem } from './model';
import { SemanticBindingProps } from './semantic';
/**
 * @beta
 * Type representing an application with folder and optional manifest information.
 */
export type App = {
    /** The folder associated with the application. */
    folder: WorkspaceItem;
    /** Optional manifest entity associated with the application. */
    manifest_entity?: WorkspaceItem;
    /** Optional job manifest associated with the application. */
    manifest?: JobManifest;
    /** Optional files associated with the application. */
    files?: WorkspaceItem[];
};
/**
 * @beta
 * Type representing an application with semantic bindings.
 */
export type SemanticallyBoundApp = App & {
    /** The semantic bindings associated with the application. */
    bindings: SemanticBindingProps[];
};
/**
 * @beta
 * Options for an application service call.
 */
export type AppServiceCallOptions = {};
/**
 * @beta
 * Properties for making an application service call.
 */
export type AppServiceCallProps = {
    /** The name of the service to be called. */
    service: string;
    /** Optional options for the service call. */
    options?: AppServiceCallOptions;
    /** Contextual data for the service call. */
    context: {
        [key: string]: any;
    };
};
/**
 * @beta
 * Context for a transformation action within the desktop environment.
 */
export type TransformActionContext = DesktopActionContext & {
    /** The task ID associated with the transformation. */
    taskID: string;
    /** Function to be called when the task is canceled. */
    onTaskCanceled: () => Promise<void>;
    /** Function to be called when the task is completed. */
    onTaskComplete: (result: any) => Promise<void>;
    /** Function to call a transformation with additional context. */
    callTransform: (transform: string, extraContext: any) => Promise<any>;
};
/**
 * @beta
 * Type representing a transformation action.
 * @param context - The context for the transformation action.
 * @returns The result of the transformation action.
 */
export type TransformAction = (context: TransformActionContext) => any;
//# sourceMappingURL=app.d.ts.map