import { ApiResult } from './api';
/**
 * @beta
 * Type representing a successful query result.
 * @template T - The type of the data returned.
 */
export type QuerySuccessResult<T> = {
    /** The status of the query result, always 'success' for this type. */
    status: 'success';
    /** The data returned by the query. */
    data: T[];
};
/**
 * @beta
 * Type representing an error query result.
 */
export type QueryErrorResult = {
    /** The status of the query result, always 'error' for this type. */
    status: 'error';
    /** The error message or data. */
    data: string;
};
/**
 * @beta
 * Type representing a batch query result, which includes a query ID.
 * @template T - The type of the data returned in case of success.
 */
export type QueryBatchResult<T> = (QuerySuccessResult<T> | QueryErrorResult) & {
    /** The ID of the query. */
    query_id: string;
};
/**
 * @beta
 * Type representing a query response, which is an array of any type.
 */
export type QueryResponse = any[];
/**
 * @beta
 * Options for sending a query.
 */
export type SendQueryOptions = {
    /** The context in which to send the query. */
    context?: string;
    /** Whether to send the query with low priority. */
    lowPriority?: boolean;
};
/**
 * @beta
 * Type representing a query, which can be a string or a function returning a promise.
 */
export type Query = string | (() => Promise<string | string[] | undefined>);
/**
 * @beta
 * Interface representing a query executor.
 */
export type QueryExecutor = {
    /**
     * Sends a query.
     * @param query - The query to send.
     * @param options - Optional options for sending the query.
     * @returns A promise that resolves to the query response.
     */
    sendQuery: (query: Query, options?: SendQueryOptions) => Promise<QueryResponse>;
};
/**
 * @beta
 * Type representing a query result, which is an API result containing an array of any type.
 */
export type QueryResult = ApiResult<any[]>;
//# sourceMappingURL=query.d.ts.map