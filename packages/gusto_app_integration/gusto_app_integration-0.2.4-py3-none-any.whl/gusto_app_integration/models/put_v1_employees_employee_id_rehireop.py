"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .versionheader import VersionHeader
from enum import Enum
from gusto_app_integration.types import BaseModel
from gusto_app_integration.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    RequestMetadata,
)
import pydantic
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PutV1EmployeesEmployeeIDRehireEmploymentStatus(str, Enum):
    r"""The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*."""

    PART_TIME = "part_time"
    FULL_TIME = "full_time"
    PART_TIME_ELIGIBLE = "part_time_eligible"
    VARIABLE = "variable"
    SEASONAL = "seasonal"
    NOT_SET = "not_set"


class PutV1EmployeesEmployeeIDRehireRequestBodyTypedDict(TypedDict):
    version: str
    r"""The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field."""
    effective_date: str
    r"""The day when the employee returns to work."""
    file_new_hire_report: bool
    r"""The boolean flag indicating whether Gusto will file a new hire report for the employee."""
    work_location_uuid: str
    r"""The uuid of the employee's work location."""
    employment_status: NotRequired[PutV1EmployeesEmployeeIDRehireEmploymentStatus]
    r"""The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*."""
    two_percent_shareholder: NotRequired[bool]
    r"""Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type."""


class PutV1EmployeesEmployeeIDRehireRequestBody(BaseModel):
    version: str
    r"""The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field."""

    effective_date: str
    r"""The day when the employee returns to work."""

    file_new_hire_report: bool
    r"""The boolean flag indicating whether Gusto will file a new hire report for the employee."""

    work_location_uuid: str
    r"""The uuid of the employee's work location."""

    employment_status: Optional[PutV1EmployeesEmployeeIDRehireEmploymentStatus] = None
    r"""The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*."""

    two_percent_shareholder: Optional[bool] = None
    r"""Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type."""


class PutV1EmployeesEmployeeIDRehireRequestTypedDict(TypedDict):
    employee_id: str
    r"""The UUID of the employee"""
    request_body: PutV1EmployeesEmployeeIDRehireRequestBodyTypedDict
    x_gusto_api_version: NotRequired[VersionHeader]
    r"""Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used."""


class PutV1EmployeesEmployeeIDRehireRequest(BaseModel):
    employee_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""The UUID of the employee"""

    request_body: Annotated[
        PutV1EmployeesEmployeeIDRehireRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    x_gusto_api_version: Annotated[
        Optional[VersionHeader],
        pydantic.Field(alias="X-Gusto-API-Version"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = VersionHeader.TWO_THOUSAND_AND_TWENTY_FOUR_MINUS_04_MINUS_01
    r"""Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used."""
