"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from gusto_app_integration.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class LocationTypedDict(TypedDict):
    r"""The representation of an address in Gusto."""

    uuid: str
    r"""The UUID of the location object."""
    version: NotRequired[str]
    r"""The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field."""
    company_uuid: NotRequired[str]
    r"""The UUID for the company to which the location belongs. Only included if the location belongs to a company."""
    phone_number: NotRequired[str]
    r"""The phone number for the location. Required for company locations. Optional for employee locations."""
    street_1: NotRequired[str]
    street_2: NotRequired[Nullable[str]]
    city: NotRequired[str]
    state: NotRequired[str]
    zip: NotRequired[str]
    country: NotRequired[str]
    active: NotRequired[bool]
    r"""The status of the location. Inactive locations have been deleted, but may still have historical data associated with them."""
    mailing_address: NotRequired[bool]
    r"""Specifies if the location is the company's mailing address. Only included if the location belongs to a company."""
    filing_address: NotRequired[bool]
    r"""Specifies if the location is the company's filing address. Only included if the location belongs to a company."""
    created_at: NotRequired[str]
    r"""Datetime for when location is created"""
    updated_at: NotRequired[str]
    r"""Datetime for when location is updated"""


class Location(BaseModel):
    r"""The representation of an address in Gusto."""

    uuid: str
    r"""The UUID of the location object."""

    version: Optional[str] = None
    r"""The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field."""

    company_uuid: Optional[str] = None
    r"""The UUID for the company to which the location belongs. Only included if the location belongs to a company."""

    phone_number: Optional[str] = None
    r"""The phone number for the location. Required for company locations. Optional for employee locations."""

    street_1: Optional[str] = None

    street_2: OptionalNullable[str] = UNSET

    city: Optional[str] = None

    state: Optional[str] = None

    zip: Optional[str] = None

    country: Optional[str] = "USA"

    active: Optional[bool] = None
    r"""The status of the location. Inactive locations have been deleted, but may still have historical data associated with them."""

    mailing_address: Optional[bool] = None
    r"""Specifies if the location is the company's mailing address. Only included if the location belongs to a company."""

    filing_address: Optional[bool] = None
    r"""Specifies if the location is the company's filing address. Only included if the location belongs to a company."""

    created_at: Optional[str] = None
    r"""Datetime for when location is created"""

    updated_at: Optional[str] = None
    r"""Datetime for when location is updated"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "version",
            "company_uuid",
            "phone_number",
            "street_1",
            "street_2",
            "city",
            "state",
            "zip",
            "country",
            "active",
            "mailing_address",
            "filing_address",
            "created_at",
            "updated_at",
        ]
        nullable_fields = ["street_2"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
