# prompt_forge/core/base.py

import abc
import dataclasses
import logging

from enum import Enum
from typing import (
    Any,
    Dict,
    Iterator,
    List,
    Optional,
    Tuple,
    Union,
    TypeVar,
)

from prompt_forge.templates.base_template import BasePromptTemplate


# Type variable for concrete PromptTemplate implementations
T_PromptTemplate = TypeVar("T_PromptTemplate", bound="BasePromptTemplate")


class UpdateGranularity(Enum):
    """
    定义 Prompt 更新的粒度级别，控制优化过程的激进程度。
    Defines the granularity level for prompt updates, controlling the aggressiveness of the optimization process.
    """
    FIXED = 0
    MICRO = 1
    SECTION_REPHRASE = 2
    STRUCTURE_ADAPT = 3
    FULL_REWRITE = 4

# --- 新增：定义指标结果的数据类 ---
# --- New: Define dataclass for metric results ---
@dataclasses.dataclass
class MetricResult:
    """
    封装单个评估指标的详细计算结果。
    Encapsulates the detailed computation result of a single evaluation metric.

    Attributes:
        name: 指标名称。 (Name of the metric.)
        score: 计算出的主要数值分数。 (The main computed numeric score.)
        description: 指标的描述信息 (通常来自 docstring)。 (Description of the metric, usually from its docstring.)
        details: (可选) 包含更细粒度信息的字典，例如每样本分数、错误分析、特定示例等。
                 (Optional dictionary containing finer-grained information, e.g., per-sample scores, error analysis, specific examples.)
    """
    name: str
    score: float
    description: Optional[str] = None
    details: Optional[Dict[str, Any]] = None


class BaseDataset(abc.ABC):
    """
    数据集的抽象基类。
    Abstract base class for datasets.
    """
    @abc.abstractmethod
    def __len__(self) -> int:
        """返回数据集中样本的总数。"""
        pass

    @abc.abstractmethod
    def __getitem__(self, idx: int) -> Dict[str, Any]:
        """获取指定索引的数据样本。"""
        pass

    # --- 移除 @abc.abstractmethod ---
    # --- Removed @abc.abstractmethod ---
    def get_batches(self, batch_size: int) -> Iterator[List[Dict[str, Any]]]:
        """
        (默认实现) 生成指定大小的数据批次。
        子类可以覆盖此方法以实现更高效的批处理（例如流式加载）。

        (Default implementation) Yields batches of data with the specified size.
        Subclasses can override this method for more efficient batching (e.g., streaming).

        Args:
            batch_size: 每个批次的大小。 (The size of each batch.)

        Yields:
            一个包含多个数据样本字典的列表。 (A list containing multiple data sample dictionaries.)
        """
        if batch_size <= 0:
             raise ValueError("Batch size must be positive.")
        # Simple default implementation using __len__ and __getitem__
        for i in range(0, len(self), batch_size):
            # Ensure slicing doesn't go out of bounds, though range handles the stop correctly
            end_index = min(i + batch_size, len(self))
            # Fetch items individually - subclasses might optimize this
            try:
                 batch = [self[j] for j in range(i, end_index)]
                 if batch: # Only yield non-empty batches
                    yield batch
            except IndexError as e:
                 # This might happen if __len__ changes unexpectedly during iteration, though unlikely.
                 logging.error(f"IndexError during batch creation near index {i}: {e}", exc_info=True)
                 # Decide whether to stop or continue; continuing might be risky.
                 raise # Re-raise the error for clarity


class BaseLLMClient(abc.ABC):
    """
    大型语言模型 (LLM) 客户端的抽象基类。
    Abstract base class for Large Language Model (LLM) clients.
    """
    # ... (方法定义保持不变) ...
    @abc.abstractmethod
    def generate(self, prompt: str, **kwargs) -> str:
        pass

    @abc.abstractmethod
    def generate_batch(self, prompts: List[str], **kwargs) -> List[str]:
        # Default implementation
        return [self.generate(prompt, **kwargs) for prompt in prompts]

    async def agenerate(self, prompt: str, **kwargs) -> str:
        return self.generate(prompt, **kwargs) # Basic sync fallback

    async def agenerate_batch(self, prompts: List[str], **kwargs) -> List[str]:
        return self.generate_batch(prompts, **kwargs) # Basic sync fallback


class BaseMetric(abc.ABC):
    """
    评估指标的抽象基类。
    Abstract base class for evaluation metrics.
    """

    @property
    @abc.abstractmethod
    def name(self) -> str:
        """指标的名称 (Name of the metric)"""
        pass

    @abc.abstractmethod
    def compute(
        self, predictions: List[str], references: List[Any]
    ) -> MetricResult: # <--- 返回类型修改为 MetricResult
        """
        计算预测结果相对于参考结果的指标分数和详细信息。
        Computes the metric score and detailed information for predictions against references.

        Args:
            predictions: 模型生成的预测输出列表。 (List of predicted outputs generated by the model.)
            references: 对应的参考输出列表 (类型取决于指标)。 (List of corresponding reference outputs (type depends on the metric).)

        Returns:
            一个 MetricResult 对象，包含分数、描述和可选的详细信息。
            (A MetricResult object containing the score, description, and optional details.)
        """
        pass
