# This workflow will upload a Python Package to PyPI when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: upload python package pypi

on:

  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # This fetches all history and tags
          fetch-tags: true  # Explicitly fetch all tags

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
          
      - name: Install packaging tools
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine pyproject-metadata tomli setuptools_scm

      - name: Clean previous build artifacts
        run: |
          # Remove any existing .egg-info directories that might cause conflicts
          find . -type d -name "*.egg-info" -exec rm -rf {} +
          # Also clean up any previous build directories
          rm -rf build dist
          
      - name: Validate pyproject.toml
        run: |
          echo "Validating pyproject.toml with [project] table format..."
          python -c "import tomli; config = tomli.load(open('pyproject.toml', 'rb')); assert 'project' in config, 'Missing [project] table in pyproject.toml'"
          
      - name: Debug version information
        run: |
          echo "Current git status:"
          git status
          echo "Current git describe:"
          git describe --tags
          echo "Version that setuptools_scm sees:"
          python -c "from setuptools_scm import get_version; print(f'Version: {get_version()}')"
          
      - name: Force version from tag
        run: |
          TAG=$(git describe --tags --abbrev=0)
          # Remove 'v' prefix if present
          VERSION=${TAG#v}
          echo "Setting version to $VERSION"
          # Create a version override to prevent setuptools_scm from calculating it
          echo "version = '$VERSION'" > version.py
          export SETUPTOOLS_SCM_PRETEND_VERSION=$VERSION
          
      - name: Build release distributions
        run: |
          # Use the environment variable set in previous step
          python -m build --sdist --wheel

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Display trusted publisher info
        run: |
          echo "==== TRUSTED PUBLISHER INFORMATION ===="
          echo "If publishing fails, you need to set up trusted publishing on PyPI:"
          echo "1. Go to https://pypi.org/manage/account/publishing/"
          echo "2. Add a new pending publisher with these values:"
          echo "   - Owner: MikkelKappelPersson"
          echo "   - Repository: EquiForge"
          echo "   - Workflow name: upload-python-package-pypi.yml"
          echo "   - Environment: (leave blank for default)"
          echo "3. See full instructions at: https://docs.pypi.org/trusted-publishers/adding/"
          echo "============================================"

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
