{"title":"Table Layout with PyFixest","markdown":{"yaml":{"format":{"html":{"html-table-processing":"none"}},"toc":true,"toc-title":"On this page","toc-location":"left"},"headingText":"Table Layout with PyFixest","containsRefs":false,"markdown":"\n\nPyfixest comes with functions to generate publication-ready tables. Regression tables are generated with `pf.etable()`, which can output different formats, for instance using the [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) package or generating formatted LaTex Tables using [booktabs](https://ctan.org/pkg/booktabs?lang=en). There are also further functions `pf.dtable()` to display descriptive statistics and `pf.make_table()` generating formatted tables from pandas dataframes in the same layout.\n\nTo begin, we load some libraries and fit a set of regression models.\n\n```{python}\nimport numpy as np\nimport pandas as pd\nimport pylatex as pl  # for the latex table; note: not a dependency of pyfixest - needs manual installation\nfrom great_tables import loc, style\nfrom IPython.display import FileLink, display\n\nimport pyfixest as pf\n\n%load_ext autoreload\n%autoreload 2\n\ndata = pf.get_data()\n\nfit1 = pf.feols(\"Y ~ X1 + X2 | f1\", data=data)\nfit2 = pf.feols(\"Y ~ X1 + X2 | f1 + f2\", data=data)\nfit3 = pf.feols(\"Y ~ X1 *X2 | f1 + f2\", data=data)\nfit4 = pf.feols(\"Y2 ~ X1 + X2 | f1\", data=data)\nfit5 = pf.feols(\"Y2 ~ X1 + X2 | f1 + f2\", data=data)\nfit6 = pf.feols(\"Y2 ~ X1 *X2 | f1 + f2\", data=data)\n```\n\n# Regression Tables via `pf.etable()`\n\n## Basic Usage\n\nWe can compare all regression models via the pyfixest-internal `pf.etable()` function:\n\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6])\n```\n\nYou can also estimate and display multiple regressions with one line of code using the (py)fixest stepwise notation:\n\n```{python}\npf.etable(pf.feols(\"Y+Y2~csw(X1,X2,X1:X2)\", data=data))\n```\n\n## Keep and drop variables\n`etable` allows us to do a few things out of the box. For example, we can only keep the variables that we'd like, which keeps all variables that fit the provided regex match.\n\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], keep=\"X1\")\n```\n\nWe can use the `exact_match` argument to select a specific set of variables:\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], keep=[\"X1\", \"X2\"], exact_match=True)\n```\n\nWe can also easily **drop** variables via the `drop` argument:\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], drop=[\"X1\"])\n```\n\n## Hide fixed effects or SE-type rows\nWe can hide the rows showing the relevant fixed effects and those showing the S.E. type by setting `show_fe=False` and `show_setype=False` (for instance when the set of fixed effects or the estimation method for the std. errors is the same for all models and you want to describe this in the text or table notes rather than displaying it in the table).\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], show_fe=False, show_se_type=False)\n```\n\n\n## Display p-values or confidence intervals\nBy default, `pf.etable()` reports **standard errors**. But we can also ask to output p-values or confidence intervals via the `coef_fmt` function argument.\n\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], coef_fmt=\"b \\n (se) \\n [p]\")\n```\n\n## Significance levels and rounding\nAdditionally, we can also overwrite the defaults for the reported significance levels and control the rounding of results via the `signif_code` and `digits` function arguments:\n\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], signif_code=[0.01, 0.05, 0.1], digits=5)\n```\n\n\n## Other output formats\nBy default, `pf.etable()` returns a GT object (see [the Great Tables package](https://posit-dev.github.io/great-tables/articles/intro.html)), but you can also opt to dataframe, markdown, or latex output via the `type` argument.\n\n\n```{python}\n# Pandas styler output:\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    signif_code=[0.01, 0.05, 0.1],\n    digits=5,\n    coef_fmt=\"b (se)\",\n    type=\"df\",\n)\n```\n\n```{python}\n# Markdown output:\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    signif_code=[0.01, 0.05, 0.1],\n    digits=5,\n    type=\"md\",\n)\n```\n\nTo obtain latex output use `format = \"tex\"`. If you want to save the table as a tex file, you can use the `file_name=` argument to specify the respective path where it should be saved. If you want the latex code to be displayed in the notebook, you can use the `print_tex=True` argument.\nEtable will use latex packages `booktabs`, `threeparttable` and `makecell` for the table layout, so don't forget to include these packages in your latex document.\n\n```{python}\n# LaTex output (include latex packages booktabs, threeparttable, and makecell in your document):\ntab = pf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    signif_code=[0.01, 0.05, 0.1],\n    digits=2,\n    type=\"tex\",\n    print_tex=True,\n)\n```\n\nThe following code generates a pdf including the regression table which you can display clicking on the link below the cell:\n\n```{python}\n## Use pylatex to create a tex file with the table\n\n\ndef make_pdf(tab, file):\n    \"Create a PDF document with tex table.\"\n    doc = pl.Document()\n    doc.packages.append(pl.Package(\"booktabs\"))\n    doc.packages.append(pl.Package(\"threeparttable\"))\n    doc.packages.append(pl.Package(\"makecell\"))\n\n    with (\n        doc.create(pl.Section(\"A PyFixest LateX Table\")),\n        doc.create(pl.Table(position=\"htbp\")) as table,\n    ):\n        table.append(pl.NoEscape(tab))\n\n    doc.generate_pdf(file, clean_tex=False)\n\n\n# Compile latex to pdf & display a button with the hyperlink to the pdf\n# requires tex installation\nrun = False\nif run:\n    make_pdf(tab, \"latexdocs/SampleTableDoc\")\ndisplay(FileLink(\"latexdocs/SampleTableDoc.pdf\"))\n```\n\n\n## Rename variables\nYou can also rename variables if you want to have a more readable output. Just pass a dictionary to the `labels` argument. Note that interaction terms will also be relabeled using the specified labels for the interacted variables (if you want to manually relabel an interaction term differently, add it to the dictionary).\n\n\n```{python}\nlabels = {\n    \"Y\": \"Wage\",\n    \"Y2\": \"Wealth\",\n    \"X1\": \"Age\",\n    \"X2\": \"Years of Schooling\",\n    \"f1\": \"Industry\",\n    \"f2\": \"Year\",\n}\n\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], labels=labels)\n```\n\nIf you want to label the rows indicating the inclusion of fixed effects not with the variable label but with a custom label, you can pass on a separate dictionary to the `felabels` argument.\n\n\n```{python}\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    labels=labels,\n    felabels={\"f1\": \"Industry Fixed Effects\", \"f2\": \"Year Fixed Effects\"},\n)\n```\n\n## Rename categorical variables\n\nBy default, categorical variables are returned using the formulaic \"C(variable)[T.value]\" notation. Via the `cat_template` argument,\nyou can rename categorical variables via a specified template *{variable}={value}*. This works when either the variable is categorial in the DataFrame, or the C() or i() operators are used in the regresson formula.\nÂ´\n```{python}\n\n# Add a categorical variable\ndata['job'] = np.random.choice([\"Managerial\", \"Admin\", \"Blue collar\"], size=len(data), p=[1/3, 1/3, 1/3])\n# Add a label for this variable to the dictionary\nlabels['job']=\"Job Family\"\n\nfit7 = pf.feols(\"Y ~ X1 + X2 + job\", data = data)\n\npf.etable([fit7], labels=labels, cat_template = \"{variable}::{value}\")\n```\n\nBut you can also remove the variable name and only keep the levels (categories) by specifying *cat_template=\"{value}\"*. Note that the labeling of categories also works in interaction terms:\n\n```{python}\n\nfit7 = pf.feols(\"Y ~ X1 + X2 + job\", data = data)\nfit8 = pf.feols(\"Y ~ X1 + X2 + job*X2\", data = data)\n\npf.etable([fit7, fit8], labels=labels, cat_template=\"{value}\")\n```\n\n\n## Custom model headlines\nYou can also add custom headers for each model by passing a list of strings to the `model_headers` argument.\n\n\n```{python}\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"China\", \"EU\", \"US\", \"China\", \"EU\"],\n)\n```\n\nOr change the ordering of headlines having headlines first and then dependent variables using the `head_order` argument. \"hd\" stands for headlines then dependent variables, \"dh\" for dependent variables then headlines. Assigning \"d\" or \"h\" can be used to only show dependent variables or only headlines. When head_order=\"\" only model numbers are shown.\n\n\n```{python}\npf.etable(\n    [fit1, fit4, fit2, fit5, fit3, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"US\", \"China\", \"China\", \"EU\", \"EU\"],\n    head_order=\"hd\",\n)\n```\n\n\nRemove the dependent variables from the headers:\n\n```{python}\npf.etable(\n    [fit1, fit4, fit2, fit5, fit3, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"US\", \"China\", \"China\", \"EU\", \"EU\"],\n    head_order=\"\",\n)\n```\n\n## Further custom model information\nYou can add further custom model statistics/information to the bottom of the table by using the `custom_stats` argument to which you pass a dictionary with the name of the row and lists of values. The length of the lists must be equal to the number of models.\n\n\n```{python}\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    labels=labels,\n    custom_model_stats={\n        \"Number of Clusters\": [42, 42, 42, 37, 37, 37],\n        \"Additional Info\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"],\n    },\n)\n```\n\n\n## Custom table notes\nYou can replace the default table notes with your own notes using the `notes` argument.\n\n```{python}\nmynotes = \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\npf.etable(\n    [fit1, fit4, fit2, fit5, fit3, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"US\", \"China\", \"China\", \"EU\", \"EU\"],\n    head_order=\"hd\",\n    notes=mynotes,\n)\n```\n\n\n## Publication-ready LaTex tables\nWith few lines of code you thus obtain a publication-ready latex table:\n\n\n```{python}\ntab = pf.etable(\n    [fit1, fit4, fit2, fit5, fit3, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"US\", \"China\", \"China\", \"EU\", \"EU\"],\n    head_order=\"hd\",\n    type=\"tex\",\n    notes=mynotes,\n    show_fe=True,\n    show_se_type=False,\n    custom_model_stats={\n        \"Number of Clusters\": [42, 42, 42, 37, 37, 37],\n    },\n)\n\n# Compile latex to pdf & display a button with the hyperlink to the pdf\nrun = False\nif run:\n    make_pdf(tab, \"latexdocs/SampleTableDoc2\")\ndisplay(FileLink(\"latexdocs/SampleTableDoc2.pdf\"))\n```\n\n\n# Rendering Tables in Quarto\nWhen you use quarto you can include latex tables generated by pyfixest when rendering the qmd file as pdf. Just specify `output: asis` in the code block options of the respective chunk and print the LaTex string returned by etable. Don't forget to include the `\\usepackage` commands for necessary latex packages in the YAML block. Here you find a sample [qmd file](https://github.com/py-econometrics/pyfixest/blob/master/docs/quarto_example/QuartoExample.qmd).\n\nWhen you render either a jupyter notebook or qmd file to html it is advisable to turn html-table-processing off in quarto as otherwise quarto adds further formatting which alters how your tables look like. You can do this in a raw cell at the top of your document.\n\n<pre><code>---\nformat:\n  html:\n    html-table-processing: none\n---</code></pre>\n\n# Descriptive Statistics via `pf.dtable()`\n\nThe function `pf.dtable()` allows to display descriptive statistics for a set of variables in the same layout.\n\n## Basic Usage of dtable\nSpecify the variables you want to display the descriptive statistics for. You can also use a dictionary to rename the variables and add a caption.\n\n\n\n```{python}\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    caption=\"Descriptive statistics\",\n    digits=2,\n)\n```\n\n\nChoose the set of statistics to be displayed with `stats`. You can use any pandas aggregation functions.\n\n\n```{python}\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    stats=[\"count\", \"mean\", \"std\", \"min\", \"max\"],\n    labels=labels,\n    caption=\"Descriptive statistics\",\n)\n```\n\n\n## Summarize by characteristics in columns and rows\nYou can summarize by characteristics using the `bycol` argument when groups are to be displayed in columns. When the number of observations is the same for all variables in a group, you can also opt to display the number of observations only once for each group byin a separate line at the bottom of the table with `counts_row_below==True`.\n\n\n```{python}\n# Generate some categorial data\ndata[\"country\"] = np.random.choice([\"US\", \"EU\"], data.shape[0])\ndata[\"occupation\"] = np.random.choice([\"Blue collar\", \"White collar\"], data.shape[0])\n\n# Drop nan values to have balanced data\ndata.dropna(inplace=True)\n\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    bycol=[\"country\", \"occupation\"],\n    stats=[\"count\", \"mean\", \"std\"],\n    caption=\"Descriptive statistics\",\n    stats_labels={\"count\": \"Number of observations\"},\n    counts_row_below=True,\n)\n```\n\n\nYou can also use custom aggregation functions to compute further statistics or affect how statistics are presented. Pyfixest provides two such functions `mean_std` and `mean_newline_std` which compute the mean and standard deviation and display both the same cell (either with line break between them or not). This allows to have more compact tables when you want to show statistics for many characteristcs in the columns.\n\nYou can also hide the display of the statistics labels in the header with `hide_stats_labels=True`. In that case a table note will be added naming the statistics displayed using its label (if you have not provided a custom note).\n\n\n```{python}\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    bycol=[\"country\", \"occupation\"],\n    stats=[\"mean_newline_std\", \"count\"],\n    caption=\"Descriptive statistics\",\n    stats_labels={\"count\": \"Number of observations\"},\n    counts_row_below=True,\n    hide_stats=True,\n)\n```\n\n\nYou can also split by characteristics in both columns and rows. Note that you can only use one grouping variable in rows, but several in columns (as shown above).\n\n\n```{python}\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    bycol=[\"country\"],\n    byrow=\"occupation\",\n    stats=[\"count\", \"mean\", \"std\"],\n    caption=\"Descriptive statistics\",\n)\n```\n\n\nAnd you can again export descriptive statistics tables also to LaTex:\n\n\n```{python}\ndtab = pf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    bycol=[\"country\"],\n    byrow=\"occupation\",\n    stats=[\"count\", \"mean\", \"std\"],\n    type=\"tex\",\n)\n\nrun = False\nif run:\n    make_pdf(dtab, \"latexdocs/SampleTableDoc3\")\ndisplay(FileLink(\"latexdocs/SampleTableDoc3.pdf\"))\n```\n\n\n\n# Table Layout for DataFrames with `pf.make_table()`\n\n`pf.make_table()` is called by `pf.etable()` and `pf.dtable()` to generate the tables in \"gt\" and \"tex\" format. But you can also use it directly to generate tables in the same layout from other pandas dataframes.\n\n## Basic Usage of make_table\n\n\n```{python}\ndf = pd.DataFrame(np.random.randn(4, 4).round(2), columns=[\"A\", \"B\", \"C\", \"D\"])\n\n# Make Booktabs style table\npf.make_table(df=df, caption=\"This is a caption\", notes=\"These are notes\")\n```\n\n\n## Mutiindex DataFrames\nWhen the respective dataframe has a mutiindex for the columns, columns spanners are generated from the index. The row index can also be a multiindex (of at most two levels). In this case the first index level is used to generate group rows (for instance using the index name as headline and separating the groups by a horizontal line) and the second index level is used to generate the row labels.\n\n\n```{python}\n# Create a multiindex dataframe with random data\nrow_index = pd.MultiIndex.from_tuples(\n    [\n        (\"Group 1\", \"Variable 1\"),\n        (\"Group 1\", \"Variable 2\"),\n        (\"Group 1\", \"Variable 3\"),\n        (\"Group 2\", \"Variable 4\"),\n        (\"Group 2\", \"Variable 5\"),\n        (\"Group 3\", \"Variable 6\"),\n    ]\n)\n\ncol_index = pd.MultiIndex.from_product([[\"A\", \"B\"], [\"X\", \"Y\"], [\"High\", \"Low\"]])\ndf = pd.DataFrame(np.random.randn(6, 8).round(3), index=row_index, columns=col_index)\n\npf.make_table(df=df, caption=\"This is a caption\", notes=\"These are notes\")\n```\n\n\nYou can also hide column group names: This just creates a table where variables on the second level of the row index are displayed in groups based on the first level separated by horizontal lines.\n\n\n```{python}\npf.make_table(\n    df=df, caption=\"This is a caption\", notes=\"These are notes\", rgroup_display=False\n).tab_style(style=style.text(style=\"italic\"), locations=loc.body(rows=[1, 5]))\n```\n\n\n# Custom Styling with Great Tables\nYou can use the rich set of methods offered by [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) to further customize the table display when the type is \"gt\".\n\n## Example Styling\n\n```{python}\n(\n    pf.etable([fit1, fit2, fit3, fit4, fit5, fit6])\n    .tab_options(\n        column_labels_background_color=\"cornsilk\",\n        stub_background_color=\"whitesmoke\",\n    )\n    .tab_style(\n        style=style.fill(color=\"mistyrose\"),\n        locations=loc.body(columns=\"(3)\", rows=[\"X2\"]),\n    )\n)\n```\n\n## Defining Table Styles: Some Examples\n\nYou can easily define table styles that you can apply to all tables in your project. Just define a dictionary with the respective values for the tab options (see the [Great Tables documentation](https://posit-dev.github.io/great-tables/reference/GT.tab_options.html#great_tables.GT.tab_options)) and use the style with `.tab_options(**style_dict)`.\n\n\n```{python}\nstyle_print = {\n    \"table_font_size\": \"12px\",\n    \"heading_title_font_size\": \"12px\",\n    \"source_notes_font_size\": \"8px\",\n    \"data_row_padding\": \"3px\",\n    \"column_labels_padding\": \"3px\",\n    \"row_group_border_top_style\": \"hidden\",\n    \"table_body_border_top_style\": \"None\",\n    \"table_body_border_bottom_width\": \"1px\",\n    \"column_labels_border_top_width\": \"1px\",\n    \"table_width\": \"14cm\",\n}\n\n\nstyle_presentation = {\n    \"table_font_size\": \"16px\",\n    \"table_font_color_light\": \"white\",\n    \"table_body_border_top_style\": \"hidden\",\n    \"table_body_border_bottom_style\": \"hidden\",\n    \"heading_title_font_size\": \"18px\",\n    \"source_notes_font_size\": \"12px\",\n    \"data_row_padding\": \"3px\",\n    \"column_labels_padding\": \"6px\",\n    \"column_labels_background_color\": \"midnightblue\",\n    \"stub_background_color\": \"whitesmoke\",\n    \"row_group_background_color\": \"whitesmoke\",\n    \"table_background_color\": \"whitesmoke\",\n    \"heading_background_color\": \"white\",\n    \"source_notes_background_color\": \"white\",\n    \"column_labels_border_bottom_color\": \"white\",\n    \"column_labels_font_weight\": \"bold\",\n    \"row_group_font_weight\": \"bold\",\n    \"table_width\": \"18cm\",\n}\n```\n\n\n```{python}\nt1 = pf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    stats=[\"count\", \"mean\", \"std\", \"min\", \"max\"],\n    labels=labels,\n    caption=\"Descriptive statistics\",\n)\n\nt2 = pf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    labels=labels,\n    show_se=False,\n    felabels={\"f1\": \"Industry Fixed Effects\", \"f2\": \"Year Fixed Effects\"},\n    caption=\"Regression results\",\n)\n```\n\n\n```{python}\ndisplay(t1.tab_options(**style_print))\ndisplay(t2.tab_options(**style_print))\n```\n\n\n```{python}\nstyle_printDouble = {\n    \"table_font_size\": \"12px\",\n    \"heading_title_font_size\": \"12px\",\n    \"source_notes_font_size\": \"8px\",\n    \"data_row_padding\": \"3px\",\n    \"column_labels_padding\": \"3px\",\n    \"table_body_border_bottom_style\": \"double\",\n    \"column_labels_border_top_style\": \"double\",\n    \"column_labels_border_bottom_width\": \"0.5px\",\n    \"row_group_border_top_style\": \"hidden\",\n    \"table_body_border_top_style\": \"None\",\n    \"table_width\": \"14cm\",\n}\ndisplay(t1.tab_options(**style_printDouble))\ndisplay(t2.tab_options(**style_printDouble))\n```\n","srcMarkdownNoYaml":"\n## Table Layout with PyFixest\n\nPyfixest comes with functions to generate publication-ready tables. Regression tables are generated with `pf.etable()`, which can output different formats, for instance using the [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) package or generating formatted LaTex Tables using [booktabs](https://ctan.org/pkg/booktabs?lang=en). There are also further functions `pf.dtable()` to display descriptive statistics and `pf.make_table()` generating formatted tables from pandas dataframes in the same layout.\n\nTo begin, we load some libraries and fit a set of regression models.\n\n```{python}\nimport numpy as np\nimport pandas as pd\nimport pylatex as pl  # for the latex table; note: not a dependency of pyfixest - needs manual installation\nfrom great_tables import loc, style\nfrom IPython.display import FileLink, display\n\nimport pyfixest as pf\n\n%load_ext autoreload\n%autoreload 2\n\ndata = pf.get_data()\n\nfit1 = pf.feols(\"Y ~ X1 + X2 | f1\", data=data)\nfit2 = pf.feols(\"Y ~ X1 + X2 | f1 + f2\", data=data)\nfit3 = pf.feols(\"Y ~ X1 *X2 | f1 + f2\", data=data)\nfit4 = pf.feols(\"Y2 ~ X1 + X2 | f1\", data=data)\nfit5 = pf.feols(\"Y2 ~ X1 + X2 | f1 + f2\", data=data)\nfit6 = pf.feols(\"Y2 ~ X1 *X2 | f1 + f2\", data=data)\n```\n\n# Regression Tables via `pf.etable()`\n\n## Basic Usage\n\nWe can compare all regression models via the pyfixest-internal `pf.etable()` function:\n\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6])\n```\n\nYou can also estimate and display multiple regressions with one line of code using the (py)fixest stepwise notation:\n\n```{python}\npf.etable(pf.feols(\"Y+Y2~csw(X1,X2,X1:X2)\", data=data))\n```\n\n## Keep and drop variables\n`etable` allows us to do a few things out of the box. For example, we can only keep the variables that we'd like, which keeps all variables that fit the provided regex match.\n\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], keep=\"X1\")\n```\n\nWe can use the `exact_match` argument to select a specific set of variables:\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], keep=[\"X1\", \"X2\"], exact_match=True)\n```\n\nWe can also easily **drop** variables via the `drop` argument:\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], drop=[\"X1\"])\n```\n\n## Hide fixed effects or SE-type rows\nWe can hide the rows showing the relevant fixed effects and those showing the S.E. type by setting `show_fe=False` and `show_setype=False` (for instance when the set of fixed effects or the estimation method for the std. errors is the same for all models and you want to describe this in the text or table notes rather than displaying it in the table).\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], show_fe=False, show_se_type=False)\n```\n\n\n## Display p-values or confidence intervals\nBy default, `pf.etable()` reports **standard errors**. But we can also ask to output p-values or confidence intervals via the `coef_fmt` function argument.\n\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], coef_fmt=\"b \\n (se) \\n [p]\")\n```\n\n## Significance levels and rounding\nAdditionally, we can also overwrite the defaults for the reported significance levels and control the rounding of results via the `signif_code` and `digits` function arguments:\n\n\n```{python}\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], signif_code=[0.01, 0.05, 0.1], digits=5)\n```\n\n\n## Other output formats\nBy default, `pf.etable()` returns a GT object (see [the Great Tables package](https://posit-dev.github.io/great-tables/articles/intro.html)), but you can also opt to dataframe, markdown, or latex output via the `type` argument.\n\n\n```{python}\n# Pandas styler output:\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    signif_code=[0.01, 0.05, 0.1],\n    digits=5,\n    coef_fmt=\"b (se)\",\n    type=\"df\",\n)\n```\n\n```{python}\n# Markdown output:\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    signif_code=[0.01, 0.05, 0.1],\n    digits=5,\n    type=\"md\",\n)\n```\n\nTo obtain latex output use `format = \"tex\"`. If you want to save the table as a tex file, you can use the `file_name=` argument to specify the respective path where it should be saved. If you want the latex code to be displayed in the notebook, you can use the `print_tex=True` argument.\nEtable will use latex packages `booktabs`, `threeparttable` and `makecell` for the table layout, so don't forget to include these packages in your latex document.\n\n```{python}\n# LaTex output (include latex packages booktabs, threeparttable, and makecell in your document):\ntab = pf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    signif_code=[0.01, 0.05, 0.1],\n    digits=2,\n    type=\"tex\",\n    print_tex=True,\n)\n```\n\nThe following code generates a pdf including the regression table which you can display clicking on the link below the cell:\n\n```{python}\n## Use pylatex to create a tex file with the table\n\n\ndef make_pdf(tab, file):\n    \"Create a PDF document with tex table.\"\n    doc = pl.Document()\n    doc.packages.append(pl.Package(\"booktabs\"))\n    doc.packages.append(pl.Package(\"threeparttable\"))\n    doc.packages.append(pl.Package(\"makecell\"))\n\n    with (\n        doc.create(pl.Section(\"A PyFixest LateX Table\")),\n        doc.create(pl.Table(position=\"htbp\")) as table,\n    ):\n        table.append(pl.NoEscape(tab))\n\n    doc.generate_pdf(file, clean_tex=False)\n\n\n# Compile latex to pdf & display a button with the hyperlink to the pdf\n# requires tex installation\nrun = False\nif run:\n    make_pdf(tab, \"latexdocs/SampleTableDoc\")\ndisplay(FileLink(\"latexdocs/SampleTableDoc.pdf\"))\n```\n\n\n## Rename variables\nYou can also rename variables if you want to have a more readable output. Just pass a dictionary to the `labels` argument. Note that interaction terms will also be relabeled using the specified labels for the interacted variables (if you want to manually relabel an interaction term differently, add it to the dictionary).\n\n\n```{python}\nlabels = {\n    \"Y\": \"Wage\",\n    \"Y2\": \"Wealth\",\n    \"X1\": \"Age\",\n    \"X2\": \"Years of Schooling\",\n    \"f1\": \"Industry\",\n    \"f2\": \"Year\",\n}\n\npf.etable([fit1, fit2, fit3, fit4, fit5, fit6], labels=labels)\n```\n\nIf you want to label the rows indicating the inclusion of fixed effects not with the variable label but with a custom label, you can pass on a separate dictionary to the `felabels` argument.\n\n\n```{python}\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    labels=labels,\n    felabels={\"f1\": \"Industry Fixed Effects\", \"f2\": \"Year Fixed Effects\"},\n)\n```\n\n## Rename categorical variables\n\nBy default, categorical variables are returned using the formulaic \"C(variable)[T.value]\" notation. Via the `cat_template` argument,\nyou can rename categorical variables via a specified template *{variable}={value}*. This works when either the variable is categorial in the DataFrame, or the C() or i() operators are used in the regresson formula.\nÂ´\n```{python}\n\n# Add a categorical variable\ndata['job'] = np.random.choice([\"Managerial\", \"Admin\", \"Blue collar\"], size=len(data), p=[1/3, 1/3, 1/3])\n# Add a label for this variable to the dictionary\nlabels['job']=\"Job Family\"\n\nfit7 = pf.feols(\"Y ~ X1 + X2 + job\", data = data)\n\npf.etable([fit7], labels=labels, cat_template = \"{variable}::{value}\")\n```\n\nBut you can also remove the variable name and only keep the levels (categories) by specifying *cat_template=\"{value}\"*. Note that the labeling of categories also works in interaction terms:\n\n```{python}\n\nfit7 = pf.feols(\"Y ~ X1 + X2 + job\", data = data)\nfit8 = pf.feols(\"Y ~ X1 + X2 + job*X2\", data = data)\n\npf.etable([fit7, fit8], labels=labels, cat_template=\"{value}\")\n```\n\n\n## Custom model headlines\nYou can also add custom headers for each model by passing a list of strings to the `model_headers` argument.\n\n\n```{python}\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"China\", \"EU\", \"US\", \"China\", \"EU\"],\n)\n```\n\nOr change the ordering of headlines having headlines first and then dependent variables using the `head_order` argument. \"hd\" stands for headlines then dependent variables, \"dh\" for dependent variables then headlines. Assigning \"d\" or \"h\" can be used to only show dependent variables or only headlines. When head_order=\"\" only model numbers are shown.\n\n\n```{python}\npf.etable(\n    [fit1, fit4, fit2, fit5, fit3, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"US\", \"China\", \"China\", \"EU\", \"EU\"],\n    head_order=\"hd\",\n)\n```\n\n\nRemove the dependent variables from the headers:\n\n```{python}\npf.etable(\n    [fit1, fit4, fit2, fit5, fit3, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"US\", \"China\", \"China\", \"EU\", \"EU\"],\n    head_order=\"\",\n)\n```\n\n## Further custom model information\nYou can add further custom model statistics/information to the bottom of the table by using the `custom_stats` argument to which you pass a dictionary with the name of the row and lists of values. The length of the lists must be equal to the number of models.\n\n\n```{python}\npf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    labels=labels,\n    custom_model_stats={\n        \"Number of Clusters\": [42, 42, 42, 37, 37, 37],\n        \"Additional Info\": [\"A\", \"A\", \"B\", \"B\", \"C\", \"C\"],\n    },\n)\n```\n\n\n## Custom table notes\nYou can replace the default table notes with your own notes using the `notes` argument.\n\n```{python}\nmynotes = \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.\"\npf.etable(\n    [fit1, fit4, fit2, fit5, fit3, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"US\", \"China\", \"China\", \"EU\", \"EU\"],\n    head_order=\"hd\",\n    notes=mynotes,\n)\n```\n\n\n## Publication-ready LaTex tables\nWith few lines of code you thus obtain a publication-ready latex table:\n\n\n```{python}\ntab = pf.etable(\n    [fit1, fit4, fit2, fit5, fit3, fit6],\n    labels=labels,\n    model_heads=[\"US\", \"US\", \"China\", \"China\", \"EU\", \"EU\"],\n    head_order=\"hd\",\n    type=\"tex\",\n    notes=mynotes,\n    show_fe=True,\n    show_se_type=False,\n    custom_model_stats={\n        \"Number of Clusters\": [42, 42, 42, 37, 37, 37],\n    },\n)\n\n# Compile latex to pdf & display a button with the hyperlink to the pdf\nrun = False\nif run:\n    make_pdf(tab, \"latexdocs/SampleTableDoc2\")\ndisplay(FileLink(\"latexdocs/SampleTableDoc2.pdf\"))\n```\n\n\n# Rendering Tables in Quarto\nWhen you use quarto you can include latex tables generated by pyfixest when rendering the qmd file as pdf. Just specify `output: asis` in the code block options of the respective chunk and print the LaTex string returned by etable. Don't forget to include the `\\usepackage` commands for necessary latex packages in the YAML block. Here you find a sample [qmd file](https://github.com/py-econometrics/pyfixest/blob/master/docs/quarto_example/QuartoExample.qmd).\n\nWhen you render either a jupyter notebook or qmd file to html it is advisable to turn html-table-processing off in quarto as otherwise quarto adds further formatting which alters how your tables look like. You can do this in a raw cell at the top of your document.\n\n<pre><code>---\nformat:\n  html:\n    html-table-processing: none\n---</code></pre>\n\n# Descriptive Statistics via `pf.dtable()`\n\nThe function `pf.dtable()` allows to display descriptive statistics for a set of variables in the same layout.\n\n## Basic Usage of dtable\nSpecify the variables you want to display the descriptive statistics for. You can also use a dictionary to rename the variables and add a caption.\n\n\n\n```{python}\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    caption=\"Descriptive statistics\",\n    digits=2,\n)\n```\n\n\nChoose the set of statistics to be displayed with `stats`. You can use any pandas aggregation functions.\n\n\n```{python}\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    stats=[\"count\", \"mean\", \"std\", \"min\", \"max\"],\n    labels=labels,\n    caption=\"Descriptive statistics\",\n)\n```\n\n\n## Summarize by characteristics in columns and rows\nYou can summarize by characteristics using the `bycol` argument when groups are to be displayed in columns. When the number of observations is the same for all variables in a group, you can also opt to display the number of observations only once for each group byin a separate line at the bottom of the table with `counts_row_below==True`.\n\n\n```{python}\n# Generate some categorial data\ndata[\"country\"] = np.random.choice([\"US\", \"EU\"], data.shape[0])\ndata[\"occupation\"] = np.random.choice([\"Blue collar\", \"White collar\"], data.shape[0])\n\n# Drop nan values to have balanced data\ndata.dropna(inplace=True)\n\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    bycol=[\"country\", \"occupation\"],\n    stats=[\"count\", \"mean\", \"std\"],\n    caption=\"Descriptive statistics\",\n    stats_labels={\"count\": \"Number of observations\"},\n    counts_row_below=True,\n)\n```\n\n\nYou can also use custom aggregation functions to compute further statistics or affect how statistics are presented. Pyfixest provides two such functions `mean_std` and `mean_newline_std` which compute the mean and standard deviation and display both the same cell (either with line break between them or not). This allows to have more compact tables when you want to show statistics for many characteristcs in the columns.\n\nYou can also hide the display of the statistics labels in the header with `hide_stats_labels=True`. In that case a table note will be added naming the statistics displayed using its label (if you have not provided a custom note).\n\n\n```{python}\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    bycol=[\"country\", \"occupation\"],\n    stats=[\"mean_newline_std\", \"count\"],\n    caption=\"Descriptive statistics\",\n    stats_labels={\"count\": \"Number of observations\"},\n    counts_row_below=True,\n    hide_stats=True,\n)\n```\n\n\nYou can also split by characteristics in both columns and rows. Note that you can only use one grouping variable in rows, but several in columns (as shown above).\n\n\n```{python}\npf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    bycol=[\"country\"],\n    byrow=\"occupation\",\n    stats=[\"count\", \"mean\", \"std\"],\n    caption=\"Descriptive statistics\",\n)\n```\n\n\nAnd you can again export descriptive statistics tables also to LaTex:\n\n\n```{python}\ndtab = pf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    labels=labels,\n    bycol=[\"country\"],\n    byrow=\"occupation\",\n    stats=[\"count\", \"mean\", \"std\"],\n    type=\"tex\",\n)\n\nrun = False\nif run:\n    make_pdf(dtab, \"latexdocs/SampleTableDoc3\")\ndisplay(FileLink(\"latexdocs/SampleTableDoc3.pdf\"))\n```\n\n\n\n# Table Layout for DataFrames with `pf.make_table()`\n\n`pf.make_table()` is called by `pf.etable()` and `pf.dtable()` to generate the tables in \"gt\" and \"tex\" format. But you can also use it directly to generate tables in the same layout from other pandas dataframes.\n\n## Basic Usage of make_table\n\n\n```{python}\ndf = pd.DataFrame(np.random.randn(4, 4).round(2), columns=[\"A\", \"B\", \"C\", \"D\"])\n\n# Make Booktabs style table\npf.make_table(df=df, caption=\"This is a caption\", notes=\"These are notes\")\n```\n\n\n## Mutiindex DataFrames\nWhen the respective dataframe has a mutiindex for the columns, columns spanners are generated from the index. The row index can also be a multiindex (of at most two levels). In this case the first index level is used to generate group rows (for instance using the index name as headline and separating the groups by a horizontal line) and the second index level is used to generate the row labels.\n\n\n```{python}\n# Create a multiindex dataframe with random data\nrow_index = pd.MultiIndex.from_tuples(\n    [\n        (\"Group 1\", \"Variable 1\"),\n        (\"Group 1\", \"Variable 2\"),\n        (\"Group 1\", \"Variable 3\"),\n        (\"Group 2\", \"Variable 4\"),\n        (\"Group 2\", \"Variable 5\"),\n        (\"Group 3\", \"Variable 6\"),\n    ]\n)\n\ncol_index = pd.MultiIndex.from_product([[\"A\", \"B\"], [\"X\", \"Y\"], [\"High\", \"Low\"]])\ndf = pd.DataFrame(np.random.randn(6, 8).round(3), index=row_index, columns=col_index)\n\npf.make_table(df=df, caption=\"This is a caption\", notes=\"These are notes\")\n```\n\n\nYou can also hide column group names: This just creates a table where variables on the second level of the row index are displayed in groups based on the first level separated by horizontal lines.\n\n\n```{python}\npf.make_table(\n    df=df, caption=\"This is a caption\", notes=\"These are notes\", rgroup_display=False\n).tab_style(style=style.text(style=\"italic\"), locations=loc.body(rows=[1, 5]))\n```\n\n\n# Custom Styling with Great Tables\nYou can use the rich set of methods offered by [Great Tables](https://posit-dev.github.io/great-tables/articles/intro.html) to further customize the table display when the type is \"gt\".\n\n## Example Styling\n\n```{python}\n(\n    pf.etable([fit1, fit2, fit3, fit4, fit5, fit6])\n    .tab_options(\n        column_labels_background_color=\"cornsilk\",\n        stub_background_color=\"whitesmoke\",\n    )\n    .tab_style(\n        style=style.fill(color=\"mistyrose\"),\n        locations=loc.body(columns=\"(3)\", rows=[\"X2\"]),\n    )\n)\n```\n\n## Defining Table Styles: Some Examples\n\nYou can easily define table styles that you can apply to all tables in your project. Just define a dictionary with the respective values for the tab options (see the [Great Tables documentation](https://posit-dev.github.io/great-tables/reference/GT.tab_options.html#great_tables.GT.tab_options)) and use the style with `.tab_options(**style_dict)`.\n\n\n```{python}\nstyle_print = {\n    \"table_font_size\": \"12px\",\n    \"heading_title_font_size\": \"12px\",\n    \"source_notes_font_size\": \"8px\",\n    \"data_row_padding\": \"3px\",\n    \"column_labels_padding\": \"3px\",\n    \"row_group_border_top_style\": \"hidden\",\n    \"table_body_border_top_style\": \"None\",\n    \"table_body_border_bottom_width\": \"1px\",\n    \"column_labels_border_top_width\": \"1px\",\n    \"table_width\": \"14cm\",\n}\n\n\nstyle_presentation = {\n    \"table_font_size\": \"16px\",\n    \"table_font_color_light\": \"white\",\n    \"table_body_border_top_style\": \"hidden\",\n    \"table_body_border_bottom_style\": \"hidden\",\n    \"heading_title_font_size\": \"18px\",\n    \"source_notes_font_size\": \"12px\",\n    \"data_row_padding\": \"3px\",\n    \"column_labels_padding\": \"6px\",\n    \"column_labels_background_color\": \"midnightblue\",\n    \"stub_background_color\": \"whitesmoke\",\n    \"row_group_background_color\": \"whitesmoke\",\n    \"table_background_color\": \"whitesmoke\",\n    \"heading_background_color\": \"white\",\n    \"source_notes_background_color\": \"white\",\n    \"column_labels_border_bottom_color\": \"white\",\n    \"column_labels_font_weight\": \"bold\",\n    \"row_group_font_weight\": \"bold\",\n    \"table_width\": \"18cm\",\n}\n```\n\n\n```{python}\nt1 = pf.dtable(\n    data,\n    vars=[\"Y\", \"Y2\", \"X1\", \"X2\"],\n    stats=[\"count\", \"mean\", \"std\", \"min\", \"max\"],\n    labels=labels,\n    caption=\"Descriptive statistics\",\n)\n\nt2 = pf.etable(\n    [fit1, fit2, fit3, fit4, fit5, fit6],\n    labels=labels,\n    show_se=False,\n    felabels={\"f1\": \"Industry Fixed Effects\", \"f2\": \"Year Fixed Effects\"},\n    caption=\"Regression results\",\n)\n```\n\n\n```{python}\ndisplay(t1.tab_options(**style_print))\ndisplay(t2.tab_options(**style_print))\n```\n\n\n```{python}\nstyle_printDouble = {\n    \"table_font_size\": \"12px\",\n    \"heading_title_font_size\": \"12px\",\n    \"source_notes_font_size\": \"8px\",\n    \"data_row_padding\": \"3px\",\n    \"column_labels_padding\": \"3px\",\n    \"table_body_border_bottom_style\": \"double\",\n    \"column_labels_border_top_style\": \"double\",\n    \"column_labels_border_bottom_width\": \"0.5px\",\n    \"row_group_border_top_style\": \"hidden\",\n    \"table_body_border_top_style\": \"None\",\n    \"table_width\": \"14cm\",\n}\ndisplay(t1.tab_options(**style_printDouble))\ndisplay(t2.tab_options(**style_printDouble))\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"python":"/pyfixest/.pixi/envs/docs/Scripts/python.exe","engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"html-table-processing":"none"},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"table-layout.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.32","quartodoc":{"package":"pyfixest","title":"PyFixest Function Reference","parser":"numpy","rewrite_all_pages":false,"sidebar":"_sidebar.yml","sections":[{"title":"Estimation Functions","desc":"User facing estimation functions\n","contents":["estimation.estimation.feols","estimation.estimation.fepois","estimation.estimation.feglm","did.estimation.did2s","did.estimation.lpdid","did.estimation.event_study","estimation.bonferroni","estimation.rwolf"]},{"title":"Estimation Classes","desc":"Details on Methods and Attributes\n","contents":["estimation.feols_.Feols","estimation.fepois_.Fepois","estimation.feiv_.Feiv","estimation.feglm_.Feglm","estimation.felogit_.Felogit","estimation.feprobit_.Feprobit","estimation.fegaussian_.Fegaussian","estimation.feols_compressed_.FeolsCompressed"]},{"title":"Summarize and Visualize","desc":"Post-Processing of Estimation Results\n","contents":["did.visualize.panelview","report.summary","report.etable","report.dtable","report.coefplot","report.iplot","did.visualize.panelview"]},{"title":"Misc / Utilities","desc":"PyFixest internals and utilities\n","contents":["estimation.demean","estimation.detect_singletons","estimation.model_matrix_fixest"]}]},"toc-title":"On this page","toc-location":"left"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}