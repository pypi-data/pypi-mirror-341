{
  "hash": "c91aa5f84c1983e14e35266df8d5364d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: News\n---\n\n\n\n## PyFixest 0.22.0\n\n### Changes\n\n- Fix bug in wildboottest method @s3alfisc (#506)\n- docs: add sanskriti2005 as a contributor for infra @allcontributors (#503)\n- Infra: added the release-drafter for automation of release notes @sanskriti2005 (#502)\n- Fix broken link in contributing.md @s3alfisc (#499)\n- docs: add leostimpfle as a contributor for bug @allcontributors (#495)\n- Update justfile @leostimpfle (#494)\n- docs: add baggiponte as a contributor for doc @allcontributors (#490)\n- docs: improve installation section @baggiponte (#489)\n- Bump tornado from 6.4 to 6.4.1 @dependabot (#487)\n- docs: add leostimpfle as a contributor for code @allcontributors (#478)\n- Feols: speed up the creation of interacted fixed effects via `fe1^fe2` syntax @leostimpfle (#475)\n- rename resampling iterations to 'reps' in all methods @s3alfisc (#474)\n- fix a lot of broken links throught the repo @s3alfisc (#472)\n- Multiple readme fixes required after package was moved to py-econometrics project @s3alfisc (#450)\n\n### Infrastructure\n\n- infrastructure: fix minor release drafter bugs @s3alfisc (#504)\n\n## PyFixest 0.21.0\n\n- Add support for randomization inference via the `ritest()` method:\n\n\n::: {#f7719d94 .cell execution_count=1}\n``` {.python .cell-code}\nimport pyfixest as pf\ndata = pf.get_data()\n\nfit = pf.feols(\"Y ~ X1\", data = data)\nfit.ritest(resampvar=\"X1=0\", reps = 1000)\n```\n:::\n\n\n## PyFixest 0.20.0\n\n- This version introduces MyPy type checks to the entire pyfixest codebase. Thanks to @juanitorduz for nudging me to get started with this =). It also fixes a handful of smaller bugs.\n\n## PyFixest 0.19.0\n\n- Fixes multiple smaller and larger performance regressions. The NYC-Taxi example regression now takes approximately 22 seconds to run (... if my laptopt is connected to a power charger)!\n\n::: {#302f9dcd .cell execution_count=2}\n``` {.python .cell-code}\n%load_ext autoreload\n%autoreload 2\n\nimport duckdb\nimport time\nimport numpy as np\nimport pyfixest as pf\n\n# %%\nnyc = duckdb.sql(\n    '''\n    FROM 'C:/Users/alexa/Documents/nyc-taxi/**/*.parquet'\n    SELECT\n        tip_amount, trip_distance, passenger_count,\n        vendor_id, payment_type, dropoff_at,\n        dayofweek(dropoff_at) AS dofw\n    WHERE year = 2012 AND month <= 3\n    '''\n    ).df()\n\n# convert dowf, vendor_id, payment_type to categorical\ntic = time.time()\nnyc[\"dofw\"] = nyc[\"dofw\"].astype(int)\nnyc[\"vendor_id\"] = nyc[\"vendor_id\"].astype(\"category\")\nnyc[\"payment_type\"] = nyc[\"payment_type\"].astype(\"category\")\nprint(f\"\"\"\n    I am convering columns of type 'objects' to 'categories' and 'int'data types outside\n    of the regression, hence I am cheating a bit. This saves {np.round(time.time() - tic)} seconds.\n    \"\"\"\n)\n#    I am convering columns of type 'objects' to 'categories' and 'int'data types outside\n#    of the regression, hence I am cheating a bit. This saves 7.0 seconds.\n\nrun = True\nif run:\n\n    # mock regression for JIT compilation\n    fit = pf.feols(\n        fml = \"tip_amount ~ trip_distance + passenger_count | vendor_id + payment_type + dofw\",\n        data = nyc.iloc[1:10_000],\n        copy_data = False,\n        store_data = False\n        )\n\n    import time\n    tic = time.time()\n    fit = pf.feols(\n        fml = \"tip_amount ~ trip_distance + passenger_count | vendor_id + payment_type + dofw\",\n        data = nyc,\n        copy_data = False, # saves a few seconds\n        store_data = False # saves a few second\n        )\n    passed = time.time() - tic\n    print(f\"Passed time is {np.round(passed)}.\")\n    # Passed time is 22.\n```\n:::\n\n\n- Adds three new function arguments to `feols()` and `fepois()`: `copy_data`, `store_data`, and `fixef_tol`.\n- Adds support for frequency weights with the `weights_type` function argument.\n\n::: {#954464ae .cell execution_count=3}\n``` {.python .cell-code}\nimport pyfixest as pf\n\ndata = pf.get_data(N = 10000, model = \"Fepois\")\ndf_weighted = data[[\"Y\", \"X1\", \"f1\"]].groupby([\"Y\", \"X1\", \"f1\"]).size().reset_index().rename(columns={0: \"count\"})\ndf_weighted[\"id\"] = list(range(df_weighted.shape[0]))\n\nprint(\"Dimension of the aggregated df:\", df_weighted.shape)\nprint(df_weighted.head())\n\nfit = pf.feols(\n    \"Y ~ X1 | f1\",\n    data = data\n)\nfit_weighted = pf.feols(\n    \"Y ~ X1 | f1\",\n    data = df_weighted,\n    weights = \"count\",\n    weights_type = \"fweights\"\n)\npf.etable([fit, fit_weighted], coef_fmt = \"b(se) \\n (t) \\n (p)\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"lCKz4Y\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.4.1/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"lCKz4Y\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"lCKz4Y\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"RXjMTG\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.4.1/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"RXjMTG\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"RXjMTG\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nDimension of the aggregated df: (1278, 5)\n     Y   X1   f1  count  id\n0  0.0  0.0  0.0     17   0\n1  0.0  0.0  1.0     11   1\n2  0.0  0.0  2.0     10   2\n3  0.0  0.0  3.0     17   3\n4  0.0  0.0  4.0     14   4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div id=\"yiuvapofek\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>\n#yiuvapofek table {\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Helvetica Neue', 'Fira Sans', 'Droid Sans', Arial, sans-serif;\n          -webkit-font-smoothing: antialiased;\n          -moz-osx-font-smoothing: grayscale;\n        }\n\n#yiuvapofek thead, tbody, tfoot, tr, td, th { border-style: none; }\n tr { background-color: transparent; }\n#yiuvapofek p { margin: 0; padding: 0; }\n #yiuvapofek .gt_table { display: table; border-collapse: collapse; line-height: normal; margin-left: auto; margin-right: auto; color: #333333; font-size: 16px; font-weight: normal; font-style: normal; background-color: #FFFFFF; width: auto; border-top-style: solid; border-top-width: 2px; border-top-color: #A8A8A8; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; border-bottom-style: hidden; border-bottom-width: 2px; border-bottom-color: #A8A8A8; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; }\n #yiuvapofek .gt_caption { padding-top: 4px; padding-bottom: 4px; }\n #yiuvapofek .gt_title { color: #333333; font-size: 125%; font-weight: initial; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; border-bottom-color: #FFFFFF; border-bottom-width: 0; }\n #yiuvapofek .gt_subtitle { color: #333333; font-size: 85%; font-weight: initial; padding-top: 3px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; border-top-color: #FFFFFF; border-top-width: 0; }\n #yiuvapofek .gt_heading { background-color: #FFFFFF; text-align: center; border-bottom-color: #FFFFFF; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #yiuvapofek .gt_bottom_border { border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: #D3D3D3; }\n #yiuvapofek .gt_col_headings { border-top-style: solid; border-top-width: 2px; border-top-color: black; border-bottom-style: solid; border-bottom-width: 0.5px; border-bottom-color: black; border-left-style: none; border-left-width: 1px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 1px; border-right-color: #D3D3D3; }\n #yiuvapofek .gt_col_heading { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; border-left-style: none; border-left-width: 0px; border-left-color: white; border-right-style: none; border-right-width: 0px; border-right-color: white; vertical-align: bottom; padding-top: 4px; padding-bottom: 5px; padding-left: 5px; padding-right: 5px; overflow-x: hidden; }\n #yiuvapofek .gt_column_spanner_outer { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: normal; text-transform: inherit; padding-top: 0; padding-bottom: 0; padding-left: 4px; padding-right: 4px; }\n #yiuvapofek .gt_column_spanner_outer:first-child { padding-left: 0; }\n #yiuvapofek .gt_column_spanner_outer:last-child { padding-right: 0; }\n #yiuvapofek .gt_column_spanner { border-bottom-style: solid; border-bottom-width: 0.5px; border-bottom-color: black; vertical-align: bottom; padding-top: 4px; padding-bottom: 4px; overflow-x: hidden; display: inline-block; width: 100%; }\n #yiuvapofek .gt_spanner_row { border-bottom-style: hidden; }\n #yiuvapofek .gt_group_heading { padding-top: 0px; padding-bottom: 0px; padding-left: 5px; padding-right: 5px; color: #333333; background-color: #FFFFFF; font-size: 0px; font-weight: initial; text-transform: inherit; border-top-style: solid; border-top-width: 0.5px; border-top-color: black; border-bottom-style: solid; border-bottom-width: 0.5px; border-bottom-color: black; border-left-style: none; border-left-width: 1px; border-left-color: white; border-right-style: none; border-right-width: 1px; border-right-color: white; vertical-align: middle; text-align: left; }\n #yiuvapofek .gt_empty_group_heading { padding: 0.5px; color: #333333; background-color: #FFFFFF; font-size: 0px; font-weight: initial; border-top-style: solid; border-top-width: 0.5px; border-top-color: black; border-bottom-style: solid; border-bottom-width: 0.5px; border-bottom-color: black; vertical-align: middle; }\n #yiuvapofek .gt_from_md> :first-child { margin-top: 0; }\n #yiuvapofek .gt_from_md> :last-child { margin-bottom: 0; }\n #yiuvapofek .gt_row { padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; margin: 10px; border-top-style: none; border-top-width: 1px; border-top-color: #D3D3D3; border-left-style: none; border-left-width: 0px; border-left-color: white; border-right-style: none; border-right-width: 0px; border-right-color: white; vertical-align: middle; overflow-x: hidden; }\n #yiuvapofek .gt_stub { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: hidden; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; }\n #yiuvapofek .gt_stub_row_group { color: #333333; background-color: #FFFFFF; font-size: 100%; font-weight: initial; text-transform: inherit; border-right-style: solid; border-right-width: 2px; border-right-color: #D3D3D3; padding-left: 5px; padding-right: 5px; vertical-align: top; }\n #yiuvapofek .gt_row_group_first td { border-top-width: 0.5px; }\n #yiuvapofek .gt_row_group_first th { border-top-width: 0.5px; }\n #yiuvapofek .gt_striped { background-color: rgba(128,128,128,0.05); }\n #yiuvapofek .gt_table_body { border-top-style: solid; border-top-width: 0.5px; border-top-color: black; border-bottom-style: solid; border-bottom-width: 2px; border-bottom-color: black; }\n #yiuvapofek .gt_sourcenotes { color: #333333; background-color: #FFFFFF; border-bottom-style: none; border-bottom-width: 2px; border-bottom-color: #D3D3D3; border-left-style: none; border-left-width: 2px; border-left-color: #D3D3D3; border-right-style: none; border-right-width: 2px; border-right-color: #D3D3D3; }\n #yiuvapofek .gt_sourcenote { font-size: 90%; padding-top: 4px; padding-bottom: 4px; padding-left: 5px; padding-right: 5px; text-align: left; }\n #yiuvapofek .gt_left { text-align: left; }\n #yiuvapofek .gt_center { text-align: center; }\n #yiuvapofek .gt_right { text-align: right; font-variant-numeric: tabular-nums; }\n #yiuvapofek .gt_font_normal { font-weight: normal; }\n #yiuvapofek .gt_font_bold { font-weight: bold; }\n #yiuvapofek .gt_font_italic { font-style: italic; }\n #yiuvapofek .gt_super { font-size: 65%; }\n #yiuvapofek .gt_footnote_marks { font-size: 75%; vertical-align: 0.4em; position: initial; }\n #yiuvapofek .gt_asterisk { font-size: 100%; vertical-align: 0; }\n \n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n<thead>\n\n<tr class=\"gt_col_headings gt_spanner_row\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"\"></th>\n  <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" scope=\"colgroup\" id=\"Y\">\n    <span class=\"gt_column_spanner\">Y</span>\n  </th>\n</tr>\n<tr class=\"gt_col_headings\">\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"(1)\">(1)</th>\n  <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"(2)\">(2)</th>\n</tr>\n</thead>\n<tbody class=\"gt_table_body\">\n  <tr class=\"gt_group_heading_row\">\n    <th class=\"gt_group_heading\" colspan=\"3\">coef</th>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">X1</th>\n    <td class=\"gt_row gt_center\">0.001(0.012) <br> (0.092) <br> (0.927)</td>\n    <td class=\"gt_row gt_center\">0.001(0.012) <br> (0.092) <br> (0.927)</td>\n  </tr>\n  <tr class=\"gt_group_heading_row\">\n    <th class=\"gt_group_heading\" colspan=\"3\">fe</th>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">f1</th>\n    <td class=\"gt_row gt_center\">x</td>\n    <td class=\"gt_row gt_center\">x</td>\n  </tr>\n  <tr class=\"gt_group_heading_row\">\n    <th class=\"gt_group_heading\" colspan=\"3\">stats</th>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">Observations</th>\n    <td class=\"gt_row gt_center\">9997</td>\n    <td class=\"gt_row gt_center\">9997</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">S.E. type</th>\n    <td class=\"gt_row gt_center\">by: f1</td>\n    <td class=\"gt_row gt_center\">by: f1</td>\n  </tr>\n  <tr>\n    <th class=\"gt_row gt_left gt_stub\">R<sup>2</sup></th>\n    <td class=\"gt_row gt_center\">0.011</td>\n    <td class=\"gt_row gt_center\">-</td>\n  </tr>\n</tbody>\n  <tfoot class=\"gt_sourcenotes\">\n  \n  <tr>\n    <td class=\"gt_sourcenote\" colspan=\"3\"></td>\n  </tr>\n\n</tfoot>\n\n</table>\n\n</div>\n        \n```\n:::\n:::\n\n\n- Bugfix: Wild Cluster Bootstrap Inference with Weights would compute unweighted standard errors. Sorry about that! WLS is not supported for the WCB.\n- Adds support for CRV3 inference with weights.\n\n\n## PyFixest 0.18.0\n\n- Large Refactoring of Interal Processing of Model Formulas, in particular `FixestFormulaParser` and `model_matrix_fixest`. As a results, the code should be cleaner and more robust.\n- Thanks to the refactoring, we can now bump the required `formulaic` version to the stable `1.0.0` release.\n- The `fml` argument of `model_matrix_fixest` is deprecated. Instead, `model_matrix_fixest`\n  now asks for a `FixestFormula`, which is essentially a dictionary with information on model\n  specifications like a first stage formula (if applicable), dependent variables, fixed effects,\n  etc.\n- Additionally, `model_matrix_fixest` now returns a dictionary instead of a tuple.\n- Brings back fixed effects reference setting via `i(var1, var2, ref)` syntax. Deprecates the `i_ref1`, `i_ref2` function arguments. I.e. it is again possible to e.g. run\n\n::: {#48cf1acf .cell execution_count=4}\n``` {.python .cell-code}\nimport pyfixest as pf\ndata = pf.get_data()\n\nfit1 = pf.feols(\"Y ~ i(f1, X2)\", data=data)\nfit1.coef()[0:8]\n```\n:::\n\n\nVia the `ref` syntax, via can set the reference level:\n\n::: {#24bcefb9 .cell execution_count=5}\n``` {.python .cell-code}\nfit2 = pf.feols(\"Y ~ i(f1, X2, ref = 1)\", data=data)\nfit2.coef()[0:8]\n```\n:::\n\n\n## PyFixest 0.17.0\n\n- Restructures the codebase and reorganizes how users can interact with the `pyfixest` API. It is now recommended to use `pyfixest` in the following way:\n\n\n  ::: {#0e744a3e .cell execution_count=6}\n  ``` {.python .cell-code}\n  import numpy as np\n  import pyfixest as pf\n  data = pf.get_data()\n  data[\"D\"] = data[\"X1\"] > 0\n  fit = pf.feols(\"Y ~ D + f1\", data = data)\n  fit.tidy()\n  ```\n  \n  ::: {.cell-output .cell-output-display execution_count=2}\n  ```{=html}\n  <div>\n  <style scoped>\n      .dataframe tbody tr th:only-of-type {\n          vertical-align: middle;\n      }\n  \n      .dataframe tbody tr th {\n          vertical-align: top;\n      }\n  \n      .dataframe thead th {\n          text-align: right;\n      }\n  </style>\n  <table border=\"1\" class=\"dataframe\">\n    <thead>\n      <tr style=\"text-align: right;\">\n        <th></th>\n        <th>Estimate</th>\n        <th>Std. Error</th>\n        <th>t value</th>\n        <th>Pr(&gt;|t|)</th>\n        <th>2.5%</th>\n        <th>97.5%</th>\n      </tr>\n      <tr>\n        <th>Coefficient</th>\n        <th></th>\n        <th></th>\n        <th></th>\n        <th></th>\n        <th></th>\n        <th></th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th>Intercept</th>\n        <td>0.778849</td>\n        <td>0.170261</td>\n        <td>4.574437</td>\n        <td>0.000005</td>\n        <td>0.444737</td>\n        <td>1.112961</td>\n      </tr>\n      <tr>\n        <th>D</th>\n        <td>-1.402617</td>\n        <td>0.152224</td>\n        <td>-9.214140</td>\n        <td>0.000000</td>\n        <td>-1.701335</td>\n        <td>-1.103899</td>\n      </tr>\n      <tr>\n        <th>f1</th>\n        <td>0.004774</td>\n        <td>0.008058</td>\n        <td>0.592508</td>\n        <td>0.553645</td>\n        <td>-0.011038</td>\n        <td>0.020587</td>\n      </tr>\n    </tbody>\n  </table>\n  </div>\n  ```\n  :::\n  :::\n  \n  \n  The update should not inroduce any breaking changes. Thanks to [@Wenzhi-Ding](https://github.com/Wenzhi-Ding) for the PR!\n\n- Adds support for simultaneous confidence intervals via a multiplier bootstrap. Thanks to [@apoorvalal](https://github.com/apoorvalal) for the contribution!\n\n\n  ::: {#03e9cc7d .cell execution_count=7}\n  ``` {.python .cell-code}\n  fit.confint(joint = True)\n  ```\n  \n  ::: {.cell-output .cell-output-display execution_count=3}\n  ```{=html}\n  <div>\n  <style scoped>\n      .dataframe tbody tr th:only-of-type {\n          vertical-align: middle;\n      }\n  \n      .dataframe tbody tr th {\n          vertical-align: top;\n      }\n  \n      .dataframe thead th {\n          text-align: right;\n      }\n  </style>\n  <table border=\"1\" class=\"dataframe\">\n    <thead>\n      <tr style=\"text-align: right;\">\n        <th></th>\n        <th>2.5%</th>\n        <th>97.5%</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th>Intercept</th>\n        <td>0.383664</td>\n        <td>1.174034</td>\n      </tr>\n      <tr>\n        <th>D</th>\n        <td>-1.755938</td>\n        <td>-1.049296</td>\n      </tr>\n      <tr>\n        <th>f1</th>\n        <td>-0.013928</td>\n        <td>0.023477</td>\n      </tr>\n    </tbody>\n  </table>\n  </div>\n  ```\n  :::\n  :::\n  \n  \n- Adds support for the causal cluster variance estimator by [Abadie et al. (QJE, 2023)](https://academic.oup.com/qje/article/138/1/1/6750017)\n  for OLS via the `.ccv()` method.\n\n\n  ::: {#23bd31ad .cell execution_count=8}\n  ``` {.python .cell-code}\n  fit.ccv(treatment = \"D\", cluster = \"group_id\")\n  ```\n  \n  ::: {.cell-output .cell-output-stderr}\n  ```\n  C:\\Users\\alexa\\Documents\\pyfixest\\pyfixest\\estimation\\feols_.py:1377: UserWarning: The initial model was not clustered. CRV1 inference is computed and stored in the model object.\n    warnings.warn(\n  ```\n  :::\n  \n  ::: {.cell-output .cell-output-display execution_count=4}\n  ```{=html}\n  <div>\n  <style scoped>\n      .dataframe tbody tr th:only-of-type {\n          vertical-align: middle;\n      }\n  \n      .dataframe tbody tr th {\n          vertical-align: top;\n      }\n  \n      .dataframe thead th {\n          text-align: right;\n      }\n  </style>\n  <table border=\"1\" class=\"dataframe\">\n    <thead>\n      <tr style=\"text-align: right;\">\n        <th></th>\n        <th>Estimate</th>\n        <th>Std. Error</th>\n        <th>t value</th>\n        <th>Pr(&gt;|t|)</th>\n        <th>2.5%</th>\n        <th>97.5%</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th>CCV</th>\n        <td>-1.4026168622179929</td>\n        <td>0.301814</td>\n        <td>-4.647281</td>\n        <td>0.0002</td>\n        <td>-2.036706</td>\n        <td>-0.768528</td>\n      </tr>\n      <tr>\n        <th>CRV1</th>\n        <td>-1.402617</td>\n        <td>0.205132</td>\n        <td>-6.837621</td>\n        <td>0.000002</td>\n        <td>-1.833584</td>\n        <td>-0.97165</td>\n      </tr>\n    </tbody>\n  </table>\n  </div>\n  ```\n  :::\n  :::\n  \n  \n## PyFixest 0.16.0\n\n- Adds multiple quality of life improvements for developers, thanks to [NKeleher](https://github.com/NKeleher).\n- Adds more options to customize `etable()` output thanks to [Wenzhi-Ding](https://github.com/Wenzhi-Ding).\n- Implements Romano-Wolf and Bonferroni corrections for multiple testing in the `multcomp` module.\n\n## PyFixest 0.15.\n\n- Adds support for weighted least squares for `feols()`.\n- Reduces testing time drastically by running tests on fewer random data samples. Qualitatively,\n  the set of test remains identical.\n- Some updates for future `pandas` compatibility.\n\n## PyFixest 0.14.0\n\n- Moves the documentation to [quartodoc](https://github.com/machow/quartodoc).\n- Changes all docstrings to `numpy` format.\n- Difference-in-differences estimation functions now need to be imported via the `pyfixest.did.estimation` module:\n\n::: {#be7b6d54 .cell execution_count=9}\n``` {.python .cell-code}\nfrom pyfixest.did.estimation import did2s, lpdid, event_study\n```\n:::\n\n\n## PyFixest 0.13.5\n\n- Fixes a bug that lead to incorrect results when the dependent variable and **all covariates** (excluding the fixed effects) where integers.\n\n## PyFixest 0.13.4\n\n- Fixes a bug in `etable()` with IV's that occurred because `feols()` does not report R2 statistics for IVs.\n\n## PyFixest 0.13.2\n\n- Fixes a bug in `etable()` and a warning in `fixest_model_matrix` that arose with higher `pandas` versions. Thanks to @aeturrell for reporting!\n\n## PyFixest 0.13.0\n\n### New Features\n\n- Introduces a new `pyfixest.did` module which contains routines for Difference-in-Differences estimation.\n- Introduces support for basic versions of the local projections DiD estimator following [Dube et al (2023)](https://www.nber.org/papers/w31184)\n- Adds a new vignette for Difference-in-Differences estimation.\n- Reports R2 values in `etable()`.\n\n\n## PyFixest 0.12.0\n\n\n### Enhancements:\n\n- Good performance improvements for singleton fixed effects detection. Thanks to [@styfenschaer](https://github.com/styfenschaer) for the PR! See [#229](https://github.com/py-econometrics/pyfixest/issues/229).\n- Uses the [r2u project](https://github.com/eddelbuettel/r2u) for installing R and R packages on github actions, with great performance improvements.\n- Allows to pass `polars` data frames to `feols()`, `fepois()` and `predict()`. [#232](https://github.com/py-econometrics/pyfixest/issues/232). Thanks to [@vincentarelbundock](https://github.com/py-econometrics/pyfixest/issues/232) for the suggestion!\n\n### Bug Fixes:\n\n- Missing variables in features were not always handled correctly in `predict()` with `newdata` not `None` in the presence of missing data, which would lead to an error. See [#246](https://github.com/py-econometrics/pyfixest/issues/246) for details.\n- Categorical variables were not always handled correctly in `predict()` with `newdata` not `None`, because the number of fixed effects levels in `newdata` might be smaller than in `data`. In consequence, some levels were not found, which lead to an error. See [#245](https://github.com/py-econometrics/pyfixest/issues/245) for details. Thanks to [@jiafengkevinchen](https://github.com/jiafengkevinchen) for the pointer!\n- Multicollinearity checks for over-identified IV was not implemented correctly, which lead to a dimension error. See [#236](https://github.com/py-econometrics/pyfixest/issues/236) for details.  Thanks to [@jiafengkevinchen](https://github.com/jiafengkevinchen) for the pointer!\n- The number of degrees of freedom `k` was computed incorrectly if columns were dropped from the design matrix `X` in the presence of multicollinearity. See [#235](https://github.com/py-econometrics/pyfixest/issues/235) for details.  Thanks to [@jiafengkevinchen](https://github.com/jiafengkevinchen) for the pointer!\n- If all variables were dropped due to multicollinearity, an unclear and imprecise error message was produced. See [#228](https://github.com/py-econometrics/pyfixest/issues/228) for details. Thanks to [@manferdinig](https://github.com/manferdinig) for the pointer!\n- If selection `fixef_rm = 'singleton'`, `feols()` and `fepois()` would fail, which has been fixed. [#192](https://github.com/py-econometrics/pyfixest/issues/192)\n\n### Dependency Requirements\n\n- For now, sets `formulaic` versions to be `0.6.6` or lower as version `1.0.0` seems to have introduced a problem with the `i()` operator, See [#244](https://github.com/py-econometrics/pyfixest/issues/244) for details.\n- Drops dependency on `pyhdfe`.\n\n## PyFixest 0.11.1\n\n- Fixes some bugs around the computation of R-squared values (see [issue #103](https://github.com/py-econometrics/pyfixest/issues/103)).\n- Reports R-squared values again when calling `.summary()`.\n\n## PyFixest 0.11.0\n\n- Significant speedups for CRV1 inference.\n\n## PyFixest 0.10.12\n\nFixes a small bug with the separation check for poisson regression #138.\n\n## PyFixest 0.10.11\n\nFixes bugs with i(var1, var2) syntax introduced with PyFixest 0.10.10.\n\n## PyFixest 0.10.10\n\nFixes a bug with variable interactions via `i(var)` syntax. See [issue #221](https://github.com/py-econometrics/pyfixest/issues/211).\n\n## PyFixest 0.10.9\n\nMakes `etable()` prettier and more informative.\n\n## PyFixest 0.10.8\n\n### Breaking changes\nReference levels for the `i()` formula syntax can no longer be set within the formula, but need to be added via the `i_ref1` function argument to either `feols()` and `fepois()`.\n\n### New feature\n\nA `dids2()` function is added, which implements the 2-stage difference-in-differences procedure à la Gardner and follows the syntax of @kylebutts [did2s](https://github.com/kylebutts/did2s) R package.\n\n```py\nfrom pyfixest.did.did import did2s\nfrom pyfixest.estimation import feols\nfrom pyfixest.visualize import iplot\nimport pandas as pd\nimport numpy as np\n\ndf_het = pd.read_csv(\"https://raw.githubusercontent.com/py-econometrics/pyfixest/master/pyfixest/did/data/df_het.csv\")\n\nfit = did2s(\n    df_het,\n    yname = \"dep_var\",\n    first_stage = \"~ 0 | state + year\",\n    second_stage = \"~i(rel_year)\",\n    treatment = \"treat\",\n    cluster = \"state\",\n    i_ref1 = [-1.0, np.inf],\n)\n\nfit_twfe = feols(\n    \"dep_var ~ i(rel_year) | state + year\",\n    df_het,\n    i_ref1 = [-1.0, np.inf]\n)\n\niplot([fit, fit_twfe], coord_flip=False, figsize = (900, 400), title = \"TWFE vs DID2S\")\n```\n![](figures/event_study.svg)\n\n\n\n## PyFixest 0.10.7\n\n- Adds basic support for event study estimation via two-way fixed effects and Gardner's two-stage \"Did2s\" approach.\n  This is a beta version and experimental. Further updates (i.e. proper event studies vs \"only\" ATTs) and a more flexible\n  did2s front end will follow in future releases.\n\n```python\n%load_ext autoreload\n%autoreload 2\n\nfrom pyfixest.did.did import event_study\nimport pyfixest as pf\nimport pandas as pd\ndf_het = pd.read_csv(\"pyfixest/did/data/df_het.csv\")\n\nfit_twfe = event_study(\n    data = df_het,\n    yname = \"dep_var\",\n    idname= \"state\",\n    tname = \"year\",\n    gname = \"g\",\n    estimator = \"twfe\"\n)\n\nfit_did2s = event_study(\n    data = df_het,\n    yname = \"dep_var\",\n    idname= \"state\",\n    tname = \"year\",\n    gname = \"g\",\n    estimator = \"did2s\"\n)\n\npf.etable([fit_twfe, fit_did2s])\n# | Coefficient   | est1             | est2             |\n# |:--------------|:-----------------|:-----------------|\n# | ATT           | 2.135*** (0.044) | 2.152*** (0.048) |\n# Significance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n```\n\n## PyFixest 0.10.6\n\n- Adds an `etable()` function that outputs markdown, latex or a pd.DataFrame.\n\n## PyFixest 0.10.5\n\n- Fixes a big in IV estimation that would trigger an error. See [here](https://github.com/py-econometrics/pyfixest/issues/197) for details. Thanks to @aeturrell for reporting!\n\n## PyFixest 0.10.4\n\n- Implements a custom function to drop singleton fixed effects.\n- Additional small performance improvements.\n\n## PyFixest 0.10.3\n\n- Allows for white space in the multiway clustering formula.\n- Adds documentation for multiway clustering.\n\n## PyFixest 0.10.2\n\n- Adds support for two-way clustering.\n- Adds support for CRV3 inference for Poisson regression.\n\n## PyFixest 0.10.1\n\n- Adapts the internal fixed effects demeaning criteron to match `PyHDFE's default.\n- Adds Styfen as coauthor.\n\n## PyFixest 0.10\n\n- Multiple performance improvements.\n- Most importantly, implements a custom demeaning algorithm in `numba` - thanks to Styfen Schaer (@styfenschaer),\n  which leads to performance improvements of 5x or more:\n\n```python\n%load_ext autoreload\n%autoreload 2\n\nimport numpy as np\nimport time\nimport pyhdfe\nfrom pyfixest.demean import demean\n\nnp.random.seed(1238)\nN = 10_000_000\nx = np.random.normal(0, 1, 10*N).reshape((N,10))\nf1 = np.random.choice(list(range(1000)), N).reshape((N,1))\nf2 = np.random.choice(list(range(1000)), N).reshape((N,1))\n\nflist = np.concatenate((f1, f2), axis = 1)\nweights = np.ones(N)\n\nalgorithm = pyhdfe.create(flist)\n\nstart_time = time.time()\nres_pyhdfe = algorithm.residualize(x)\nend_time = time.time()\nprint(end_time - start_time)\n# 26.04527711868286\n\n\nstart_time = time.time()\nres_pyfixest, success = demean(x, flist, weights, tol = 1e-10)\n# Calculate the execution time\nend_time = time.time()\nprint(end_time - start_time)\n#4.334428071975708\n\nnp.allclose(res_pyhdfe , res_pyfixest)\n# True\n```\n\n\n\n## PyFixest 0.9.11\n\n- Bump required `formulaic` version to `0.6.5`.\n- Stop copying the data frame in `fixef()`.\n\n## PyFixest 0.9.10\n\n- Fixes a big in the `wildboottest` method (see [#158](https://github.com/py-econometrics/pyfixest/issues/158)).\n- Allows to run a wild bootstrap after fixed effect estimation.\n\n## PyFixest 0.9.9\n\n- Adds support for `wildboottest` for Python `3.11`.\n\n## PyFixest 0.9.8\n\n- Fixes a couple more bugs in the `predict()` and `fixef()` methods.\n- The `predict()` argument `data` is renamed to `newdata`.\n\n## PyFixest 0.9.7\n\nFixes a bug in `predict()` produced when multicollinear variables are dropped.\n\n## PyFixest 0.9.6\n\nImproved Collinearity handling. See [#145](https://github.com/py-econometrics/pyfixest/issues/145)\n\n## PyFixest 0.9.5\n\n\n- Moves plotting from `matplotlib` to `lets-plot`.\n- Fixes a few minor bugs in plotting and the `fixef()` method.\n\n\n## PyFixest 0.9.1\n\n### Breaking API changes\n\nIt is no longer required to initiate an object of type `Fixest` prior to running [Feols(/reference/Feols.qmd) or `fepois`. Instead,\nyou can now simply use `feols()` and `fepois()` as functions, just as in `fixest`. Both function can be found in an\n`estimation` module and need to obtain a `pd.DataFrame` as a function argument:\n\n```py\nfrom pyfixest.estimation import fixest, fepois\nfrom pyfixest.utils import get_data\n\ndata = get_data()\nfit = feols(\"Y ~ X1 | f1\", data = data, vcov = \"iid\")\n```\n\nCalling `feols()` will return an instance of class [Feols(/reference/Feols.qmd), while calling `fepois()` will return an instance of class `Fepois`.\nMultiple estimation syntax will return an instance of class `FixestMulti`.\n\nPost processing works as before via `.summary()`, `.tidy()` and other methods.\n\n### New Features\n\nA summary function allows to compare multiple models:\n\n```py\nfrom pyfixest.summarize import summary\nfit2 = feols(\"Y ~ X1 + X2| f1\", data = data, vcov = \"iid\")\nsummary([fit, fit2])\n```\n\nVisualization is possible via custom methods (`.iplot()` & `.coefplot()`), but a new module allows to visualize\n  a list of [Feols(/reference/Feols.qmd) and/or `Fepois` instances:\n\n```py\nfrom pyfixest.visualize import coefplot, iplot\ncoefplot([fit, fit2])\n```\n\nThe documentation has been improved (though there is still room for progress), and the code has been cleaned up a\nbit (also lots of room for improvements).\n\n",
    "supporting": [
      "news_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}