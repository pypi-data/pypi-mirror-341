{
  "hash": "4b50300f134b7984e239c15007dc0c85",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: estimation.feiv_.Feiv\n---\n\n\n\n```python\nestimation.feiv_.Feiv(\n    self,\n    FixestFormula,\n    data,\n    ssc_dict,\n    drop_singletons,\n    drop_intercept,\n    weights,\n    weights_type,\n    collin_tol,\n    fixef_tol,\n    lookup_demeaned_data,\n    solver='np.linalg.solve',\n    demeaner_backend='numba',\n    store_data=True,\n    copy_data=True,\n    lean=False,\n    context=0,\n    sample_split_var=None,\n    sample_split_value=None,\n)\n```\n\nNon user-facing class to estimate an IV model using a 2SLS estimator.\n\nInherits from the Feols class. Users should not directly instantiate this class,\nbut rather use the [feols()](/reference/estimation.feols.qmd) function. Note that\nno demeaning is performed in this class: demeaning is performed in the\n[FixestMulti](/reference/estimation.fixest_multi.qmd) class (to allow for caching\nof demeaned variables for multiple estimation).\n\n## Parameters {.doc-section .doc-section-parameters}\n\n| Name             | Type                                                                                       | Description                                                                                               | Default             |\n|------------------|--------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|---------------------|\n| Y                | np.ndarray                                                                                 | Dependent variable, a two-dimensional np.array.                                                           | _required_          |\n| X                | np.ndarray                                                                                 | Independent variables, a two-dimensional np.array.                                                        | _required_          |\n| endgvar          | np.ndarray                                                                                 | Endogenous Indenpendent variables, a two-dimensional np.array.                                            | _required_          |\n| Z                | np.ndarray                                                                                 | Instruments, a two-dimensional np.array.                                                                  | _required_          |\n| weights          | np.ndarray                                                                                 | Weights, a one-dimensional np.array.                                                                      | _required_          |\n| coefnames_x      | list                                                                                       | Names of the coefficients of X.                                                                           | _required_          |\n| coefnames_z      | list                                                                                       | Names of the coefficients of Z.                                                                           | _required_          |\n| collin_tol       | float                                                                                      | Tolerance for collinearity check.                                                                         | _required_          |\n| solver           | Literal\\[\\'np.linalg.lstsq\\', \\'np.linalg.solve\\', \\'scipy.sparse.linalg.lsqr\\', \\'jax\\'\\] | default is 'np.linalg.solve'. Solver to use for the estimation.                                           | `'np.linalg.solve'` |\n| demeaner_backend | Literal\\[\\'numba\\', \\'jax\\'\\]                                                              | The backend used for demeaning.                                                                           | `'numba'`           |\n| weights_name     | Optional\\[str\\]                                                                            | Name of the weights variable.                                                                             | _required_          |\n| weights_type     | Optional\\[str\\]                                                                            | Type of the weights variable. Either \"aweights\" for analytic weights or \"fweights\" for frequency weights. | _required_          |\n\n## Attributes {.doc-section .doc-section-attributes}\n\n| Name                    | Type         | Description                                                                                                                                                                                                                                                                                                                                                                                             |\n|-------------------------|--------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| _Z                      | np.ndarray   | Processed instruments after handling multicollinearity.                                                                                                                                                                                                                                                                                                                                                 |\n| _weights_type_feiv      | str          | Type of the weights variable defined in Feiv class. Either \"aweights\" for analytic weights or \"fweights\" for frequency weights.                                                                                                                                                                                                                                                                         |\n| _coefnames_z            | list         | Names of coefficients for Z after handling multicollinearity.                                                                                                                                                                                                                                                                                                                                           |\n| _collin_vars_z          | list         | Variables identified as collinear in Z.                                                                                                                                                                                                                                                                                                                                                                 |\n| _collin_index_z         | list         | Indices of collinear variables in Z.                                                                                                                                                                                                                                                                                                                                                                    |\n| _is_iv                  | bool         | Indicator if instrumental variables are used.                                                                                                                                                                                                                                                                                                                                                           |\n| _support_crv3_inference | bool         | Indicator for supporting CRV3 inference.                                                                                                                                                                                                                                                                                                                                                                |\n| _support_iid_inference  | bool         | Indicator for supporting IID inference.                                                                                                                                                                                                                                                                                                                                                                 |\n| _tZX                    | np.ndarray   | Transpose of Z times X.                                                                                                                                                                                                                                                                                                                                                                                 |\n| _tXZ                    | np.ndarray   | Transpose of X times Z.                                                                                                                                                                                                                                                                                                                                                                                 |\n| _tZy                    | np.ndarray   | Transpose of Z times Y.                                                                                                                                                                                                                                                                                                                                                                                 |\n| _tZZinv                 | np.ndarray   | Inverse of transpose of Z times Z.                                                                                                                                                                                                                                                                                                                                                                      |\n| _beta_hat               | np.ndarray   | Estimated regression coefficients.                                                                                                                                                                                                                                                                                                                                                                      |\n| _Y_hat_link             | np.ndarray   | Predicted values of the regression model.                                                                                                                                                                                                                                                                                                                                                               |\n| _u_hat                  | np.ndarray   | Residuals of the regression model.                                                                                                                                                                                                                                                                                                                                                                      |\n| _scores                 | np.ndarray   | Scores used in the regression.                                                                                                                                                                                                                                                                                                                                                                          |\n| _hessian                | np.ndarray   | Hessian matrix used in the regression.                                                                                                                                                                                                                                                                                                                                                                  |\n| _bread                  | np.ndarray   | Bread matrix used in the regression.                                                                                                                                                                                                                                                                                                                                                                    |\n| _pi_hat                 | np.ndarray   | Estimated coefficients from 1st stage regression                                                                                                                                                                                                                                                                                                                                                        |\n| _X_hat                  | np.ndarray   | Predicted values of the 1st stage regression                                                                                                                                                                                                                                                                                                                                                            |\n| _v_hat                  | np.ndarray   | Residuals of the 1st stage regression                                                                                                                                                                                                                                                                                                                                                                   |\n| _model_1st_stage        | Any          | feols object of 1st stage regression. It contains various results and diagnostics from the fixed effects OLS regression.                                                                                                                                                                                                                                                                                |\n| _endogvar_1st_stage     | np.ndarray   | Unweihgted Endogenous independent variable vector                                                                                                                                                                                                                                                                                                                                                       |\n| _Z_1st_stage            | np.ndarray   | Unweighted instruments vector to be used for 1st stage                                                                                                                                                                                                                                                                                                                                                  |\n| _non_exo_instruments    | list         | List of instruments name excluding exogenous independent vars.                                                                                                                                                                                                                                                                                                                                          |\n| __p_iv                  | scalar       | Number of instruments listed in _non_exo_instruments                                                                                                                                                                                                                                                                                                                                                    |\n| _f_stat_1st_stage       | scalar       | F-statistics of First Stage regression for evaluation of IV weakness. The computed F-statistics test the following null hypothesis : # H0 : β_{z_1} = 0 & ... & β_{z_{p_iv}} = 0 where z_1, ..., z_{p_iv} # are the instrument variables # H1 : H0 does not hold Note that this F-statistics is adjusted to heteroskedasticity / clusters if users set specification of variance-covariance matrix type |\n| _eff_F                  | scalar       | Effective F-statistics of first stage regression as in Olea and Pflueger 2013                                                                                                                                                                                                                                                                                                                           |\n| _data                   | pd.DataFrame | The data frame used in the estimation. None if arguments `lean = True` or `store_data = False`.                                                                                                                                                                                                                                                                                                         |\n\n## Raises {.doc-section .doc-section-raises}\n\n| Name   | Type       | Description                          |\n|--------|------------|--------------------------------------|\n|        | ValueError | If Z is not a two-dimensional array. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [IV_Diag](#pyfixest.estimation.feiv_.Feiv.IV_Diag) | Implement IV diagnostic tests. |\n| [IV_weakness_test](#pyfixest.estimation.feiv_.Feiv.IV_weakness_test) | Implement IV weakness test (F-test). |\n| [demean](#pyfixest.estimation.feiv_.Feiv.demean) | Demean instruments and endogeneous variable. |\n| [drop_multicol_vars](#pyfixest.estimation.feiv_.Feiv.drop_multicol_vars) | Drop multicollinear variables in matrix of instruments Z. |\n| [eff_F](#pyfixest.estimation.feiv_.Feiv.eff_F) | Compute Effective F stat (Olea and Pflueger 2013). |\n| [first_stage](#pyfixest.estimation.feiv_.Feiv.first_stage) | Implement First stage regression. |\n| [get_fit](#pyfixest.estimation.feiv_.Feiv.get_fit) | Fit a IV model using a 2SLS estimator. |\n| [to_array](#pyfixest.estimation.feiv_.Feiv.to_array) | Transform estimation DataFrames to arrays. |\n| [wls_transform](#pyfixest.estimation.feiv_.Feiv.wls_transform) | Transform variables for WLS estimation. |\n\n### IV_Diag { #pyfixest.estimation.feiv_.Feiv.IV_Diag }\n\n```python\nestimation.feiv_.Feiv.IV_Diag(statistics=None)\n```\n\nImplement IV diagnostic tests.\n\n#### Notes {.doc-section .doc-section-notes}\n\nThis method covers diagnostic tests related with IV regression.\nWe currently have IV weak tests only. More test will be updated\nin future updates!\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name       | Type        | Description                      | Default   |\n|------------|-------------|----------------------------------|-----------|\n| statistics | list\\[str\\] | List of IV diagnostic statistics | `None`    |\n\n#### Example {.doc-section .doc-section-example}\n\nThe following is an example usage of this method:\n\n\n\n    ::: {#61418e5f .cell execution_count=1}\n    ``` {.python .cell-code}\n    import numpy as np\n    import pandas as pd\n    from pyfixest.estimation.estimation import feols\n    \n    # Set random seed for reproducibility\n    np.random.seed(1)\n    \n    # Number of observations\n    n = 1000\n    \n    # Simulate the data\n    # Instrumental variable\n    z = np.random.binomial(1, 0.5, size=n)\n    z2 = np.random.binomial(1, 0.5, size=n)\n    \n    # Endogenous variable\n    d = 0.5 * z + 1.5 * z2 + np.random.normal(size=n)\n    \n    # Control variables\n    c1 = np.random.normal(size=n)\n    c2 = np.random.normal(size=n)\n    \n    # Outcome variable\n    y = 1.0 + 1.5 * d + 0.8 * c1 + 0.5 * c2 + np.random.normal(size=n)\n    \n    # Cluster variable\n    cluster = np.random.randint(1, 50, size=n)\n    weights = np.random.uniform(1, 3, size=n)\n    \n    # Create a DataFrame\n    data = pd.DataFrame({\n        'd': d,\n        'y': y,\n        'z': z,\n        'z2': z2,\n        'c1': c1,\n        'c2': c2,\n        'cluster': cluster,\n        'weights': weights\n    })\n    \n    vcov_detail = \"iid\"\n    \n    # Fit OLS model\n    fit_ols = feols(\"y ~ 1 + d + c1 + c2\", data=data, vcov=vcov_detail)\n    \n    # Fit IV model\n    fit_iv = feols(\"y ~ 1 + c1 + c2 | d ~ z\", data=data,\n             vcov=vcov_detail,\n             weights=\"weights\")\n    fit_iv.first_stage()\n    F_stat_pf = fit_iv._f_stat_1st_stage\n    fit_iv.IV_Diag()\n    F_stat_eff_pf = fit_iv._eff_F\n    \n    print(\"(Unadjusted) F stat :\", F_stat_pf)\n    print(\"Effective F stat :\", F_stat_eff_pf)\n    ```\n    \n    ::: {.cell-output .cell-output-display}\n    ```{=html}\n    \n                <div id=\"CpnEZ9\"></div>\n                <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                    if(!window.letsPlotCallQueue) {\n                        window.letsPlotCallQueue = [];\n                    }; \n                    window.letsPlotCall = function(f) {\n                        window.letsPlotCallQueue.push(f);\n                    };\n                    (function() {\n                        var script = document.createElement(\"script\");\n                        script.type = \"text/javascript\";\n                        script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                        script.onload = function() {\n                            window.letsPlotCall = function(f) {f();};\n                            window.letsPlotCallQueue.forEach(function(f) {f();});\n                            window.letsPlotCallQueue = [];\n                            \n                        };\n                        script.onerror = function(event) {\n                            window.letsPlotCall = function(f) {};    // noop\n                            window.letsPlotCallQueue = [];\n                            var div = document.createElement(\"div\");\n                            div.style.color = 'darkred';\n                            div.textContent = 'Error loading Lets-Plot JS';\n                            document.getElementById(\"CpnEZ9\").appendChild(div);\n                        };\n                        var e = document.getElementById(\"CpnEZ9\");\n                        e.appendChild(script);\n                    })()\n                </script>\n                \n    ```\n    :::\n    \n    ::: {.cell-output .cell-output-display}\n    ```{=html}\n    \n                <div id=\"ONMOTb\"></div>\n                <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                    if(!window.letsPlotCallQueue) {\n                        window.letsPlotCallQueue = [];\n                    }; \n                    window.letsPlotCall = function(f) {\n                        window.letsPlotCallQueue.push(f);\n                    };\n                    (function() {\n                        var script = document.createElement(\"script\");\n                        script.type = \"text/javascript\";\n                        script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                        script.onload = function() {\n                            window.letsPlotCall = function(f) {f();};\n                            window.letsPlotCallQueue.forEach(function(f) {f();});\n                            window.letsPlotCallQueue = [];\n                            \n                        };\n                        script.onerror = function(event) {\n                            window.letsPlotCall = function(f) {};    // noop\n                            window.letsPlotCallQueue = [];\n                            var div = document.createElement(\"div\");\n                            div.style.color = 'darkred';\n                            div.textContent = 'Error loading Lets-Plot JS';\n                            document.getElementById(\"ONMOTb\").appendChild(div);\n                        };\n                        var e = document.getElementById(\"ONMOTb\");\n                        e.appendChild(script);\n                    })()\n                </script>\n                \n    ```\n    :::\n    \n    ::: {.cell-output .cell-output-stdout}\n    ```\n    (Unadjusted) F stat : 52.815355604575046\n    Effective F stat : 48.612881198587125\n    ```\n    :::\n    :::\n    \n    \n### IV_weakness_test { #pyfixest.estimation.feiv_.Feiv.IV_weakness_test }\n\n```python\nestimation.feiv_.Feiv.IV_weakness_test(iv_diag_statistics=None)\n```\n\nImplement IV weakness test (F-test).\n\nThis method covers hetero-robust and clustered-robust F statistics.\nIt produces two statistics:\n\n- self._f_stat_1st_stage: F statistics of first stage regression\n- self._eff_F: Effective F statistics (Olea and Pflueger 2013)\n               of first stage regression\n\n#### Notes {.doc-section .doc-section-notes}\n\n\"self._f_stat_1st_stage\" is adjusted to the specification of vcov.\nIf vcov_detail = \"iid\", F statistics is not adjusted,\notherwise it is always adjusted.\n\n#### Parameters {.doc-section .doc-section-parameters}\n\n| Name               | Type   | Description                    | Default   |\n|--------------------|--------|--------------------------------|-----------|\n| iv_diag_statistics | list   | List of IV weakness statistics | `None`    |\n\n### demean { #pyfixest.estimation.feiv_.Feiv.demean }\n\n```python\nestimation.feiv_.Feiv.demean()\n```\n\nDemean instruments and endogeneous variable.\n\n### drop_multicol_vars { #pyfixest.estimation.feiv_.Feiv.drop_multicol_vars }\n\n```python\nestimation.feiv_.Feiv.drop_multicol_vars()\n```\n\nDrop multicollinear variables in matrix of instruments Z.\n\n### eff_F { #pyfixest.estimation.feiv_.Feiv.eff_F }\n\n```python\nestimation.feiv_.Feiv.eff_F()\n```\n\nCompute Effective F stat (Olea and Pflueger 2013).\n\n### first_stage { #pyfixest.estimation.feiv_.Feiv.first_stage }\n\n```python\nestimation.feiv_.Feiv.first_stage()\n```\n\nImplement First stage regression.\n\n### get_fit { #pyfixest.estimation.feiv_.Feiv.get_fit }\n\n```python\nestimation.feiv_.Feiv.get_fit()\n```\n\nFit a IV model using a 2SLS estimator.\n\n### to_array { #pyfixest.estimation.feiv_.Feiv.to_array }\n\n```python\nestimation.feiv_.Feiv.to_array()\n```\n\nTransform estimation DataFrames to arrays.\n\n### wls_transform { #pyfixest.estimation.feiv_.Feiv.wls_transform }\n\n```python\nestimation.feiv_.Feiv.wls_transform()\n```\n\nTransform variables for WLS estimation.\n\n",
    "supporting": [
      "estimation.feiv_.Feiv_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}