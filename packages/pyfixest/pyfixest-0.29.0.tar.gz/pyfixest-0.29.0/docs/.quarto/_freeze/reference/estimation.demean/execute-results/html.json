{
  "hash": "828c0f5f2bda001ce512c808a7875938",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: estimation.demean\n---\n\n\n\n```python\nestimation.demean(x, flist, weights, tol=1e-08, maxiter=100000)\n```\n\nDemean an array.\n\nWorkhorse for demeaning an input array `x` based on the specified fixed\neffects and weights via the alternating projections algorithm.\n\n## Parameters {.doc-section .doc-section-parameters}\n\n| Name    | Type          | Description                                                                                                    | Default    |\n|---------|---------------|----------------------------------------------------------------------------------------------------------------|------------|\n| x       | numpy.ndarray | Input array of shape (n_samples, n_features). Needs to be of type float.                                       | _required_ |\n| flist   | numpy.ndarray | Array of shape (n_samples, n_factors) specifying the fixed effects. Needs to already be converted to integers. | _required_ |\n| weights | numpy.ndarray | Array of shape (n_samples,) specifying the weights.                                                            | _required_ |\n| tol     | float         | Tolerance criterion for convergence. Defaults to 1e-08.                                                        | `1e-08`    |\n| maxiter | int           | Maximum number of iterations. Defaults to 100_000.                                                             | `100000`   |\n\n## Returns {.doc-section .doc-section-returns}\n\n| Name   | Type                         | Description                                                                                                                                   |\n|--------|------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|\n|        | tuple\\[numpy.ndarray, bool\\] | A tuple containing the demeaned array of shape (n_samples, n_features) and a boolean indicating whether the algorithm converged successfully. |\n\n## Examples {.doc-section .doc-section-examples}\n\n\n::: {#0b8a1dc7 .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pyfixest as pf\nfrom pyfixest.utils.dgps import get_blw\nfrom pyfixest.estimation.demean_ import demean\nfrom formulaic import model_matrix\n\nfml = \"y ~ treat | state + year\"\n\ndata = get_blw()\ndata.head()\n\nY, rhs = model_matrix(fml, data)\nX = rhs[0].drop(columns=\"Intercept\")\nfe = rhs[1].drop(columns=\"Intercept\")\nYX = np.concatenate([Y, X], axis=1)\n\n# to numpy\nY = Y.to_numpy()\nX = X.to_numpy()\nYX = np.concatenate([Y, X], axis=1)\nfe = fe.to_numpy().astype(int)  # demean requires fixed effects as ints!\n\nYX_demeaned, success = demean(YX, fe, weights = np.ones(YX.shape[0]))\nY_demeaned = YX_demeaned[:, 0]\nX_demeaned = YX_demeaned[:, 1:]\n\nprint(np.linalg.lstsq(X_demeaned, Y_demeaned, rcond=None)[0])\nprint(pf.feols(fml, data).coef())\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"EWbHLZ\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"EWbHLZ\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"EWbHLZ\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"uDFdma\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"uDFdma\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"uDFdma\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[-6.66951607]\nCoefficient\ntreat   -6.669516\nName: Estimate, dtype: float64\n```\n:::\n:::\n\n\n",
    "supporting": [
      "estimation.demean_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}