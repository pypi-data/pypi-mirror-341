{
  "hash": "929a1730ecebcdc59e92d4c94ec48bea",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: did.visualize.panelview\n---\n\n\n\n```python\ndid.visualize.panelview(\n    data,\n    unit,\n    time,\n    treat,\n    outcome=None,\n    collapse_to_cohort=False,\n    subsamp=None,\n    units_to_plot=None,\n    sort_by_timing=False,\n    xlab=None,\n    ylab=None,\n    figsize=(11, 3),\n    noticks=False,\n    title=None,\n    legend=False,\n    ax=None,\n    xlim=None,\n    ylim=None,\n)\n```\n\nGenerate a panel view of the treatment variable over time for each unit.\n\n## Parameters {.doc-section .doc-section-parameters}\n\n| Name               | Type                   | Description                                                                                   | Default    |\n|--------------------|------------------------|-----------------------------------------------------------------------------------------------|------------|\n| data               | pandas.DataFrame       | The input dataframe containing the data.                                                      | _required_ |\n| unit               | str                    | The column name representing the unit identifier.                                             | _required_ |\n| time               | str                    | The column name representing the time identifier.                                             | _required_ |\n| treat              | str                    | The column name representing the treatment variable.                                          | _required_ |\n| outcome            | str                    | The column name representing the outcome variable. If not None, an outcome plot is generated. | `None`     |\n| collapse_to_cohort | bool                   | Whether to collapse units into treatment cohorts.                                             | `False`    |\n| subsamp            | int                    | The number of samples to draw from data set for display (default is None).                    | `None`     |\n| sort_by_timing     | bool                   | Whether to sort the treatment cohorts by the number of treated periods.                       | `False`    |\n| xlab               | str                    | The label for the x-axis. Default is None, in which case default labels are used.             | `None`     |\n| ylab               | str                    | The label for the y-axis. Default is None, in which case default labels are used.             | `None`     |\n| figsize            | tuple                  | The figure size for the outcome plot. Default is (11, 3).                                     | `(11, 3)`  |\n| noticks            | bool                   | Whether to display ticks on the plot. Default is False.                                       | `False`    |\n| title              | str                    | The title for the plot. Default is None, in which case no title is displayed.                 | `None`     |\n| legend             | bool                   | Whether to display a legend. Default is False (since binary treatments are self-explanatory). | `False`    |\n| ax                 | matplotlib.pyplot.Axes | The axes on which to draw the plot. Default is None, in which case a new figure is created.   | `None`     |\n| xlim               | tuple                  | The limits for the x-axis of the plot. Default is None.                                       | `None`     |\n| ylim               | tuple                  | The limits for the y-axis of the plot. Default is None.                                       | `None`     |\n| units_to_plot      | list                   | A list of unit to include in the plot. If None, all units in the dataset are plotted.         | `None`     |\n\n## Returns {.doc-section .doc-section-returns}\n\n| Name   | Type                   | Description   |\n|--------|------------------------|---------------|\n| ax     | matplotlib.pyplot.Axes |               |\n\n## Examples {.doc-section .doc-section-examples}\n\n\n::: {#0a088e7a .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport pyfixest as pf\n\nurl = \"https://raw.githubusercontent.com/py-econometrics/pyfixest/master/pyfixest/did/data/df_het.csv\"\ndf_het = pd.read_csv(url)\n\n# Inspect treatment assignment\npf.panelview(\n    data = df_het,\n    unit = \"unit\",\n    time = \"year\",\n    treat = \"treat\",\n    subsamp = 50,\n    title = \"Treatment Assignment\"\n)\n\n# Outcome plot\npf.panelview(\n    data = df_het,\n    unit = \"unit\",\n    time = \"year\",\n    outcome = \"dep_var\",\n    treat = \"treat\",\n    subsamp = 50,\n    title = \"Outcome Plot\"\n)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"tW6IQN\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"tW6IQN\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"tW6IQN\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"ZabFRK\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"ZabFRK\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"ZabFRK\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](did.visualize.panelview_files/figure-html/cell-2-output-3.png){width=864 height=288}\n:::\n\n::: {.cell-output .cell-output-display}\n![](did.visualize.panelview_files/figure-html/cell-2-output-4.png){width=885 height=302}\n:::\n:::\n\n\n",
    "supporting": [
      "did.visualize.panelview_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}