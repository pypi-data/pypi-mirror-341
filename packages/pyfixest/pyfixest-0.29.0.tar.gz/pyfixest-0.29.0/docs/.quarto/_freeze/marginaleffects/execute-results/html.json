{
  "hash": "7005a3119e767b4603653738c2b1958f",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Marginal Effects and Hypothesis Tests via `marginaleffects`\nformat:\n  html:\n    html-table-processing: none\ntoc: true\ntoc-title: \"On this page\"\ntoc-location: left\n---\n\n\n\n\nWe can compute marginal effects and linear and non-linear hypothesis tests via the excellent [marginaleffects](https://github.com/vincentarelbundock/pymarginaleffects) package.\n\n::: {#eb08812b .cell execution_count=1}\n``` {.python .cell-code}\nfrom marginaleffects import hypotheses\n\nimport pyfixest as pf\n\ndata = pf.get_data()\nfit = pf.feols(\"Y ~ X1 + X2\", data=data)\n\nfit.tidy()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"Kz3swh\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"Kz3swh\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"Kz3swh\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n\n            <div id=\"YOwqjZ\"></div>\n            <script type=\"text/javascript\" data-lets-plot-script=\"library\">\n                if(!window.letsPlotCallQueue) {\n                    window.letsPlotCallQueue = [];\n                }; \n                window.letsPlotCall = function(f) {\n                    window.letsPlotCallQueue.push(f);\n                };\n                (function() {\n                    var script = document.createElement(\"script\");\n                    script.type = \"text/javascript\";\n                    script.src = \"https://cdn.jsdelivr.net/gh/JetBrains/lets-plot@v4.5.2/js-package/distr/lets-plot.min.js\";\n                    script.onload = function() {\n                        window.letsPlotCall = function(f) {f();};\n                        window.letsPlotCallQueue.forEach(function(f) {f();});\n                        window.letsPlotCallQueue = [];\n                        \n                    };\n                    script.onerror = function(event) {\n                        window.letsPlotCall = function(f) {};    // noop\n                        window.letsPlotCallQueue = [];\n                        var div = document.createElement(\"div\");\n                        div.style.color = 'darkred';\n                        div.textContent = 'Error loading Lets-Plot JS';\n                        document.getElementById(\"YOwqjZ\").appendChild(div);\n                    };\n                    var e = document.getElementById(\"YOwqjZ\");\n                    e.appendChild(script);\n                })()\n            </script>\n            \n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Estimate</th>\n      <th>Std. Error</th>\n      <th>t value</th>\n      <th>Pr(&gt;|t|)</th>\n      <th>2.5%</th>\n      <th>97.5%</th>\n    </tr>\n    <tr>\n      <th>Coefficient</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Intercept</th>\n      <td>0.888779</td>\n      <td>0.108422</td>\n      <td>8.197374</td>\n      <td>8.881784e-16</td>\n      <td>0.676016</td>\n      <td>1.101542</td>\n    </tr>\n    <tr>\n      <th>X1</th>\n      <td>-0.992936</td>\n      <td>0.082117</td>\n      <td>-12.091650</td>\n      <td>0.000000e+00</td>\n      <td>-1.154079</td>\n      <td>-0.831792</td>\n    </tr>\n    <tr>\n      <th>X2</th>\n      <td>-0.176342</td>\n      <td>0.021766</td>\n      <td>-8.101743</td>\n      <td>1.554312e-15</td>\n      <td>-0.219055</td>\n      <td>-0.133630</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSuppose we were interested in testing the hypothesis that $X_{1} = X_{2}$. Given the relatively large differences in coefficients and\nsmall standard errors, we will likely reject the null that the two parameters are equal.\n\nWe can run the formal test via the `hypotheses` function from the `marginaleffects` package.\n\n::: {#1eb0f17f .cell execution_count=2}\n``` {.python .cell-code}\nhypotheses(fit, \"X1 - X2 = 0\")\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>term</th><th>estimate</th><th>std_error</th><th>statistic</th><th>p_value</th><th>s_value</th><th>conf_low</th><th>conf_high</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;X1-X2=0&quot;</td><td>-0.816593</td><td>0.085179</td><td>-9.586797</td><td>0.0</td><td>inf</td><td>-0.983541</td><td>-0.649646</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAnd indeed, we reject the null of equality of coefficients: we get a p-value of zero and a confidence interval that does not contain 0.\n\n## Non-Linear Hypothesis Tests: Ratio Estimates\n\nWe can also test run-linear hypotheses, in which case `marginaleffects` will automatically compute correct standard errors\nbased on the estimated covariance matrix and the Delta method. This is for example useful for computing inferential\nstatistics for the \"relative uplift\" in an AB test.\n\nFor the moment, let's assume that $X1$ is a randomly assigned treatment variable. As before, $Y$ is our variable / KPI of interest.\n\nUnder randomization, the model intercept measures the \"baseline\", i.e. the population average of $Y$ in the absence of treatment. To compute a relative uplift, we might compute\n\n::: {#816d73be .cell execution_count=3}\n``` {.python .cell-code}\n(fit.coef().xs(\"X1\") / fit.coef().xs(\"Intercept\") - 1) * 100\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nnp.float64(-211.71906665561212)\n```\n:::\n:::\n\n\nSo we have a really big negative treatment effect of around minus 212%! To conduct correct inference on this\nratio statistic, we need to use the delta method.\n\n\n### The Multivariate Delta Method\n\nIn a nutshell, the delta method provides a way to approximate the asympotic distribution of any non-linear transformation $g()$ or one or more random variables.\n\nIn the case of the ratio statistics, this non-linear transformation can be denoted as $g(\\theta_{1}, \\theta_{2}) = \\theta_{1} / \\theta_{2}$.\n\nHere's the **Delta Method theorem**:\n\nFirst, we define $\\theta = (\\theta_{1}, \\theta_{2})'$ and $\\mu = (\\mu_{1}, \\mu_{2})'$.\n\nBy the law of large numbers, we know that\n\n$$\n\\sqrt{N} (\\theta - \\mu) \\rightarrow_{d} N(0_{2}, \\Sigma_{2,2}) \\text{ if } N \\rightarrow \\infty.\n$$\n\nBy the **Delta Method**, we can then approximate the limit distribution of $g(\\theta)$ as\n\n\n$$\n\\sqrt{N}  (g(\\theta) - g(\\mu)) \\rightarrow_{d} N(0_{1}, g'(\\theta) \\times \\Sigma \\times g(\\theta)) \\text{ if } N \\rightarrow \\infty.\n$$.\n\n[Here's a long derivation of how to use the the delta method for inference of ratio statistics.](https://stats.stackexchange.com/questions/291594/estimation-of-population-ratio-using-delta-method). The key steps from the formula above is to derive the expression for the asymptotic variance $ g'(\\theta) \\times \\Sigma \\times g(\\theta)$.\n\nBut hey - we're lucky, because marginaleffects will do all this work for us: we don't have to derive analytic gradients ourselves =)\n\n### Using the Delta Method via `marginaleffects`:\n\nWe can employ the Delta Method via `marginaleffects` via the `hypotheses` function:\n\n::: {#4f1d904a .cell execution_count=4}\n``` {.python .cell-code}\nhypotheses(fit, \"(X1 / Intercept - 1) * 100 = 0\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (1, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>term</th><th>estimate</th><th>std_error</th><th>statistic</th><th>p_value</th><th>s_value</th><th>conf_low</th><th>conf_high</th></tr><tr><td>str</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;(X1/Intercept-1)*100=0&quot;</td><td>-211.719067</td><td>8.478682</td><td>-24.970751</td><td>0.0</td><td>inf</td><td>-228.336979</td><td>-195.101155</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nAs before, we get an estimate of around -212%. Additionally, we obtain a 95% CI via the Delta Method of [-228%, -195%].\n\nBesides hypopotheses testing, you can do a range of other cool things with the `marginaleffects` package.\nFor example (and likely unsurprisingly), you can easily compute all sorts of marginal effects for your regression models.\nFor all the details, we highly recommend to take a look\nat the [marginaleffects zoo book!](https://marginaleffects.com/index.html).\n\n",
    "supporting": [
      "marginaleffects_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}