import io
import logging
import os
import requests
import traceback
from django.http import JsonResponse
from datetime import datetime
from dotenv import load_dotenv
from django.core.exceptions import ValidationError
from rest_framework.exceptions import ValidationError as DRFValidationError

load_dotenv(override=True)

MODULE_NAME=os.getenv("MODULE_NAME")
TELEGRAM_GROUP_ID=os.getenv("TELEGRAM_GROUP_ID")
TELEGRAM_BOT_TOKEN=os.getenv("TELEGRAM_BOT_TOKEN")

TOPIC_LIST = {
    "ORDERS": 2,
    "CONTRACT": 4,
    "RATES": 38,
    "E-TICKET": 49,
    "RULES": 44,
    "SUPPLIERS": 42,
    "RULES MATCHER": 40,
    "CORE": 36,
    "CONTENT": 29,
    "CHARTER": 24,
    "REPORTS": 272
}

class Exception:
    """
    –≠—Ç–æ—Ç middleware –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ—à–∏–±–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å-–∫–æ–¥–∞–º–∏ 300, 400, 500
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Telegram –≤ –≤–∏–¥–µ `.txt` —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ.
    """
    def __init__(self, get_response):
        self.get_response = get_response
    
    def __call__(self, request):
        response = None
        try:
            response = self.get_response(request)
        except Exception as e:
            # üîπ –û—à–∏–±–∫–∞ 500 - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            response = JsonResponse({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}, status=500)
            self.log_and_notify(request, response, e)
  
        # üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥—ã 300, 400 –∏ 500
        if response.status_code >= 300:
            self.log_and_notify(request, response)

        return response
    
    def log_and_notify(self, request, response, exception=None):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –≤ `.txt` —Ñ–æ—Ä–º–∞—Ç–µ
        (IP, User-Agent, –î–∞—Ç–∞, –ó–∞–≥–æ–ª–æ–≤–∫–∏, –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏ –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞)
        """
        logger = logging.getLogger('django')
        
       # üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
        forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
        if forwarded_for:
            user_ip = forwarded_for.split(',')[0]  # –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ IP, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        else:
            user_ip = request.META.get('REMOTE_ADDR', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π IP')

        # üîπ User-Agent (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞)
        user_agent = request.META.get('HTTP_USER_AGENT', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π User-Agent')

        # üîπ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # üîπ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        request_method = request.method  # GET, POST, PUT, PATCH, DELETE
        request_headers = dict(request.headers)  # –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        request_query_params = dict(request.GET)  # Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (`?key=value`)
        request_body = "–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–µ"

        if request.method in ["POST", "PUT", "PATCH"]:
            try:
                # üîπ –ò—Å–ø–æ–ª—å–∑—É–µ–º request.read(), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å RawPostDataException
                request_body = request.read()  # ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
                
                if request_body:
                    request_body = request_body.decode("utf-8", errors="ignore")
                else:
                    request_body = "–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –ø—É—Å—Ç–æ–µ"
            except Exception as e:
                request_body = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
                
         # üîπ –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –¥–ª—è Telegram
        error_message = f"üö® *–°–µ—Ä–≤–∏—Å {MODULE_NAME}*\n\n"
        error_message += f"üîÑ *–ú–µ—Ç–æ–¥:* `{request_method}`\n"
        error_message += f"üìç *–ü—É—Ç—å:* `{request.path}`\n"
        error_message += f"üîµ *–°—Ç–∞—Ç—É—Å-–∫–æ–¥:* `{response.status_code}`\n"
        error_message += f"üåç *IP –∫–ª–∏–µ–Ω—Ç–∞:* `{user_ip}`\n"
        error_message += f"üñ• *User-Agent:* `{user_agent}`\n"
        error_message += f"üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* `{current_time}`\n"
        
        # üîπ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        
        if exception:
                
            logger.error(f"–û—à–∏–±–∫–∞ {MODULE_NAME}:", exc_info=True)
            error_trace = traceback.format_exc()
            log_content = f"–ü—É—Ç—å: {request.path}\n"
            log_content += f"–ú–µ—Ç–æ–¥: {request_method}\n"
            log_content += f"–°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}\n"
            log_content += f"IP –∫–ª–∏–µ–Ω—Ç–∞: {user_ip}\n"
            log_content += f"User-Agent: {user_agent}\n"
            log_content += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}\n"
            log_content += f"–ó–∞–≥–æ–ª–æ–≤–∫–∏:\n{request_headers}\n\n"
            log_content += f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:\n{request_query_params}\n\n"
            log_content += f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:\n{request_body}\n\n"
            log_content += f"–û—à–∏–±–∫–∞: {str(exception)}\n\n"
            log_content += f"{error_trace}\n"
            
            if isinstance(exception, (ValidationError, DRFValidationError)):
                log_content += f"‚ùå *Validation Error:* `{exception}`\n"
                logger.error(f"Validation Error: {exception}")
            
        else:
            log_content = f"–ü—É—Ç—å: {request.path}\n"
            log_content += f"–ú–µ—Ç–æ–¥: {request_method}\n"
            log_content += f"–°—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}\n"
            log_content += f"IP –∫–ª–∏–µ–Ω—Ç–∞: {user_ip}\n"
            log_content += f"User-Agent: {user_agent}\n"
            log_content += f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {current_time}\n"
            log_content += f"–ó–∞–≥–æ–ª–æ–≤–∫–∏:\n{request_headers}\n\n"
            log_content += f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:\n{request_query_params}\n\n"
            log_content += f"–¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:\n{request_body}\n\n"
            log_content += f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.content.decode('utf-8')}\n"

        # üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –≤ Telegram
        self.send_to_telegram(error_message, log_content)

    def send_to_telegram(self, caption, content):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ `.txt` —Ñ–∞–π–ª–∞ –≤ Telegram –±–µ–∑ –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫."""
        
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        file_obj = io.BytesIO(content.encode('utf-8'))
        file_obj.name = "error_log.txt"

        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendDocument"
        files = {"document": file_obj}
        data = {"chat_id": TELEGRAM_GROUP_ID, "caption": caption, "parse_mode": "Markdown"}
        if MODULE_NAME:
            data["message_thread_id"] = TOPIC_LIST[MODULE_NAME]
        try:
            requests.post(url, files=files, data=data)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞ –≤ Telegram:", e)
