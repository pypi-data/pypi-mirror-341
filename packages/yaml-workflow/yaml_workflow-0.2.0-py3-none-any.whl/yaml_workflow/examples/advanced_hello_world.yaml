# Advanced Hello World Workflow
# This workflow demonstrates several key features of the workflow engine:
# - Input validation with error handling
# - Conditional execution based on validation results
# - File operations (read/write) in different formats (txt, json, yaml)
# - Shell command execution
# - Template rendering with variable substitution
# - Multi-step workflow with dependencies

name: Advanced Hello World
description: >
  An advanced hello world workflow demonstrating:
  - Input validation
  - Conditional execution
  - Error handling
  - Multiple output formats
  - Shell commands
  - Template rendering
  - Custom module tasks

params:
  name:
    description: Name to include in the greeting
    default: World

steps:
  # Step 1: Validate the input name parameter
  # Creates a validation result file that other steps will use
  - name: validate_input
    task: shell
    command: |
      mkdir -p "output/"
      if [ -z "{{ name|default('') }}" ]; then
        echo "Error: Name parameter is required" > "output/validation_result.txt"
      elif [ "{{ name|length }}" -lt 2 ]; then
        echo "Error: Name must be at least 2 characters long" > "output/validation_result.txt"
      elif [ "{{ name|length }}" -gt 50 ]; then
        echo "Error: Name must not exceed 50 characters" > "output/validation_result.txt"
      else
        echo "Valid: {{ name }}" > "output/validation_result.txt"
      fi

  # Step 2: Read the validation result file
  # This step uses the file_tasks module to read the validation result
  # The content is stored in the validation_content variable for the next step
  - name: check_validation
    task: read_file
    params:
      file_path: "output/validation_result.txt"
      encoding: "utf-8"
    outputs: validation_content

  # Step 3: Process the validation result
  # Creates a boolean flag file (validation_passed.txt) that will control conditional execution
  - name: process_validation
    task: shell
    command: |
      if grep -q "^Error:" "output/validation_result.txt"; then
        echo "Validation failed:" >&2
        cat "output/validation_result.txt" >&2
        printf "false" > "output/validation_passed.txt"
      else
        echo "Validation passed"
        printf "true" > "output/validation_passed.txt"
      fi

  # Step 3b: Read validation result
  - name: read_validation
    task: read_file
    params:
      file_path: "output/validation_passed.txt"
    outputs: validation_content

  # Debug step to print all variables
  - name: debug_vars
    task: print_vars
    params:
      message: "Available variables"

  # Debug step to print validation result
  - name: debug_validation
    task: shell
    command: |
      echo "=== Debug Info ==="
      printf "Validation Result File Content:"
      cat "output/validation_passed.txt"
      echo ""
      echo "Validation Content: {{ validation_content }}"
      echo "=== End Debug ==="

  # Step 4: Get current timestamp
  # Only runs if validation passed (condition checks validation_passed.txt)
  # Output stored in current_timestamp variable for use in greeting
  - name: get_timestamp
    task: shell
    command: date -u +"%Y-%m-%dT%H:%M:%SZ"
    outputs: current_timestamp
    condition: "'{{ validation_content }}' == 'true'"

  # Step 5: Create JSON greeting
  # Only runs if validation passed
  # Demonstrates JSON file creation with template variables
  - name: create_greeting
    task: write_json
    params:
      file_path: "output/greeting.json"
      data: 
        greeting: "Hello, {{ name }}!"
        timestamp: "{{ current_timestamp }}"
        run_number: "{{ run_number }}"
        language: "en"
      indent: 2
    condition: "'{{ validation_content }}' == 'true'"

  # Step 6: Create multi-language greetings
  # Only runs if validation passed
  # Demonstrates YAML file creation with template variables
  - name: translate_greeting
    task: write_yaml
    params:
      file_path: "output/greetings.yaml"
      data:
        English: "Hello, {{ name }}!"
        Spanish: "¡Hola, {{ name }}!"
        French: "Bonjour, {{ name }}!"
        German: "Hallo, {{ name }}!"
        Italian: "Ciao, {{ name }}!"
        Japanese: "こんにちは、{{ name }}さん！"
    condition: "'{{ validation_content }}' == 'true'"

  # Step 7: Format and display results
  # Only runs if validation passed
  # Reads and displays the generated files in a formatted output
  - name: format_output
    task: shell
    command: |
      if [ -f "output/greeting.json" ]; then
        echo "=== Workflow Results ==="
        echo "Run #{{ run_number }} at {{ current_timestamp }}"
        echo
        echo "JSON Greeting:"
        cat "output/greeting.json"
        echo
        echo "Multiple Languages:"
        cat "output/greetings.yaml"
        echo
        echo "=== End of Results ==="
      fi
    condition: "'{{ validation_content }}' == 'true'"

  # Step 8: Handle validation errors
  # Only runs if validation failed
  # Creates an error report with details about the validation failure
  - name: handle_error
    task: write_file
    params:
      file_path: "output/error_report.txt"
      content: |
        Workflow encountered an error:
        Input validation failed{% if name %} for name: {{ name }}{% else %}: name parameter not provided{% endif %}
        
        Please check the requirements and try again.
        
        Requirements:
        - Name must be provided
        - Name must be between 2 and 50 characters
        - Name must not contain special characters
    condition: "'{{ validation_content }}' == 'false'"

  # Step 9: Final status notification
  # Always runs (no condition)
  # Provides a summary of the workflow execution
  - name: notify_status
    task: shell
    command: |
      if [ "$(cat output/validation_passed.txt)" = "true" ]; then
        echo "Workflow completed successfully!"
        echo "Check the output files for detailed results:"
        echo "- greeting.json: JSON formatted greeting"
        echo "- greetings.yaml: Multi-language greetings"
        echo "- validation_result.txt: Input validation details"
      else
        echo "Workflow failed due to validation errors."
        echo "Check error_report.txt for details."
        if [ -f "output/error_report.txt" ]; then
          cat "output/error_report.txt"
        else
          cat "output/validation_result.txt"
        fi
      fi 